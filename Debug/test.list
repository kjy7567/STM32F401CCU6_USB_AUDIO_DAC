
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b54  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08007ce8  08007ce8  00017ce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d48  08007d48  00020148  2**0
                  CONTENTS
  4 .ARM          00000008  08007d48  08007d48  00017d48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d50  08007d50  00020148  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d50  08007d50  00017d50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d54  08007d54  00017d54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000148  20000000  08007d58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001408  20000148  08007ea0  00020148  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001550  08007ea0  00021550  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020148  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010eb6  00000000  00000000  00020178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003292  00000000  00000000  0003102e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db0  00000000  00000000  000342c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c38  00000000  00000000  00035070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018cea  00000000  00000000  00035ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000131ba  00000000  00000000  0004e992  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008994f  00000000  00000000  00061b4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000eb49b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003690  00000000  00000000  000eb4ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000148 	.word	0x20000148
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08007cd0 	.word	0x08007cd0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000014c 	.word	0x2000014c
 80001d0:	08007cd0 	.word	0x08007cd0

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468e      	mov	lr, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14d      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000212:	428a      	cmp	r2, r1
 8000214:	4694      	mov	ip, r2
 8000216:	d969      	bls.n	80002ec <__udivmoddi4+0xe8>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b152      	cbz	r2, 8000234 <__udivmoddi4+0x30>
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	f1c2 0120 	rsb	r1, r2, #32
 8000226:	fa20 f101 	lsr.w	r1, r0, r1
 800022a:	fa0c fc02 	lsl.w	ip, ip, r2
 800022e:	ea41 0e03 	orr.w	lr, r1, r3
 8000232:	4094      	lsls	r4, r2
 8000234:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000238:	0c21      	lsrs	r1, r4, #16
 800023a:	fbbe f6f8 	udiv	r6, lr, r8
 800023e:	fa1f f78c 	uxth.w	r7, ip
 8000242:	fb08 e316 	mls	r3, r8, r6, lr
 8000246:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024a:	fb06 f107 	mul.w	r1, r6, r7
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800025a:	f080 811f 	bcs.w	800049c <__udivmoddi4+0x298>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 811c 	bls.w	800049c <__udivmoddi4+0x298>
 8000264:	3e02      	subs	r6, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 f707 	mul.w	r7, r0, r7
 800027c:	42a7      	cmp	r7, r4
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x92>
 8000280:	eb1c 0404 	adds.w	r4, ip, r4
 8000284:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000288:	f080 810a 	bcs.w	80004a0 <__udivmoddi4+0x29c>
 800028c:	42a7      	cmp	r7, r4
 800028e:	f240 8107 	bls.w	80004a0 <__udivmoddi4+0x29c>
 8000292:	4464      	add	r4, ip
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029a:	1be4      	subs	r4, r4, r7
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa4>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xc2>
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	f000 80ef 	beq.w	8000496 <__udivmoddi4+0x292>
 80002b8:	2600      	movs	r6, #0
 80002ba:	e9c5 0100 	strd	r0, r1, [r5]
 80002be:	4630      	mov	r0, r6
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f683 	clz	r6, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d14a      	bne.n	8000364 <__udivmoddi4+0x160>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd4>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80f9 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	469e      	mov	lr, r3
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa4>
 80002e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa4>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xec>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 8092 	bne.w	800041e <__udivmoddi4+0x21a>
 80002fa:	eba1 010c 	sub.w	r1, r1, ip
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2601      	movs	r6, #1
 8000308:	0c20      	lsrs	r0, r4, #16
 800030a:	fbb1 f3f7 	udiv	r3, r1, r7
 800030e:	fb07 1113 	mls	r1, r7, r3, r1
 8000312:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000316:	fb0e f003 	mul.w	r0, lr, r3
 800031a:	4288      	cmp	r0, r1
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x12c>
 800031e:	eb1c 0101 	adds.w	r1, ip, r1
 8000322:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x12a>
 8000328:	4288      	cmp	r0, r1
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2c0>
 800032e:	4643      	mov	r3, r8
 8000330:	1a09      	subs	r1, r1, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb1 f0f7 	udiv	r0, r1, r7
 8000338:	fb07 1110 	mls	r1, r7, r0, r1
 800033c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x156>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x154>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 8000358:	4608      	mov	r0, r1
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000362:	e79c      	b.n	800029e <__udivmoddi4+0x9a>
 8000364:	f1c6 0720 	rsb	r7, r6, #32
 8000368:	40b3      	lsls	r3, r6
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa20 f407 	lsr.w	r4, r0, r7
 8000376:	fa01 f306 	lsl.w	r3, r1, r6
 800037a:	431c      	orrs	r4, r3
 800037c:	40f9      	lsrs	r1, r7
 800037e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000382:	fa00 f306 	lsl.w	r3, r0, r6
 8000386:	fbb1 f8f9 	udiv	r8, r1, r9
 800038a:	0c20      	lsrs	r0, r4, #16
 800038c:	fa1f fe8c 	uxth.w	lr, ip
 8000390:	fb09 1118 	mls	r1, r9, r8, r1
 8000394:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000398:	fb08 f00e 	mul.w	r0, r8, lr
 800039c:	4288      	cmp	r0, r1
 800039e:	fa02 f206 	lsl.w	r2, r2, r6
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b8>
 80003a4:	eb1c 0101 	adds.w	r1, ip, r1
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2bc>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2bc>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4461      	add	r1, ip
 80003bc:	1a09      	subs	r1, r1, r0
 80003be:	b2a4      	uxth	r4, r4
 80003c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c4:	fb09 1110 	mls	r1, r9, r0, r1
 80003c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d0:	458e      	cmp	lr, r1
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1e2>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2b4>
 80003de:	458e      	cmp	lr, r1
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2b4>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4461      	add	r1, ip
 80003e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ea:	fba0 9402 	umull	r9, r4, r0, r2
 80003ee:	eba1 010e 	sub.w	r1, r1, lr
 80003f2:	42a1      	cmp	r1, r4
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46a6      	mov	lr, r4
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x2a4>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x2a0>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x212>
 80003fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000402:	eb61 010e 	sbc.w	r1, r1, lr
 8000406:	fa01 f707 	lsl.w	r7, r1, r7
 800040a:	fa22 f306 	lsr.w	r3, r2, r6
 800040e:	40f1      	lsrs	r1, r6
 8000410:	431f      	orrs	r7, r3
 8000412:	e9c5 7100 	strd	r7, r1, [r5]
 8000416:	2600      	movs	r6, #0
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1c2 0320 	rsb	r3, r2, #32
 8000422:	40d8      	lsrs	r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa21 f303 	lsr.w	r3, r1, r3
 800042c:	4091      	lsls	r1, r2
 800042e:	4301      	orrs	r1, r0
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb3 f0f7 	udiv	r0, r3, r7
 800043c:	fb07 3610 	mls	r6, r7, r0, r3
 8000440:	0c0b      	lsrs	r3, r1, #16
 8000442:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000446:	fb00 f60e 	mul.w	r6, r0, lr
 800044a:	429e      	cmp	r6, r3
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x260>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b8>
 800045c:	429e      	cmp	r6, r3
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b8>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	b289      	uxth	r1, r1
 8000468:	fbb3 f6f7 	udiv	r6, r3, r7
 800046c:	fb07 3316 	mls	r3, r7, r6, r3
 8000470:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000474:	fb06 f30e 	mul.w	r3, r6, lr
 8000478:	428b      	cmp	r3, r1
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x28a>
 800047c:	eb1c 0101 	adds.w	r1, ip, r1
 8000480:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000486:	428b      	cmp	r3, r1
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 800048a:	3e02      	subs	r6, #2
 800048c:	4461      	add	r1, ip
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0x104>
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e705      	b.n	80002a8 <__udivmoddi4+0xa4>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e3      	b.n	8000268 <__udivmoddi4+0x64>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6f8      	b.n	8000296 <__udivmoddi4+0x92>
 80004a4:	454b      	cmp	r3, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f8>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f8>
 80004b4:	4646      	mov	r6, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x28a>
 80004b8:	4620      	mov	r0, r4
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1e2>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x260>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b8>
 80004c4:	3b02      	subs	r3, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x12c>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e709      	b.n	80002e2 <__udivmoddi4+0xde>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x156>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004dc:	f000 fa42 	bl	8000964 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e0:	f000 f80a 	bl	80004f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e4:	f000 f8c2 	bl	800066c <MX_GPIO_Init>
  MX_DMA_Init();
 80004e8:	f000 f8a0 	bl	800062c <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 80004ec:	f006 fef6 	bl	80072dc <MX_USB_DEVICE_Init>
  MX_I2S2_Init();
 80004f0:	f000 f86e 	bl	80005d0 <MX_I2S2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004f4:	e7fe      	b.n	80004f4 <main+0x1c>
	...

080004f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b094      	sub	sp, #80	; 0x50
 80004fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004fe:	f107 0320 	add.w	r3, r7, #32
 8000502:	2230      	movs	r2, #48	; 0x30
 8000504:	2100      	movs	r1, #0
 8000506:	4618      	mov	r0, r3
 8000508:	f007 fbda 	bl	8007cc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800050c:	f107 030c 	add.w	r3, r7, #12
 8000510:	2200      	movs	r2, #0
 8000512:	601a      	str	r2, [r3, #0]
 8000514:	605a      	str	r2, [r3, #4]
 8000516:	609a      	str	r2, [r3, #8]
 8000518:	60da      	str	r2, [r3, #12]
 800051a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800051c:	2300      	movs	r3, #0
 800051e:	60bb      	str	r3, [r7, #8]
 8000520:	4b29      	ldr	r3, [pc, #164]	; (80005c8 <SystemClock_Config+0xd0>)
 8000522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000524:	4a28      	ldr	r2, [pc, #160]	; (80005c8 <SystemClock_Config+0xd0>)
 8000526:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800052a:	6413      	str	r3, [r2, #64]	; 0x40
 800052c:	4b26      	ldr	r3, [pc, #152]	; (80005c8 <SystemClock_Config+0xd0>)
 800052e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000530:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000534:	60bb      	str	r3, [r7, #8]
 8000536:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000538:	2300      	movs	r3, #0
 800053a:	607b      	str	r3, [r7, #4]
 800053c:	4b23      	ldr	r3, [pc, #140]	; (80005cc <SystemClock_Config+0xd4>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000544:	4a21      	ldr	r2, [pc, #132]	; (80005cc <SystemClock_Config+0xd4>)
 8000546:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800054a:	6013      	str	r3, [r2, #0]
 800054c:	4b1f      	ldr	r3, [pc, #124]	; (80005cc <SystemClock_Config+0xd4>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000554:	607b      	str	r3, [r7, #4]
 8000556:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000558:	2301      	movs	r3, #1
 800055a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800055c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000560:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000562:	2302      	movs	r3, #2
 8000564:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000566:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800056a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800056c:	2319      	movs	r3, #25
 800056e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000570:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000574:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000576:	2304      	movs	r3, #4
 8000578:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800057a:	2307      	movs	r3, #7
 800057c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800057e:	f107 0320 	add.w	r3, r7, #32
 8000582:	4618      	mov	r0, r3
 8000584:	f002 ffe0 	bl	8003548 <HAL_RCC_OscConfig>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800058e:	f000 f8a3 	bl	80006d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000592:	230f      	movs	r3, #15
 8000594:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000596:	2302      	movs	r3, #2
 8000598:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800059a:	2300      	movs	r3, #0
 800059c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800059e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a4:	2300      	movs	r3, #0
 80005a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005a8:	f107 030c 	add.w	r3, r7, #12
 80005ac:	2102      	movs	r1, #2
 80005ae:	4618      	mov	r0, r3
 80005b0:	f003 fa42 	bl	8003a38 <HAL_RCC_ClockConfig>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80005ba:	f000 f88d 	bl	80006d8 <Error_Handler>
  }
}
 80005be:	bf00      	nop
 80005c0:	3750      	adds	r7, #80	; 0x50
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	40023800 	.word	0x40023800
 80005cc:	40007000 	.word	0x40007000

080005d0 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80005d4:	4b13      	ldr	r3, [pc, #76]	; (8000624 <MX_I2S2_Init+0x54>)
 80005d6:	4a14      	ldr	r2, [pc, #80]	; (8000628 <MX_I2S2_Init+0x58>)
 80005d8:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80005da:	4b12      	ldr	r3, [pc, #72]	; (8000624 <MX_I2S2_Init+0x54>)
 80005dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005e0:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80005e2:	4b10      	ldr	r3, [pc, #64]	; (8000624 <MX_I2S2_Init+0x54>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 80005e8:	4b0e      	ldr	r3, [pc, #56]	; (8000624 <MX_I2S2_Init+0x54>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80005ee:	4b0d      	ldr	r3, [pc, #52]	; (8000624 <MX_I2S2_Init+0x54>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 80005f4:	4b0b      	ldr	r3, [pc, #44]	; (8000624 <MX_I2S2_Init+0x54>)
 80005f6:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80005fa:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80005fc:	4b09      	ldr	r3, [pc, #36]	; (8000624 <MX_I2S2_Init+0x54>)
 80005fe:	2200      	movs	r2, #0
 8000600:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000602:	4b08      	ldr	r3, [pc, #32]	; (8000624 <MX_I2S2_Init+0x54>)
 8000604:	2200      	movs	r2, #0
 8000606:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000608:	4b06      	ldr	r3, [pc, #24]	; (8000624 <MX_I2S2_Init+0x54>)
 800060a:	2200      	movs	r2, #0
 800060c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800060e:	4805      	ldr	r0, [pc, #20]	; (8000624 <MX_I2S2_Init+0x54>)
 8000610:	f001 f844 	bl	800169c <HAL_I2S_Init>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 800061a:	f000 f85d 	bl	80006d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 800061e:	bf00      	nop
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	20000164 	.word	0x20000164
 8000628:	40003800 	.word	0x40003800

0800062c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000632:	2300      	movs	r3, #0
 8000634:	607b      	str	r3, [r7, #4]
 8000636:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <MX_DMA_Init+0x3c>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	4a0b      	ldr	r2, [pc, #44]	; (8000668 <MX_DMA_Init+0x3c>)
 800063c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000640:	6313      	str	r3, [r2, #48]	; 0x30
 8000642:	4b09      	ldr	r3, [pc, #36]	; (8000668 <MX_DMA_Init+0x3c>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000646:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800064e:	2200      	movs	r2, #0
 8000650:	2100      	movs	r1, #0
 8000652:	200f      	movs	r0, #15
 8000654:	f000 faf7 	bl	8000c46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000658:	200f      	movs	r0, #15
 800065a:	f000 fb10 	bl	8000c7e <HAL_NVIC_EnableIRQ>

}
 800065e:	bf00      	nop
 8000660:	3708      	adds	r7, #8
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	40023800 	.word	0x40023800

0800066c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800066c:	b480      	push	{r7}
 800066e:	b085      	sub	sp, #20
 8000670:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000672:	2300      	movs	r3, #0
 8000674:	60fb      	str	r3, [r7, #12]
 8000676:	4b17      	ldr	r3, [pc, #92]	; (80006d4 <MX_GPIO_Init+0x68>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	4a16      	ldr	r2, [pc, #88]	; (80006d4 <MX_GPIO_Init+0x68>)
 800067c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000680:	6313      	str	r3, [r2, #48]	; 0x30
 8000682:	4b14      	ldr	r3, [pc, #80]	; (80006d4 <MX_GPIO_Init+0x68>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800068a:	60fb      	str	r3, [r7, #12]
 800068c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800068e:	2300      	movs	r3, #0
 8000690:	60bb      	str	r3, [r7, #8]
 8000692:	4b10      	ldr	r3, [pc, #64]	; (80006d4 <MX_GPIO_Init+0x68>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	4a0f      	ldr	r2, [pc, #60]	; (80006d4 <MX_GPIO_Init+0x68>)
 8000698:	f043 0302 	orr.w	r3, r3, #2
 800069c:	6313      	str	r3, [r2, #48]	; 0x30
 800069e:	4b0d      	ldr	r3, [pc, #52]	; (80006d4 <MX_GPIO_Init+0x68>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	f003 0302 	and.w	r3, r3, #2
 80006a6:	60bb      	str	r3, [r7, #8]
 80006a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006aa:	2300      	movs	r3, #0
 80006ac:	607b      	str	r3, [r7, #4]
 80006ae:	4b09      	ldr	r3, [pc, #36]	; (80006d4 <MX_GPIO_Init+0x68>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	4a08      	ldr	r2, [pc, #32]	; (80006d4 <MX_GPIO_Init+0x68>)
 80006b4:	f043 0301 	orr.w	r3, r3, #1
 80006b8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ba:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <MX_GPIO_Init+0x68>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	f003 0301 	and.w	r3, r3, #1
 80006c2:	607b      	str	r3, [r7, #4]
 80006c4:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006c6:	bf00      	nop
 80006c8:	3714      	adds	r7, #20
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	40023800 	.word	0x40023800

080006d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006dc:	b672      	cpsid	i
}
 80006de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006e0:	e7fe      	b.n	80006e0 <Error_Handler+0x8>
	...

080006e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b083      	sub	sp, #12
 80006e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ea:	2300      	movs	r3, #0
 80006ec:	607b      	str	r3, [r7, #4]
 80006ee:	4b10      	ldr	r3, [pc, #64]	; (8000730 <HAL_MspInit+0x4c>)
 80006f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006f2:	4a0f      	ldr	r2, [pc, #60]	; (8000730 <HAL_MspInit+0x4c>)
 80006f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006f8:	6453      	str	r3, [r2, #68]	; 0x44
 80006fa:	4b0d      	ldr	r3, [pc, #52]	; (8000730 <HAL_MspInit+0x4c>)
 80006fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000702:	607b      	str	r3, [r7, #4]
 8000704:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000706:	2300      	movs	r3, #0
 8000708:	603b      	str	r3, [r7, #0]
 800070a:	4b09      	ldr	r3, [pc, #36]	; (8000730 <HAL_MspInit+0x4c>)
 800070c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800070e:	4a08      	ldr	r2, [pc, #32]	; (8000730 <HAL_MspInit+0x4c>)
 8000710:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000714:	6413      	str	r3, [r2, #64]	; 0x40
 8000716:	4b06      	ldr	r3, [pc, #24]	; (8000730 <HAL_MspInit+0x4c>)
 8000718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800071a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800071e:	603b      	str	r3, [r7, #0]
 8000720:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000722:	bf00      	nop
 8000724:	370c      	adds	r7, #12
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop
 8000730:	40023800 	.word	0x40023800

08000734 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b08e      	sub	sp, #56	; 0x38
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000740:	2200      	movs	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
 8000744:	605a      	str	r2, [r3, #4]
 8000746:	609a      	str	r2, [r3, #8]
 8000748:	60da      	str	r2, [r3, #12]
 800074a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800074c:	f107 0310 	add.w	r3, r7, #16
 8000750:	2200      	movs	r2, #0
 8000752:	601a      	str	r2, [r3, #0]
 8000754:	605a      	str	r2, [r3, #4]
 8000756:	609a      	str	r2, [r3, #8]
 8000758:	60da      	str	r2, [r3, #12]
 800075a:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4a3e      	ldr	r2, [pc, #248]	; (800085c <HAL_I2S_MspInit+0x128>)
 8000762:	4293      	cmp	r3, r2
 8000764:	d175      	bne.n	8000852 <HAL_I2S_MspInit+0x11e>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000766:	2301      	movs	r3, #1
 8000768:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800076a:	23c0      	movs	r3, #192	; 0xc0
 800076c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 5;
 800076e:	2305      	movs	r3, #5
 8000770:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000772:	f107 0310 	add.w	r3, r7, #16
 8000776:	4618      	mov	r0, r3
 8000778:	f003 fb16 	bl	8003da8 <HAL_RCCEx_PeriphCLKConfig>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8000782:	f7ff ffa9 	bl	80006d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	60fb      	str	r3, [r7, #12]
 800078a:	4b35      	ldr	r3, [pc, #212]	; (8000860 <HAL_I2S_MspInit+0x12c>)
 800078c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800078e:	4a34      	ldr	r2, [pc, #208]	; (8000860 <HAL_I2S_MspInit+0x12c>)
 8000790:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000794:	6413      	str	r3, [r2, #64]	; 0x40
 8000796:	4b32      	ldr	r3, [pc, #200]	; (8000860 <HAL_I2S_MspInit+0x12c>)
 8000798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800079a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800079e:	60fb      	str	r3, [r7, #12]
 80007a0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	60bb      	str	r3, [r7, #8]
 80007a6:	4b2e      	ldr	r3, [pc, #184]	; (8000860 <HAL_I2S_MspInit+0x12c>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4a2d      	ldr	r2, [pc, #180]	; (8000860 <HAL_I2S_MspInit+0x12c>)
 80007ac:	f043 0302 	orr.w	r3, r3, #2
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4b2b      	ldr	r3, [pc, #172]	; (8000860 <HAL_I2S_MspInit+0x12c>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f003 0302 	and.w	r3, r3, #2
 80007ba:	60bb      	str	r3, [r7, #8]
 80007bc:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_15;
 80007be:	f44f 4314 	mov.w	r3, #37888	; 0x9400
 80007c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c4:	2302      	movs	r3, #2
 80007c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c8:	2300      	movs	r3, #0
 80007ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007cc:	2300      	movs	r3, #0
 80007ce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80007d0:	2305      	movs	r3, #5
 80007d2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007d8:	4619      	mov	r1, r3
 80007da:	4822      	ldr	r0, [pc, #136]	; (8000864 <HAL_I2S_MspInit+0x130>)
 80007dc:	f000 fdda 	bl	8001394 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 80007e0:	4b21      	ldr	r3, [pc, #132]	; (8000868 <HAL_I2S_MspInit+0x134>)
 80007e2:	4a22      	ldr	r2, [pc, #136]	; (800086c <HAL_I2S_MspInit+0x138>)
 80007e4:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80007e6:	4b20      	ldr	r3, [pc, #128]	; (8000868 <HAL_I2S_MspInit+0x134>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80007ec:	4b1e      	ldr	r3, [pc, #120]	; (8000868 <HAL_I2S_MspInit+0x134>)
 80007ee:	2240      	movs	r2, #64	; 0x40
 80007f0:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80007f2:	4b1d      	ldr	r3, [pc, #116]	; (8000868 <HAL_I2S_MspInit+0x134>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80007f8:	4b1b      	ldr	r3, [pc, #108]	; (8000868 <HAL_I2S_MspInit+0x134>)
 80007fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007fe:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000800:	4b19      	ldr	r3, [pc, #100]	; (8000868 <HAL_I2S_MspInit+0x134>)
 8000802:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000806:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000808:	4b17      	ldr	r3, [pc, #92]	; (8000868 <HAL_I2S_MspInit+0x134>)
 800080a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800080e:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8000810:	4b15      	ldr	r3, [pc, #84]	; (8000868 <HAL_I2S_MspInit+0x134>)
 8000812:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000816:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000818:	4b13      	ldr	r3, [pc, #76]	; (8000868 <HAL_I2S_MspInit+0x134>)
 800081a:	2200      	movs	r2, #0
 800081c:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800081e:	4b12      	ldr	r3, [pc, #72]	; (8000868 <HAL_I2S_MspInit+0x134>)
 8000820:	2204      	movs	r2, #4
 8000822:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000824:	4b10      	ldr	r3, [pc, #64]	; (8000868 <HAL_I2S_MspInit+0x134>)
 8000826:	2203      	movs	r2, #3
 8000828:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi2_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 800082a:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <HAL_I2S_MspInit+0x134>)
 800082c:	2200      	movs	r2, #0
 800082e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi2_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000830:	4b0d      	ldr	r3, [pc, #52]	; (8000868 <HAL_I2S_MspInit+0x134>)
 8000832:	2200      	movs	r2, #0
 8000834:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000836:	480c      	ldr	r0, [pc, #48]	; (8000868 <HAL_I2S_MspInit+0x134>)
 8000838:	f000 fa3c 	bl	8000cb4 <HAL_DMA_Init>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <HAL_I2S_MspInit+0x112>
    {
      Error_Handler();
 8000842:	f7ff ff49 	bl	80006d8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	4a07      	ldr	r2, [pc, #28]	; (8000868 <HAL_I2S_MspInit+0x134>)
 800084a:	639a      	str	r2, [r3, #56]	; 0x38
 800084c:	4a06      	ldr	r2, [pc, #24]	; (8000868 <HAL_I2S_MspInit+0x134>)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000852:	bf00      	nop
 8000854:	3738      	adds	r7, #56	; 0x38
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	40003800 	.word	0x40003800
 8000860:	40023800 	.word	0x40023800
 8000864:	40020400 	.word	0x40020400
 8000868:	200001ac 	.word	0x200001ac
 800086c:	40026070 	.word	0x40026070

08000870 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000874:	e7fe      	b.n	8000874 <NMI_Handler+0x4>

08000876 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000876:	b480      	push	{r7}
 8000878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800087a:	e7fe      	b.n	800087a <HardFault_Handler+0x4>

0800087c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000880:	e7fe      	b.n	8000880 <MemManage_Handler+0x4>

08000882 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000882:	b480      	push	{r7}
 8000884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000886:	e7fe      	b.n	8000886 <BusFault_Handler+0x4>

08000888 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800088c:	e7fe      	b.n	800088c <UsageFault_Handler+0x4>

0800088e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800088e:	b480      	push	{r7}
 8000890:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000892:	bf00      	nop
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr

0800089c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008a0:	bf00      	nop
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr

080008aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008aa:	b480      	push	{r7}
 80008ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008ae:	bf00      	nop
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr

080008b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008bc:	f000 f8a4 	bl	8000a08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008c0:	bf00      	nop
 80008c2:	bd80      	pop	{r7, pc}

080008c4 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80008c8:	4802      	ldr	r0, [pc, #8]	; (80008d4 <DMA1_Stream4_IRQHandler+0x10>)
 80008ca:	f000 faf9 	bl	8000ec0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80008ce:	bf00      	nop
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	200001ac 	.word	0x200001ac

080008d8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80008dc:	4802      	ldr	r0, [pc, #8]	; (80008e8 <OTG_FS_IRQHandler+0x10>)
 80008de:	f001 fdd3 	bl	8002488 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	20000af4 	.word	0x20000af4

080008ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008f0:	4b06      	ldr	r3, [pc, #24]	; (800090c <SystemInit+0x20>)
 80008f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008f6:	4a05      	ldr	r2, [pc, #20]	; (800090c <SystemInit+0x20>)
 80008f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000900:	bf00      	nop
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	e000ed00 	.word	0xe000ed00

08000910 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000910:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000948 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000914:	480d      	ldr	r0, [pc, #52]	; (800094c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000916:	490e      	ldr	r1, [pc, #56]	; (8000950 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000918:	4a0e      	ldr	r2, [pc, #56]	; (8000954 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800091a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800091c:	e002      	b.n	8000924 <LoopCopyDataInit>

0800091e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800091e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000920:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000922:	3304      	adds	r3, #4

08000924 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000924:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000926:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000928:	d3f9      	bcc.n	800091e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800092a:	4a0b      	ldr	r2, [pc, #44]	; (8000958 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800092c:	4c0b      	ldr	r4, [pc, #44]	; (800095c <LoopFillZerobss+0x26>)
  movs r3, #0
 800092e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000930:	e001      	b.n	8000936 <LoopFillZerobss>

08000932 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000932:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000934:	3204      	adds	r2, #4

08000936 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000936:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000938:	d3fb      	bcc.n	8000932 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800093a:	f7ff ffd7 	bl	80008ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800093e:	f007 f99b 	bl	8007c78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000942:	f7ff fdc9 	bl	80004d8 <main>
  bx  lr    
 8000946:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000948:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800094c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000950:	20000148 	.word	0x20000148
  ldr r2, =_sidata
 8000954:	08007d58 	.word	0x08007d58
  ldr r2, =_sbss
 8000958:	20000148 	.word	0x20000148
  ldr r4, =_ebss
 800095c:	20001550 	.word	0x20001550

08000960 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000960:	e7fe      	b.n	8000960 <ADC_IRQHandler>
	...

08000964 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000968:	4b0e      	ldr	r3, [pc, #56]	; (80009a4 <HAL_Init+0x40>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a0d      	ldr	r2, [pc, #52]	; (80009a4 <HAL_Init+0x40>)
 800096e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000972:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000974:	4b0b      	ldr	r3, [pc, #44]	; (80009a4 <HAL_Init+0x40>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a0a      	ldr	r2, [pc, #40]	; (80009a4 <HAL_Init+0x40>)
 800097a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800097e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000980:	4b08      	ldr	r3, [pc, #32]	; (80009a4 <HAL_Init+0x40>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a07      	ldr	r2, [pc, #28]	; (80009a4 <HAL_Init+0x40>)
 8000986:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800098a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800098c:	2003      	movs	r0, #3
 800098e:	f000 f94f 	bl	8000c30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000992:	200f      	movs	r0, #15
 8000994:	f000 f808 	bl	80009a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000998:	f7ff fea4 	bl	80006e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800099c:	2300      	movs	r3, #0
}
 800099e:	4618      	mov	r0, r3
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40023c00 	.word	0x40023c00

080009a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009b0:	4b12      	ldr	r3, [pc, #72]	; (80009fc <HAL_InitTick+0x54>)
 80009b2:	681a      	ldr	r2, [r3, #0]
 80009b4:	4b12      	ldr	r3, [pc, #72]	; (8000a00 <HAL_InitTick+0x58>)
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	4619      	mov	r1, r3
 80009ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009be:	fbb3 f3f1 	udiv	r3, r3, r1
 80009c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80009c6:	4618      	mov	r0, r3
 80009c8:	f000 f967 	bl	8000c9a <HAL_SYSTICK_Config>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009d2:	2301      	movs	r3, #1
 80009d4:	e00e      	b.n	80009f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	2b0f      	cmp	r3, #15
 80009da:	d80a      	bhi.n	80009f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009dc:	2200      	movs	r2, #0
 80009de:	6879      	ldr	r1, [r7, #4]
 80009e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009e4:	f000 f92f 	bl	8000c46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009e8:	4a06      	ldr	r2, [pc, #24]	; (8000a04 <HAL_InitTick+0x5c>)
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009ee:	2300      	movs	r3, #0
 80009f0:	e000      	b.n	80009f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009f2:	2301      	movs	r3, #1
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	3708      	adds	r7, #8
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	20000000 	.word	0x20000000
 8000a00:	20000008 	.word	0x20000008
 8000a04:	20000004 	.word	0x20000004

08000a08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a0c:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <HAL_IncTick+0x20>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	461a      	mov	r2, r3
 8000a12:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <HAL_IncTick+0x24>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	4413      	add	r3, r2
 8000a18:	4a04      	ldr	r2, [pc, #16]	; (8000a2c <HAL_IncTick+0x24>)
 8000a1a:	6013      	str	r3, [r2, #0]
}
 8000a1c:	bf00      	nop
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	20000008 	.word	0x20000008
 8000a2c:	2000020c 	.word	0x2000020c

08000a30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  return uwTick;
 8000a34:	4b03      	ldr	r3, [pc, #12]	; (8000a44 <HAL_GetTick+0x14>)
 8000a36:	681b      	ldr	r3, [r3, #0]
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	2000020c 	.word	0x2000020c

08000a48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b084      	sub	sp, #16
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a50:	f7ff ffee 	bl	8000a30 <HAL_GetTick>
 8000a54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000a60:	d005      	beq.n	8000a6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a62:	4b0a      	ldr	r3, [pc, #40]	; (8000a8c <HAL_Delay+0x44>)
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	461a      	mov	r2, r3
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	4413      	add	r3, r2
 8000a6c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a6e:	bf00      	nop
 8000a70:	f7ff ffde 	bl	8000a30 <HAL_GetTick>
 8000a74:	4602      	mov	r2, r0
 8000a76:	68bb      	ldr	r3, [r7, #8]
 8000a78:	1ad3      	subs	r3, r2, r3
 8000a7a:	68fa      	ldr	r2, [r7, #12]
 8000a7c:	429a      	cmp	r2, r3
 8000a7e:	d8f7      	bhi.n	8000a70 <HAL_Delay+0x28>
  {
  }
}
 8000a80:	bf00      	nop
 8000a82:	bf00      	nop
 8000a84:	3710      	adds	r7, #16
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	20000008 	.word	0x20000008

08000a90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b085      	sub	sp, #20
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	f003 0307 	and.w	r3, r3, #7
 8000a9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000aa0:	4b0c      	ldr	r3, [pc, #48]	; (8000ad4 <__NVIC_SetPriorityGrouping+0x44>)
 8000aa2:	68db      	ldr	r3, [r3, #12]
 8000aa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aa6:	68ba      	ldr	r2, [r7, #8]
 8000aa8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000aac:	4013      	ands	r3, r2
 8000aae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ab8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000abc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ac0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ac2:	4a04      	ldr	r2, [pc, #16]	; (8000ad4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ac4:	68bb      	ldr	r3, [r7, #8]
 8000ac6:	60d3      	str	r3, [r2, #12]
}
 8000ac8:	bf00      	nop
 8000aca:	3714      	adds	r7, #20
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr
 8000ad4:	e000ed00 	.word	0xe000ed00

08000ad8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000adc:	4b04      	ldr	r3, [pc, #16]	; (8000af0 <__NVIC_GetPriorityGrouping+0x18>)
 8000ade:	68db      	ldr	r3, [r3, #12]
 8000ae0:	0a1b      	lsrs	r3, r3, #8
 8000ae2:	f003 0307 	and.w	r3, r3, #7
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr
 8000af0:	e000ed00 	.word	0xe000ed00

08000af4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	4603      	mov	r3, r0
 8000afc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	db0b      	blt.n	8000b1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b06:	79fb      	ldrb	r3, [r7, #7]
 8000b08:	f003 021f 	and.w	r2, r3, #31
 8000b0c:	4907      	ldr	r1, [pc, #28]	; (8000b2c <__NVIC_EnableIRQ+0x38>)
 8000b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b12:	095b      	lsrs	r3, r3, #5
 8000b14:	2001      	movs	r0, #1
 8000b16:	fa00 f202 	lsl.w	r2, r0, r2
 8000b1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b1e:	bf00      	nop
 8000b20:	370c      	adds	r7, #12
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	e000e100 	.word	0xe000e100

08000b30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	4603      	mov	r3, r0
 8000b38:	6039      	str	r1, [r7, #0]
 8000b3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	db0a      	blt.n	8000b5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	b2da      	uxtb	r2, r3
 8000b48:	490c      	ldr	r1, [pc, #48]	; (8000b7c <__NVIC_SetPriority+0x4c>)
 8000b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4e:	0112      	lsls	r2, r2, #4
 8000b50:	b2d2      	uxtb	r2, r2
 8000b52:	440b      	add	r3, r1
 8000b54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b58:	e00a      	b.n	8000b70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	b2da      	uxtb	r2, r3
 8000b5e:	4908      	ldr	r1, [pc, #32]	; (8000b80 <__NVIC_SetPriority+0x50>)
 8000b60:	79fb      	ldrb	r3, [r7, #7]
 8000b62:	f003 030f 	and.w	r3, r3, #15
 8000b66:	3b04      	subs	r3, #4
 8000b68:	0112      	lsls	r2, r2, #4
 8000b6a:	b2d2      	uxtb	r2, r2
 8000b6c:	440b      	add	r3, r1
 8000b6e:	761a      	strb	r2, [r3, #24]
}
 8000b70:	bf00      	nop
 8000b72:	370c      	adds	r7, #12
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr
 8000b7c:	e000e100 	.word	0xe000e100
 8000b80:	e000ed00 	.word	0xe000ed00

08000b84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b089      	sub	sp, #36	; 0x24
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	60f8      	str	r0, [r7, #12]
 8000b8c:	60b9      	str	r1, [r7, #8]
 8000b8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	f003 0307 	and.w	r3, r3, #7
 8000b96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b98:	69fb      	ldr	r3, [r7, #28]
 8000b9a:	f1c3 0307 	rsb	r3, r3, #7
 8000b9e:	2b04      	cmp	r3, #4
 8000ba0:	bf28      	it	cs
 8000ba2:	2304      	movcs	r3, #4
 8000ba4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ba6:	69fb      	ldr	r3, [r7, #28]
 8000ba8:	3304      	adds	r3, #4
 8000baa:	2b06      	cmp	r3, #6
 8000bac:	d902      	bls.n	8000bb4 <NVIC_EncodePriority+0x30>
 8000bae:	69fb      	ldr	r3, [r7, #28]
 8000bb0:	3b03      	subs	r3, #3
 8000bb2:	e000      	b.n	8000bb6 <NVIC_EncodePriority+0x32>
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bb8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000bbc:	69bb      	ldr	r3, [r7, #24]
 8000bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc2:	43da      	mvns	r2, r3
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	401a      	ands	r2, r3
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bcc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8000bd6:	43d9      	mvns	r1, r3
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bdc:	4313      	orrs	r3, r2
         );
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	3724      	adds	r7, #36	; 0x24
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
	...

08000bec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	3b01      	subs	r3, #1
 8000bf8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bfc:	d301      	bcc.n	8000c02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bfe:	2301      	movs	r3, #1
 8000c00:	e00f      	b.n	8000c22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c02:	4a0a      	ldr	r2, [pc, #40]	; (8000c2c <SysTick_Config+0x40>)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	3b01      	subs	r3, #1
 8000c08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c0a:	210f      	movs	r1, #15
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c10:	f7ff ff8e 	bl	8000b30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c14:	4b05      	ldr	r3, [pc, #20]	; (8000c2c <SysTick_Config+0x40>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c1a:	4b04      	ldr	r3, [pc, #16]	; (8000c2c <SysTick_Config+0x40>)
 8000c1c:	2207      	movs	r2, #7
 8000c1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c20:	2300      	movs	r3, #0
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	e000e010 	.word	0xe000e010

08000c30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c38:	6878      	ldr	r0, [r7, #4]
 8000c3a:	f7ff ff29 	bl	8000a90 <__NVIC_SetPriorityGrouping>
}
 8000c3e:	bf00      	nop
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}

08000c46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c46:	b580      	push	{r7, lr}
 8000c48:	b086      	sub	sp, #24
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	60b9      	str	r1, [r7, #8]
 8000c50:	607a      	str	r2, [r7, #4]
 8000c52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c54:	2300      	movs	r3, #0
 8000c56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c58:	f7ff ff3e 	bl	8000ad8 <__NVIC_GetPriorityGrouping>
 8000c5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c5e:	687a      	ldr	r2, [r7, #4]
 8000c60:	68b9      	ldr	r1, [r7, #8]
 8000c62:	6978      	ldr	r0, [r7, #20]
 8000c64:	f7ff ff8e 	bl	8000b84 <NVIC_EncodePriority>
 8000c68:	4602      	mov	r2, r0
 8000c6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c6e:	4611      	mov	r1, r2
 8000c70:	4618      	mov	r0, r3
 8000c72:	f7ff ff5d 	bl	8000b30 <__NVIC_SetPriority>
}
 8000c76:	bf00      	nop
 8000c78:	3718      	adds	r7, #24
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}

08000c7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	b082      	sub	sp, #8
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	4603      	mov	r3, r0
 8000c86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f7ff ff31 	bl	8000af4 <__NVIC_EnableIRQ>
}
 8000c92:	bf00      	nop
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}

08000c9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	b082      	sub	sp, #8
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ca2:	6878      	ldr	r0, [r7, #4]
 8000ca4:	f7ff ffa2 	bl	8000bec <SysTick_Config>
 8000ca8:	4603      	mov	r3, r0
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
	...

08000cb4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b086      	sub	sp, #24
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000cc0:	f7ff feb6 	bl	8000a30 <HAL_GetTick>
 8000cc4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d101      	bne.n	8000cd0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	e099      	b.n	8000e04 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2202      	movs	r2, #2
 8000cdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	681a      	ldr	r2, [r3, #0]
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f022 0201 	bic.w	r2, r2, #1
 8000cee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000cf0:	e00f      	b.n	8000d12 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000cf2:	f7ff fe9d 	bl	8000a30 <HAL_GetTick>
 8000cf6:	4602      	mov	r2, r0
 8000cf8:	693b      	ldr	r3, [r7, #16]
 8000cfa:	1ad3      	subs	r3, r2, r3
 8000cfc:	2b05      	cmp	r3, #5
 8000cfe:	d908      	bls.n	8000d12 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	2220      	movs	r2, #32
 8000d04:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	2203      	movs	r2, #3
 8000d0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000d0e:	2303      	movs	r3, #3
 8000d10:	e078      	b.n	8000e04 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f003 0301 	and.w	r3, r3, #1
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d1e8      	bne.n	8000cf2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000d28:	697a      	ldr	r2, [r7, #20]
 8000d2a:	4b38      	ldr	r3, [pc, #224]	; (8000e0c <HAL_DMA_Init+0x158>)
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	685a      	ldr	r2, [r3, #4]
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	689b      	ldr	r3, [r3, #8]
 8000d38:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000d3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	691b      	ldr	r3, [r3, #16]
 8000d44:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	699b      	ldr	r3, [r3, #24]
 8000d50:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d56:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	6a1b      	ldr	r3, [r3, #32]
 8000d5c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000d5e:	697a      	ldr	r2, [r7, #20]
 8000d60:	4313      	orrs	r3, r2
 8000d62:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d68:	2b04      	cmp	r3, #4
 8000d6a:	d107      	bne.n	8000d7c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d74:	4313      	orrs	r3, r2
 8000d76:	697a      	ldr	r2, [r7, #20]
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	697a      	ldr	r2, [r7, #20]
 8000d82:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	695b      	ldr	r3, [r3, #20]
 8000d8a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	f023 0307 	bic.w	r3, r3, #7
 8000d92:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d98:	697a      	ldr	r2, [r7, #20]
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000da2:	2b04      	cmp	r3, #4
 8000da4:	d117      	bne.n	8000dd6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000daa:	697a      	ldr	r2, [r7, #20]
 8000dac:	4313      	orrs	r3, r2
 8000dae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d00e      	beq.n	8000dd6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000db8:	6878      	ldr	r0, [r7, #4]
 8000dba:	f000 fa6f 	bl	800129c <DMA_CheckFifoParam>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d008      	beq.n	8000dd6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2240      	movs	r2, #64	; 0x40
 8000dc8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2201      	movs	r2, #1
 8000dce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e016      	b.n	8000e04 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	697a      	ldr	r2, [r7, #20]
 8000ddc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000dde:	6878      	ldr	r0, [r7, #4]
 8000de0:	f000 fa26 	bl	8001230 <DMA_CalcBaseAndBitshift>
 8000de4:	4603      	mov	r3, r0
 8000de6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000dec:	223f      	movs	r2, #63	; 0x3f
 8000dee:	409a      	lsls	r2, r3
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	2200      	movs	r2, #0
 8000df8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000e02:	2300      	movs	r3, #0
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	3718      	adds	r7, #24
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	f010803f 	.word	0xf010803f

08000e10 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b086      	sub	sp, #24
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	60f8      	str	r0, [r7, #12]
 8000e18:	60b9      	str	r1, [r7, #8]
 8000e1a:	607a      	str	r2, [r7, #4]
 8000e1c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e26:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000e2e:	2b01      	cmp	r3, #1
 8000e30:	d101      	bne.n	8000e36 <HAL_DMA_Start_IT+0x26>
 8000e32:	2302      	movs	r3, #2
 8000e34:	e040      	b.n	8000eb8 <HAL_DMA_Start_IT+0xa8>
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	2201      	movs	r2, #1
 8000e3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	2b01      	cmp	r3, #1
 8000e48:	d12f      	bne.n	8000eaa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	2202      	movs	r2, #2
 8000e4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	2200      	movs	r2, #0
 8000e56:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	687a      	ldr	r2, [r7, #4]
 8000e5c:	68b9      	ldr	r1, [r7, #8]
 8000e5e:	68f8      	ldr	r0, [r7, #12]
 8000e60:	f000 f9b8 	bl	80011d4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e68:	223f      	movs	r2, #63	; 0x3f
 8000e6a:	409a      	lsls	r2, r3
 8000e6c:	693b      	ldr	r3, [r7, #16]
 8000e6e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f042 0216 	orr.w	r2, r2, #22
 8000e7e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d007      	beq.n	8000e98 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f042 0208 	orr.w	r2, r2, #8
 8000e96:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	681a      	ldr	r2, [r3, #0]
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f042 0201 	orr.w	r2, r2, #1
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	e005      	b.n	8000eb6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	2200      	movs	r2, #0
 8000eae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8000eb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3718      	adds	r7, #24
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b086      	sub	sp, #24
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000ecc:	4b8e      	ldr	r3, [pc, #568]	; (8001108 <HAL_DMA_IRQHandler+0x248>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a8e      	ldr	r2, [pc, #568]	; (800110c <HAL_DMA_IRQHandler+0x24c>)
 8000ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ed6:	0a9b      	lsrs	r3, r3, #10
 8000ed8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ede:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8000ee0:	693b      	ldr	r3, [r7, #16]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000eea:	2208      	movs	r2, #8
 8000eec:	409a      	lsls	r2, r3
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d01a      	beq.n	8000f2c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f003 0304 	and.w	r3, r3, #4
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d013      	beq.n	8000f2c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f022 0204 	bic.w	r2, r2, #4
 8000f12:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f18:	2208      	movs	r2, #8
 8000f1a:	409a      	lsls	r2, r3
 8000f1c:	693b      	ldr	r3, [r7, #16]
 8000f1e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f24:	f043 0201 	orr.w	r2, r3, #1
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f30:	2201      	movs	r2, #1
 8000f32:	409a      	lsls	r2, r3
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	4013      	ands	r3, r2
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d012      	beq.n	8000f62 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	695b      	ldr	r3, [r3, #20]
 8000f42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d00b      	beq.n	8000f62 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f4e:	2201      	movs	r2, #1
 8000f50:	409a      	lsls	r2, r3
 8000f52:	693b      	ldr	r3, [r7, #16]
 8000f54:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f5a:	f043 0202 	orr.w	r2, r3, #2
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f66:	2204      	movs	r2, #4
 8000f68:	409a      	lsls	r2, r3
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d012      	beq.n	8000f98 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f003 0302 	and.w	r3, r3, #2
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d00b      	beq.n	8000f98 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f84:	2204      	movs	r2, #4
 8000f86:	409a      	lsls	r2, r3
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f90:	f043 0204 	orr.w	r2, r3, #4
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f9c:	2210      	movs	r2, #16
 8000f9e:	409a      	lsls	r2, r3
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d043      	beq.n	8001030 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f003 0308 	and.w	r3, r3, #8
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d03c      	beq.n	8001030 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fba:	2210      	movs	r2, #16
 8000fbc:	409a      	lsls	r2, r3
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d018      	beq.n	8001002 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d108      	bne.n	8000ff0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d024      	beq.n	8001030 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fea:	6878      	ldr	r0, [r7, #4]
 8000fec:	4798      	blx	r3
 8000fee:	e01f      	b.n	8001030 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d01b      	beq.n	8001030 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ffc:	6878      	ldr	r0, [r7, #4]
 8000ffe:	4798      	blx	r3
 8001000:	e016      	b.n	8001030 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800100c:	2b00      	cmp	r3, #0
 800100e:	d107      	bne.n	8001020 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f022 0208 	bic.w	r2, r2, #8
 800101e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001024:	2b00      	cmp	r3, #0
 8001026:	d003      	beq.n	8001030 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102c:	6878      	ldr	r0, [r7, #4]
 800102e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001034:	2220      	movs	r2, #32
 8001036:	409a      	lsls	r2, r3
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	4013      	ands	r3, r2
 800103c:	2b00      	cmp	r3, #0
 800103e:	f000 808f 	beq.w	8001160 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f003 0310 	and.w	r3, r3, #16
 800104c:	2b00      	cmp	r3, #0
 800104e:	f000 8087 	beq.w	8001160 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001056:	2220      	movs	r2, #32
 8001058:	409a      	lsls	r2, r3
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001064:	b2db      	uxtb	r3, r3
 8001066:	2b05      	cmp	r3, #5
 8001068:	d136      	bne.n	80010d8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f022 0216 	bic.w	r2, r2, #22
 8001078:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	695a      	ldr	r2, [r3, #20]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001088:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108e:	2b00      	cmp	r3, #0
 8001090:	d103      	bne.n	800109a <HAL_DMA_IRQHandler+0x1da>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001096:	2b00      	cmp	r3, #0
 8001098:	d007      	beq.n	80010aa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f022 0208 	bic.w	r2, r2, #8
 80010a8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010ae:	223f      	movs	r2, #63	; 0x3f
 80010b0:	409a      	lsls	r2, r3
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2200      	movs	r2, #0
 80010ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2201      	movs	r2, #1
 80010c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d07e      	beq.n	80011cc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	4798      	blx	r3
        }
        return;
 80010d6:	e079      	b.n	80011cc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d01d      	beq.n	8001122 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d10d      	bne.n	8001110 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d031      	beq.n	8001160 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	4798      	blx	r3
 8001104:	e02c      	b.n	8001160 <HAL_DMA_IRQHandler+0x2a0>
 8001106:	bf00      	nop
 8001108:	20000000 	.word	0x20000000
 800110c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001114:	2b00      	cmp	r3, #0
 8001116:	d023      	beq.n	8001160 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	4798      	blx	r3
 8001120:	e01e      	b.n	8001160 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800112c:	2b00      	cmp	r3, #0
 800112e:	d10f      	bne.n	8001150 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f022 0210 	bic.w	r2, r2, #16
 800113e:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2200      	movs	r2, #0
 8001144:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2201      	movs	r2, #1
 800114c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001154:	2b00      	cmp	r3, #0
 8001156:	d003      	beq.n	8001160 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001164:	2b00      	cmp	r3, #0
 8001166:	d032      	beq.n	80011ce <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800116c:	f003 0301 	and.w	r3, r3, #1
 8001170:	2b00      	cmp	r3, #0
 8001172:	d022      	beq.n	80011ba <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2205      	movs	r2, #5
 8001178:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f022 0201 	bic.w	r2, r2, #1
 800118a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	3301      	adds	r3, #1
 8001190:	60bb      	str	r3, [r7, #8]
 8001192:	697a      	ldr	r2, [r7, #20]
 8001194:	429a      	cmp	r2, r3
 8001196:	d307      	bcc.n	80011a8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f003 0301 	and.w	r3, r3, #1
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d1f2      	bne.n	800118c <HAL_DMA_IRQHandler+0x2cc>
 80011a6:	e000      	b.n	80011aa <HAL_DMA_IRQHandler+0x2ea>
          break;
 80011a8:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2200      	movs	r2, #0
 80011ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2201      	movs	r2, #1
 80011b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d005      	beq.n	80011ce <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	4798      	blx	r3
 80011ca:	e000      	b.n	80011ce <HAL_DMA_IRQHandler+0x30e>
        return;
 80011cc:	bf00      	nop
    }
  }
}
 80011ce:	3718      	adds	r7, #24
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b085      	sub	sp, #20
 80011d8:	af00      	add	r7, sp, #0
 80011da:	60f8      	str	r0, [r7, #12]
 80011dc:	60b9      	str	r1, [r7, #8]
 80011de:	607a      	str	r2, [r7, #4]
 80011e0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80011f0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	683a      	ldr	r2, [r7, #0]
 80011f8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	2b40      	cmp	r3, #64	; 0x40
 8001200:	d108      	bne.n	8001214 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	687a      	ldr	r2, [r7, #4]
 8001208:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	68ba      	ldr	r2, [r7, #8]
 8001210:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001212:	e007      	b.n	8001224 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	68ba      	ldr	r2, [r7, #8]
 800121a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	687a      	ldr	r2, [r7, #4]
 8001222:	60da      	str	r2, [r3, #12]
}
 8001224:	bf00      	nop
 8001226:	3714      	adds	r7, #20
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr

08001230 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001230:	b480      	push	{r7}
 8001232:	b085      	sub	sp, #20
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	b2db      	uxtb	r3, r3
 800123e:	3b10      	subs	r3, #16
 8001240:	4a14      	ldr	r2, [pc, #80]	; (8001294 <DMA_CalcBaseAndBitshift+0x64>)
 8001242:	fba2 2303 	umull	r2, r3, r2, r3
 8001246:	091b      	lsrs	r3, r3, #4
 8001248:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800124a:	4a13      	ldr	r2, [pc, #76]	; (8001298 <DMA_CalcBaseAndBitshift+0x68>)
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	4413      	add	r3, r2
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	461a      	mov	r2, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	2b03      	cmp	r3, #3
 800125c:	d909      	bls.n	8001272 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001266:	f023 0303 	bic.w	r3, r3, #3
 800126a:	1d1a      	adds	r2, r3, #4
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	659a      	str	r2, [r3, #88]	; 0x58
 8001270:	e007      	b.n	8001282 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800127a:	f023 0303 	bic.w	r3, r3, #3
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001286:	4618      	mov	r0, r3
 8001288:	3714      	adds	r7, #20
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	aaaaaaab 	.word	0xaaaaaaab
 8001298:	08007d40 	.word	0x08007d40

0800129c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800129c:	b480      	push	{r7}
 800129e:	b085      	sub	sp, #20
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012a4:	2300      	movs	r3, #0
 80012a6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	699b      	ldr	r3, [r3, #24]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d11f      	bne.n	80012f6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	2b03      	cmp	r3, #3
 80012ba:	d856      	bhi.n	800136a <DMA_CheckFifoParam+0xce>
 80012bc:	a201      	add	r2, pc, #4	; (adr r2, 80012c4 <DMA_CheckFifoParam+0x28>)
 80012be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012c2:	bf00      	nop
 80012c4:	080012d5 	.word	0x080012d5
 80012c8:	080012e7 	.word	0x080012e7
 80012cc:	080012d5 	.word	0x080012d5
 80012d0:	0800136b 	.word	0x0800136b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d046      	beq.n	800136e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80012e0:	2301      	movs	r3, #1
 80012e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80012e4:	e043      	b.n	800136e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80012ee:	d140      	bne.n	8001372 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80012f0:	2301      	movs	r3, #1
 80012f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80012f4:	e03d      	b.n	8001372 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	699b      	ldr	r3, [r3, #24]
 80012fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80012fe:	d121      	bne.n	8001344 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	2b03      	cmp	r3, #3
 8001304:	d837      	bhi.n	8001376 <DMA_CheckFifoParam+0xda>
 8001306:	a201      	add	r2, pc, #4	; (adr r2, 800130c <DMA_CheckFifoParam+0x70>)
 8001308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800130c:	0800131d 	.word	0x0800131d
 8001310:	08001323 	.word	0x08001323
 8001314:	0800131d 	.word	0x0800131d
 8001318:	08001335 	.word	0x08001335
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800131c:	2301      	movs	r3, #1
 800131e:	73fb      	strb	r3, [r7, #15]
      break;
 8001320:	e030      	b.n	8001384 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001326:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800132a:	2b00      	cmp	r3, #0
 800132c:	d025      	beq.n	800137a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001332:	e022      	b.n	800137a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001338:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800133c:	d11f      	bne.n	800137e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001342:	e01c      	b.n	800137e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	2b02      	cmp	r3, #2
 8001348:	d903      	bls.n	8001352 <DMA_CheckFifoParam+0xb6>
 800134a:	68bb      	ldr	r3, [r7, #8]
 800134c:	2b03      	cmp	r3, #3
 800134e:	d003      	beq.n	8001358 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001350:	e018      	b.n	8001384 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	73fb      	strb	r3, [r7, #15]
      break;
 8001356:	e015      	b.n	8001384 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800135c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001360:	2b00      	cmp	r3, #0
 8001362:	d00e      	beq.n	8001382 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001364:	2301      	movs	r3, #1
 8001366:	73fb      	strb	r3, [r7, #15]
      break;
 8001368:	e00b      	b.n	8001382 <DMA_CheckFifoParam+0xe6>
      break;
 800136a:	bf00      	nop
 800136c:	e00a      	b.n	8001384 <DMA_CheckFifoParam+0xe8>
      break;
 800136e:	bf00      	nop
 8001370:	e008      	b.n	8001384 <DMA_CheckFifoParam+0xe8>
      break;
 8001372:	bf00      	nop
 8001374:	e006      	b.n	8001384 <DMA_CheckFifoParam+0xe8>
      break;
 8001376:	bf00      	nop
 8001378:	e004      	b.n	8001384 <DMA_CheckFifoParam+0xe8>
      break;
 800137a:	bf00      	nop
 800137c:	e002      	b.n	8001384 <DMA_CheckFifoParam+0xe8>
      break;   
 800137e:	bf00      	nop
 8001380:	e000      	b.n	8001384 <DMA_CheckFifoParam+0xe8>
      break;
 8001382:	bf00      	nop
    }
  } 
  
  return status; 
 8001384:	7bfb      	ldrb	r3, [r7, #15]
}
 8001386:	4618      	mov	r0, r3
 8001388:	3714      	adds	r7, #20
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop

08001394 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001394:	b480      	push	{r7}
 8001396:	b089      	sub	sp, #36	; 0x24
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800139e:	2300      	movs	r3, #0
 80013a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013a2:	2300      	movs	r3, #0
 80013a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013a6:	2300      	movs	r3, #0
 80013a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013aa:	2300      	movs	r3, #0
 80013ac:	61fb      	str	r3, [r7, #28]
 80013ae:	e159      	b.n	8001664 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013b0:	2201      	movs	r2, #1
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	697a      	ldr	r2, [r7, #20]
 80013c0:	4013      	ands	r3, r2
 80013c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013c4:	693a      	ldr	r2, [r7, #16]
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	f040 8148 	bne.w	800165e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f003 0303 	and.w	r3, r3, #3
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d005      	beq.n	80013e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	d130      	bne.n	8001448 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	2203      	movs	r2, #3
 80013f2:	fa02 f303 	lsl.w	r3, r2, r3
 80013f6:	43db      	mvns	r3, r3
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	4013      	ands	r3, r2
 80013fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	68da      	ldr	r2, [r3, #12]
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	fa02 f303 	lsl.w	r3, r2, r3
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	4313      	orrs	r3, r2
 800140e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	69ba      	ldr	r2, [r7, #24]
 8001414:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800141c:	2201      	movs	r2, #1
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	fa02 f303 	lsl.w	r3, r2, r3
 8001424:	43db      	mvns	r3, r3
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	4013      	ands	r3, r2
 800142a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	091b      	lsrs	r3, r3, #4
 8001432:	f003 0201 	and.w	r2, r3, #1
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	4313      	orrs	r3, r2
 8001440:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f003 0303 	and.w	r3, r3, #3
 8001450:	2b03      	cmp	r3, #3
 8001452:	d017      	beq.n	8001484 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	005b      	lsls	r3, r3, #1
 800145e:	2203      	movs	r2, #3
 8001460:	fa02 f303 	lsl.w	r3, r2, r3
 8001464:	43db      	mvns	r3, r3
 8001466:	69ba      	ldr	r2, [r7, #24]
 8001468:	4013      	ands	r3, r2
 800146a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	689a      	ldr	r2, [r3, #8]
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	4313      	orrs	r3, r2
 800147c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f003 0303 	and.w	r3, r3, #3
 800148c:	2b02      	cmp	r3, #2
 800148e:	d123      	bne.n	80014d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	08da      	lsrs	r2, r3, #3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	3208      	adds	r2, #8
 8001498:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800149c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	f003 0307 	and.w	r3, r3, #7
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	220f      	movs	r2, #15
 80014a8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ac:	43db      	mvns	r3, r3
 80014ae:	69ba      	ldr	r2, [r7, #24]
 80014b0:	4013      	ands	r3, r2
 80014b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	691a      	ldr	r2, [r3, #16]
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	f003 0307 	and.w	r3, r3, #7
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	fa02 f303 	lsl.w	r3, r2, r3
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	08da      	lsrs	r2, r3, #3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	3208      	adds	r2, #8
 80014d2:	69b9      	ldr	r1, [r7, #24]
 80014d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	005b      	lsls	r3, r3, #1
 80014e2:	2203      	movs	r2, #3
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	43db      	mvns	r3, r3
 80014ea:	69ba      	ldr	r2, [r7, #24]
 80014ec:	4013      	ands	r3, r2
 80014ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	f003 0203 	and.w	r2, r3, #3
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001500:	69ba      	ldr	r2, [r7, #24]
 8001502:	4313      	orrs	r3, r2
 8001504:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001514:	2b00      	cmp	r3, #0
 8001516:	f000 80a2 	beq.w	800165e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	60fb      	str	r3, [r7, #12]
 800151e:	4b57      	ldr	r3, [pc, #348]	; (800167c <HAL_GPIO_Init+0x2e8>)
 8001520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001522:	4a56      	ldr	r2, [pc, #344]	; (800167c <HAL_GPIO_Init+0x2e8>)
 8001524:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001528:	6453      	str	r3, [r2, #68]	; 0x44
 800152a:	4b54      	ldr	r3, [pc, #336]	; (800167c <HAL_GPIO_Init+0x2e8>)
 800152c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800152e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001532:	60fb      	str	r3, [r7, #12]
 8001534:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001536:	4a52      	ldr	r2, [pc, #328]	; (8001680 <HAL_GPIO_Init+0x2ec>)
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	089b      	lsrs	r3, r3, #2
 800153c:	3302      	adds	r3, #2
 800153e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001542:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	f003 0303 	and.w	r3, r3, #3
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	220f      	movs	r2, #15
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	43db      	mvns	r3, r3
 8001554:	69ba      	ldr	r2, [r7, #24]
 8001556:	4013      	ands	r3, r2
 8001558:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4a49      	ldr	r2, [pc, #292]	; (8001684 <HAL_GPIO_Init+0x2f0>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d019      	beq.n	8001596 <HAL_GPIO_Init+0x202>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4a48      	ldr	r2, [pc, #288]	; (8001688 <HAL_GPIO_Init+0x2f4>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d013      	beq.n	8001592 <HAL_GPIO_Init+0x1fe>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4a47      	ldr	r2, [pc, #284]	; (800168c <HAL_GPIO_Init+0x2f8>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d00d      	beq.n	800158e <HAL_GPIO_Init+0x1fa>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4a46      	ldr	r2, [pc, #280]	; (8001690 <HAL_GPIO_Init+0x2fc>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d007      	beq.n	800158a <HAL_GPIO_Init+0x1f6>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4a45      	ldr	r2, [pc, #276]	; (8001694 <HAL_GPIO_Init+0x300>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d101      	bne.n	8001586 <HAL_GPIO_Init+0x1f2>
 8001582:	2304      	movs	r3, #4
 8001584:	e008      	b.n	8001598 <HAL_GPIO_Init+0x204>
 8001586:	2307      	movs	r3, #7
 8001588:	e006      	b.n	8001598 <HAL_GPIO_Init+0x204>
 800158a:	2303      	movs	r3, #3
 800158c:	e004      	b.n	8001598 <HAL_GPIO_Init+0x204>
 800158e:	2302      	movs	r3, #2
 8001590:	e002      	b.n	8001598 <HAL_GPIO_Init+0x204>
 8001592:	2301      	movs	r3, #1
 8001594:	e000      	b.n	8001598 <HAL_GPIO_Init+0x204>
 8001596:	2300      	movs	r3, #0
 8001598:	69fa      	ldr	r2, [r7, #28]
 800159a:	f002 0203 	and.w	r2, r2, #3
 800159e:	0092      	lsls	r2, r2, #2
 80015a0:	4093      	lsls	r3, r2
 80015a2:	69ba      	ldr	r2, [r7, #24]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015a8:	4935      	ldr	r1, [pc, #212]	; (8001680 <HAL_GPIO_Init+0x2ec>)
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	089b      	lsrs	r3, r3, #2
 80015ae:	3302      	adds	r3, #2
 80015b0:	69ba      	ldr	r2, [r7, #24]
 80015b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015b6:	4b38      	ldr	r3, [pc, #224]	; (8001698 <HAL_GPIO_Init+0x304>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	43db      	mvns	r3, r3
 80015c0:	69ba      	ldr	r2, [r7, #24]
 80015c2:	4013      	ands	r3, r2
 80015c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d003      	beq.n	80015da <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80015d2:	69ba      	ldr	r2, [r7, #24]
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	4313      	orrs	r3, r2
 80015d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015da:	4a2f      	ldr	r2, [pc, #188]	; (8001698 <HAL_GPIO_Init+0x304>)
 80015dc:	69bb      	ldr	r3, [r7, #24]
 80015de:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80015e0:	4b2d      	ldr	r3, [pc, #180]	; (8001698 <HAL_GPIO_Init+0x304>)
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	43db      	mvns	r3, r3
 80015ea:	69ba      	ldr	r2, [r7, #24]
 80015ec:	4013      	ands	r3, r2
 80015ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d003      	beq.n	8001604 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80015fc:	69ba      	ldr	r2, [r7, #24]
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	4313      	orrs	r3, r2
 8001602:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001604:	4a24      	ldr	r2, [pc, #144]	; (8001698 <HAL_GPIO_Init+0x304>)
 8001606:	69bb      	ldr	r3, [r7, #24]
 8001608:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800160a:	4b23      	ldr	r3, [pc, #140]	; (8001698 <HAL_GPIO_Init+0x304>)
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	43db      	mvns	r3, r3
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	4013      	ands	r3, r2
 8001618:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d003      	beq.n	800162e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001626:	69ba      	ldr	r2, [r7, #24]
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	4313      	orrs	r3, r2
 800162c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800162e:	4a1a      	ldr	r2, [pc, #104]	; (8001698 <HAL_GPIO_Init+0x304>)
 8001630:	69bb      	ldr	r3, [r7, #24]
 8001632:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001634:	4b18      	ldr	r3, [pc, #96]	; (8001698 <HAL_GPIO_Init+0x304>)
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	43db      	mvns	r3, r3
 800163e:	69ba      	ldr	r2, [r7, #24]
 8001640:	4013      	ands	r3, r2
 8001642:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800164c:	2b00      	cmp	r3, #0
 800164e:	d003      	beq.n	8001658 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	4313      	orrs	r3, r2
 8001656:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001658:	4a0f      	ldr	r2, [pc, #60]	; (8001698 <HAL_GPIO_Init+0x304>)
 800165a:	69bb      	ldr	r3, [r7, #24]
 800165c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	3301      	adds	r3, #1
 8001662:	61fb      	str	r3, [r7, #28]
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	2b0f      	cmp	r3, #15
 8001668:	f67f aea2 	bls.w	80013b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800166c:	bf00      	nop
 800166e:	bf00      	nop
 8001670:	3724      	adds	r7, #36	; 0x24
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	40023800 	.word	0x40023800
 8001680:	40013800 	.word	0x40013800
 8001684:	40020000 	.word	0x40020000
 8001688:	40020400 	.word	0x40020400
 800168c:	40020800 	.word	0x40020800
 8001690:	40020c00 	.word	0x40020c00
 8001694:	40021000 	.word	0x40021000
 8001698:	40013c00 	.word	0x40013c00

0800169c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b088      	sub	sp, #32
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d101      	bne.n	80016ae <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e128      	b.n	8001900 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d109      	bne.n	80016ce <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2200      	movs	r2, #0
 80016be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4a90      	ldr	r2, [pc, #576]	; (8001908 <HAL_I2S_Init+0x26c>)
 80016c6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f7ff f833 	bl	8000734 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2202      	movs	r2, #2
 80016d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	69db      	ldr	r3, [r3, #28]
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	6812      	ldr	r2, [r2, #0]
 80016e0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80016e4:	f023 030f 	bic.w	r3, r3, #15
 80016e8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	2202      	movs	r2, #2
 80016f0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	695b      	ldr	r3, [r3, #20]
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d060      	beq.n	80017bc <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	68db      	ldr	r3, [r3, #12]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d102      	bne.n	8001708 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001702:	2310      	movs	r3, #16
 8001704:	617b      	str	r3, [r7, #20]
 8001706:	e001      	b.n	800170c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001708:	2320      	movs	r3, #32
 800170a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	2b20      	cmp	r3, #32
 8001712:	d802      	bhi.n	800171a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	005b      	lsls	r3, r3, #1
 8001718:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800171a:	2001      	movs	r0, #1
 800171c:	f002 fc32 	bl	8003f84 <HAL_RCCEx_GetPeriphCLKFreq>
 8001720:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	691b      	ldr	r3, [r3, #16]
 8001726:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800172a:	d125      	bne.n	8001778 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d010      	beq.n	8001756 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	68fa      	ldr	r2, [r7, #12]
 800173a:	fbb2 f2f3 	udiv	r2, r2, r3
 800173e:	4613      	mov	r3, r2
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	4413      	add	r3, r2
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	461a      	mov	r2, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	695b      	ldr	r3, [r3, #20]
 800174c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001750:	3305      	adds	r3, #5
 8001752:	613b      	str	r3, [r7, #16]
 8001754:	e01f      	b.n	8001796 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	00db      	lsls	r3, r3, #3
 800175a:	68fa      	ldr	r2, [r7, #12]
 800175c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001760:	4613      	mov	r3, r2
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	4413      	add	r3, r2
 8001766:	005b      	lsls	r3, r3, #1
 8001768:	461a      	mov	r2, r3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	695b      	ldr	r3, [r3, #20]
 800176e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001772:	3305      	adds	r3, #5
 8001774:	613b      	str	r3, [r7, #16]
 8001776:	e00e      	b.n	8001796 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001778:	68fa      	ldr	r2, [r7, #12]
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001780:	4613      	mov	r3, r2
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	4413      	add	r3, r2
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	461a      	mov	r2, r3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	695b      	ldr	r3, [r3, #20]
 800178e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001792:	3305      	adds	r3, #5
 8001794:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	4a5c      	ldr	r2, [pc, #368]	; (800190c <HAL_I2S_Init+0x270>)
 800179a:	fba2 2303 	umull	r2, r3, r2, r3
 800179e:	08db      	lsrs	r3, r3, #3
 80017a0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	f003 0301 	and.w	r3, r3, #1
 80017a8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80017aa:	693a      	ldr	r2, [r7, #16]
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	085b      	lsrs	r3, r3, #1
 80017b2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	021b      	lsls	r3, r3, #8
 80017b8:	61bb      	str	r3, [r7, #24]
 80017ba:	e003      	b.n	80017c4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80017bc:	2302      	movs	r3, #2
 80017be:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80017c0:	2300      	movs	r3, #0
 80017c2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80017c4:	69fb      	ldr	r3, [r7, #28]
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d902      	bls.n	80017d0 <HAL_I2S_Init+0x134>
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	2bff      	cmp	r3, #255	; 0xff
 80017ce:	d907      	bls.n	80017e0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d4:	f043 0210 	orr.w	r2, r3, #16
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	e08f      	b.n	8001900 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	691a      	ldr	r2, [r3, #16]
 80017e4:	69bb      	ldr	r3, [r7, #24]
 80017e6:	ea42 0103 	orr.w	r1, r2, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	69fa      	ldr	r2, [r7, #28]
 80017f0:	430a      	orrs	r2, r1
 80017f2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	69db      	ldr	r3, [r3, #28]
 80017fa:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80017fe:	f023 030f 	bic.w	r3, r3, #15
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	6851      	ldr	r1, [r2, #4]
 8001806:	687a      	ldr	r2, [r7, #4]
 8001808:	6892      	ldr	r2, [r2, #8]
 800180a:	4311      	orrs	r1, r2
 800180c:	687a      	ldr	r2, [r7, #4]
 800180e:	68d2      	ldr	r2, [r2, #12]
 8001810:	4311      	orrs	r1, r2
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	6992      	ldr	r2, [r2, #24]
 8001816:	430a      	orrs	r2, r1
 8001818:	431a      	orrs	r2, r3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001822:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6a1b      	ldr	r3, [r3, #32]
 8001828:	2b01      	cmp	r3, #1
 800182a:	d161      	bne.n	80018f0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	4a38      	ldr	r2, [pc, #224]	; (8001910 <HAL_I2S_Init+0x274>)
 8001830:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a37      	ldr	r2, [pc, #220]	; (8001914 <HAL_I2S_Init+0x278>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d101      	bne.n	8001840 <HAL_I2S_Init+0x1a4>
 800183c:	4b36      	ldr	r3, [pc, #216]	; (8001918 <HAL_I2S_Init+0x27c>)
 800183e:	e001      	b.n	8001844 <HAL_I2S_Init+0x1a8>
 8001840:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001844:	69db      	ldr	r3, [r3, #28]
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	6812      	ldr	r2, [r2, #0]
 800184a:	4932      	ldr	r1, [pc, #200]	; (8001914 <HAL_I2S_Init+0x278>)
 800184c:	428a      	cmp	r2, r1
 800184e:	d101      	bne.n	8001854 <HAL_I2S_Init+0x1b8>
 8001850:	4a31      	ldr	r2, [pc, #196]	; (8001918 <HAL_I2S_Init+0x27c>)
 8001852:	e001      	b.n	8001858 <HAL_I2S_Init+0x1bc>
 8001854:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001858:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800185c:	f023 030f 	bic.w	r3, r3, #15
 8001860:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a2b      	ldr	r2, [pc, #172]	; (8001914 <HAL_I2S_Init+0x278>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d101      	bne.n	8001870 <HAL_I2S_Init+0x1d4>
 800186c:	4b2a      	ldr	r3, [pc, #168]	; (8001918 <HAL_I2S_Init+0x27c>)
 800186e:	e001      	b.n	8001874 <HAL_I2S_Init+0x1d8>
 8001870:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001874:	2202      	movs	r2, #2
 8001876:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a25      	ldr	r2, [pc, #148]	; (8001914 <HAL_I2S_Init+0x278>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d101      	bne.n	8001886 <HAL_I2S_Init+0x1ea>
 8001882:	4b25      	ldr	r3, [pc, #148]	; (8001918 <HAL_I2S_Init+0x27c>)
 8001884:	e001      	b.n	800188a <HAL_I2S_Init+0x1ee>
 8001886:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800188a:	69db      	ldr	r3, [r3, #28]
 800188c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001896:	d003      	beq.n	80018a0 <HAL_I2S_Init+0x204>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d103      	bne.n	80018a8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80018a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018a4:	613b      	str	r3, [r7, #16]
 80018a6:	e001      	b.n	80018ac <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80018a8:	2300      	movs	r3, #0
 80018aa:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80018b6:	4313      	orrs	r3, r2
 80018b8:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	68db      	ldr	r3, [r3, #12]
 80018be:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80018c0:	4313      	orrs	r3, r2
 80018c2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	699b      	ldr	r3, [r3, #24]
 80018c8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80018ca:	4313      	orrs	r3, r2
 80018cc:	b29a      	uxth	r2, r3
 80018ce:	897b      	ldrh	r3, [r7, #10]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	b29b      	uxth	r3, r3
 80018d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80018d8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a0d      	ldr	r2, [pc, #52]	; (8001914 <HAL_I2S_Init+0x278>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d101      	bne.n	80018e8 <HAL_I2S_Init+0x24c>
 80018e4:	4b0c      	ldr	r3, [pc, #48]	; (8001918 <HAL_I2S_Init+0x27c>)
 80018e6:	e001      	b.n	80018ec <HAL_I2S_Init+0x250>
 80018e8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80018ec:	897a      	ldrh	r2, [r7, #10]
 80018ee:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2200      	movs	r2, #0
 80018f4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2201      	movs	r2, #1
 80018fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80018fe:	2300      	movs	r3, #0
}
 8001900:	4618      	mov	r0, r3
 8001902:	3720      	adds	r7, #32
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	08001c21 	.word	0x08001c21
 800190c:	cccccccd 	.word	0xcccccccd
 8001910:	08001d35 	.word	0x08001d35
 8001914:	40003800 	.word	0x40003800
 8001918:	40003400 	.word	0x40003400

0800191c <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b086      	sub	sp, #24
 8001920:	af00      	add	r7, sp, #0
 8001922:	60f8      	str	r0, [r7, #12]
 8001924:	60b9      	str	r1, [r7, #8]
 8001926:	4613      	mov	r3, r2
 8001928:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d002      	beq.n	8001936 <HAL_I2S_Transmit_DMA+0x1a>
 8001930:	88fb      	ldrh	r3, [r7, #6]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d101      	bne.n	800193a <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e08e      	b.n	8001a58 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001940:	b2db      	uxtb	r3, r3
 8001942:	2b01      	cmp	r3, #1
 8001944:	d101      	bne.n	800194a <HAL_I2S_Transmit_DMA+0x2e>
 8001946:	2302      	movs	r3, #2
 8001948:	e086      	b.n	8001a58 <HAL_I2S_Transmit_DMA+0x13c>
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	2201      	movs	r2, #1
 800194e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001958:	b2db      	uxtb	r3, r3
 800195a:	2b01      	cmp	r3, #1
 800195c:	d005      	beq.n	800196a <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	2200      	movs	r2, #0
 8001962:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8001966:	2302      	movs	r3, #2
 8001968:	e076      	b.n	8001a58 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	2203      	movs	r2, #3
 800196e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	2200      	movs	r2, #0
 8001976:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	68ba      	ldr	r2, [r7, #8]
 800197c:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	69db      	ldr	r3, [r3, #28]
 8001984:	f003 0307 	and.w	r3, r3, #7
 8001988:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	2b03      	cmp	r3, #3
 800198e:	d002      	beq.n	8001996 <HAL_I2S_Transmit_DMA+0x7a>
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	2b05      	cmp	r3, #5
 8001994:	d10a      	bne.n	80019ac <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 8001996:	88fb      	ldrh	r3, [r7, #6]
 8001998:	005b      	lsls	r3, r3, #1
 800199a:	b29a      	uxth	r2, r3
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 80019a0:	88fb      	ldrh	r3, [r7, #6]
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	b29a      	uxth	r2, r3
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80019aa:	e005      	b.n	80019b8 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	88fa      	ldrh	r2, [r7, #6]
 80019b0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	88fa      	ldrh	r2, [r7, #6]
 80019b6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019bc:	4a28      	ldr	r2, [pc, #160]	; (8001a60 <HAL_I2S_Transmit_DMA+0x144>)
 80019be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019c4:	4a27      	ldr	r2, [pc, #156]	; (8001a64 <HAL_I2S_Transmit_DMA+0x148>)
 80019c6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019cc:	4a26      	ldr	r2, [pc, #152]	; (8001a68 <HAL_I2S_Transmit_DMA+0x14c>)
 80019ce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80019d8:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80019e0:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019e6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80019e8:	f7ff fa12 	bl	8000e10 <HAL_DMA_Start_IT>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d00f      	beq.n	8001a12 <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f6:	f043 0208 	orr.w	r2, r3, #8
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	2201      	movs	r2, #1
 8001a02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e022      	b.n	8001a58 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	69db      	ldr	r3, [r3, #28]
 8001a18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d107      	bne.n	8001a30 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	69da      	ldr	r2, [r3, #28]
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001a2e:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f003 0302 	and.w	r3, r3, #2
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d107      	bne.n	8001a4e <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	685a      	ldr	r2, [r3, #4]
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f042 0202 	orr.w	r2, r2, #2
 8001a4c:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	2200      	movs	r2, #0
 8001a52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8001a56:	2300      	movs	r3, #0
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3718      	adds	r7, #24
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	08001aff 	.word	0x08001aff
 8001a64:	08001abd 	.word	0x08001abd
 8001a68:	08001b1b 	.word	0x08001b1b

08001a6c <HAL_I2S_TxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxHalfCpltCallback could be implemented in the user file
   */
}
 8001a74:	bf00      	nop
 8001a76:	370c      	adds	r7, #12
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001a88:	bf00      	nop
 8001a8a:	370c      	adds	r7, #12
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr

08001a94 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8001a9c:	bf00      	nop
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001ab0:	bf00      	nop
 8001ab2:	370c      	adds	r7, #12
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr

08001abc <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ac8:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	69db      	ldr	r3, [r3, #28]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d10e      	bne.n	8001af0 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	685a      	ldr	r2, [r3, #4]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f022 0202 	bic.w	r2, r2, #2
 8001ae0:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	2201      	movs	r2, #1
 8001aec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8001af0:	68f8      	ldr	r0, [r7, #12]
 8001af2:	f7ff ffc5 	bl	8001a80 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8001af6:	bf00      	nop
 8001af8:	3710      	adds	r7, #16
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}

08001afe <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b084      	sub	sp, #16
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b0a:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8001b0c:	68f8      	ldr	r0, [r7, #12]
 8001b0e:	f7ff ffad 	bl	8001a6c <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8001b12:	bf00      	nop
 8001b14:	3710      	adds	r7, #16
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b084      	sub	sp, #16
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b26:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	685a      	ldr	r2, [r3, #4]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f022 0203 	bic.w	r2, r2, #3
 8001b36:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	2200      	movs	r2, #0
 8001b42:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	2201      	movs	r2, #1
 8001b48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b50:	f043 0208 	orr.w	r2, r3, #8
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8001b58:	68f8      	ldr	r0, [r7, #12]
 8001b5a:	f7ff ffa5 	bl	8001aa8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8001b5e:	bf00      	nop
 8001b60:	3710      	adds	r7, #16
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}

08001b66 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001b66:	b580      	push	{r7, lr}
 8001b68:	b082      	sub	sp, #8
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b72:	881a      	ldrh	r2, [r3, #0]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b7e:	1c9a      	adds	r2, r3, #2
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b88:	b29b      	uxth	r3, r3
 8001b8a:	3b01      	subs	r3, #1
 8001b8c:	b29a      	uxth	r2, r3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d10e      	bne.n	8001bba <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	685a      	ldr	r2, [r3, #4]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001baa:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f7ff ff63 	bl	8001a80 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001bba:	bf00      	nop
 8001bbc:	3708      	adds	r7, #8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	b082      	sub	sp, #8
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	68da      	ldr	r2, [r3, #12]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd4:	b292      	uxth	r2, r2
 8001bd6:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bdc:	1c9a      	adds	r2, r3, #2
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001be6:	b29b      	uxth	r3, r3
 8001be8:	3b01      	subs	r3, #1
 8001bea:	b29a      	uxth	r2, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d10e      	bne.n	8001c18 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	685a      	ldr	r2, [r3, #4]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001c08:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f7ff ff3e 	bl	8001a94 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001c18:	bf00      	nop
 8001c1a:	3708      	adds	r7, #8
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b086      	sub	sp, #24
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	2b04      	cmp	r3, #4
 8001c3a:	d13a      	bne.n	8001cb2 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	f003 0301 	and.w	r3, r3, #1
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d109      	bne.n	8001c5a <I2S_IRQHandler+0x3a>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c50:	2b40      	cmp	r3, #64	; 0x40
 8001c52:	d102      	bne.n	8001c5a <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f7ff ffb4 	bl	8001bc2 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c60:	2b40      	cmp	r3, #64	; 0x40
 8001c62:	d126      	bne.n	8001cb2 <I2S_IRQHandler+0x92>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f003 0320 	and.w	r3, r3, #32
 8001c6e:	2b20      	cmp	r3, #32
 8001c70:	d11f      	bne.n	8001cb2 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	685a      	ldr	r2, [r3, #4]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001c80:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001c82:	2300      	movs	r3, #0
 8001c84:	613b      	str	r3, [r7, #16]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	613b      	str	r3, [r7, #16]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	613b      	str	r3, [r7, #16]
 8001c96:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca4:	f043 0202 	orr.w	r2, r3, #2
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f7ff fefb 	bl	8001aa8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	2b03      	cmp	r3, #3
 8001cbc:	d136      	bne.n	8001d2c <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	f003 0302 	and.w	r3, r3, #2
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	d109      	bne.n	8001cdc <I2S_IRQHandler+0xbc>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cd2:	2b80      	cmp	r3, #128	; 0x80
 8001cd4:	d102      	bne.n	8001cdc <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f7ff ff45 	bl	8001b66 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	f003 0308 	and.w	r3, r3, #8
 8001ce2:	2b08      	cmp	r3, #8
 8001ce4:	d122      	bne.n	8001d2c <I2S_IRQHandler+0x10c>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f003 0320 	and.w	r3, r3, #32
 8001cf0:	2b20      	cmp	r3, #32
 8001cf2:	d11b      	bne.n	8001d2c <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	685a      	ldr	r2, [r3, #4]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001d02:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001d04:	2300      	movs	r3, #0
 8001d06:	60fb      	str	r3, [r7, #12]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	60fb      	str	r3, [r7, #12]
 8001d10:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2201      	movs	r2, #1
 8001d16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d1e:	f043 0204 	orr.w	r2, r3, #4
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f7ff febe 	bl	8001aa8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001d2c:	bf00      	nop
 8001d2e:	3718      	adds	r7, #24
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b088      	sub	sp, #32
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a92      	ldr	r2, [pc, #584]	; (8001f94 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d101      	bne.n	8001d52 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8001d4e:	4b92      	ldr	r3, [pc, #584]	; (8001f98 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001d50:	e001      	b.n	8001d56 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8001d52:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a8b      	ldr	r2, [pc, #556]	; (8001f94 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d101      	bne.n	8001d70 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8001d6c:	4b8a      	ldr	r3, [pc, #552]	; (8001f98 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001d6e:	e001      	b.n	8001d74 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8001d70:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d80:	d004      	beq.n	8001d8c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	f040 8099 	bne.w	8001ebe <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	f003 0302 	and.w	r3, r3, #2
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d107      	bne.n	8001da6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d002      	beq.n	8001da6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f000 f925 	bl	8001ff0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8001da6:	69bb      	ldr	r3, [r7, #24]
 8001da8:	f003 0301 	and.w	r3, r3, #1
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d107      	bne.n	8001dc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d002      	beq.n	8001dc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f000 f9c8 	bl	8002150 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001dc0:	69bb      	ldr	r3, [r7, #24]
 8001dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dc6:	2b40      	cmp	r3, #64	; 0x40
 8001dc8:	d13a      	bne.n	8001e40 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	f003 0320 	and.w	r3, r3, #32
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d035      	beq.n	8001e40 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a6e      	ldr	r2, [pc, #440]	; (8001f94 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d101      	bne.n	8001de2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8001dde:	4b6e      	ldr	r3, [pc, #440]	; (8001f98 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001de0:	e001      	b.n	8001de6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8001de2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001de6:	685a      	ldr	r2, [r3, #4]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4969      	ldr	r1, [pc, #420]	; (8001f94 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001dee:	428b      	cmp	r3, r1
 8001df0:	d101      	bne.n	8001df6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8001df2:	4b69      	ldr	r3, [pc, #420]	; (8001f98 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001df4:	e001      	b.n	8001dfa <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8001df6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001dfa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001dfe:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	685a      	ldr	r2, [r3, #4]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001e0e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001e10:	2300      	movs	r3, #0
 8001e12:	60fb      	str	r3, [r7, #12]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	68db      	ldr	r3, [r3, #12]
 8001e1a:	60fb      	str	r3, [r7, #12]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	60fb      	str	r3, [r7, #12]
 8001e24:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2201      	movs	r2, #1
 8001e2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e32:	f043 0202 	orr.w	r2, r3, #2
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f7ff fe34 	bl	8001aa8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	f003 0308 	and.w	r3, r3, #8
 8001e46:	2b08      	cmp	r3, #8
 8001e48:	f040 80c3 	bne.w	8001fd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	f003 0320 	and.w	r3, r3, #32
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	f000 80bd 	beq.w	8001fd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	685a      	ldr	r2, [r3, #4]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001e66:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a49      	ldr	r2, [pc, #292]	; (8001f94 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d101      	bne.n	8001e76 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8001e72:	4b49      	ldr	r3, [pc, #292]	; (8001f98 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001e74:	e001      	b.n	8001e7a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8001e76:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e7a:	685a      	ldr	r2, [r3, #4]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4944      	ldr	r1, [pc, #272]	; (8001f94 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001e82:	428b      	cmp	r3, r1
 8001e84:	d101      	bne.n	8001e8a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8001e86:	4b44      	ldr	r3, [pc, #272]	; (8001f98 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001e88:	e001      	b.n	8001e8e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8001e8a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e8e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001e92:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001e94:	2300      	movs	r3, #0
 8001e96:	60bb      	str	r3, [r7, #8]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	60bb      	str	r3, [r7, #8]
 8001ea0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eae:	f043 0204 	orr.w	r2, r3, #4
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f7ff fdf6 	bl	8001aa8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001ebc:	e089      	b.n	8001fd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8001ebe:	69bb      	ldr	r3, [r7, #24]
 8001ec0:	f003 0302 	and.w	r3, r3, #2
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d107      	bne.n	8001ed8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d002      	beq.n	8001ed8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f000 f8be 	bl	8002054 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	f003 0301 	and.w	r3, r3, #1
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d107      	bne.n	8001ef2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d002      	beq.n	8001ef2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f000 f8fd 	bl	80020ec <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ef8:	2b40      	cmp	r3, #64	; 0x40
 8001efa:	d12f      	bne.n	8001f5c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	f003 0320 	and.w	r3, r3, #32
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d02a      	beq.n	8001f5c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	685a      	ldr	r2, [r3, #4]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001f14:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a1e      	ldr	r2, [pc, #120]	; (8001f94 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d101      	bne.n	8001f24 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8001f20:	4b1d      	ldr	r3, [pc, #116]	; (8001f98 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001f22:	e001      	b.n	8001f28 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8001f24:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f28:	685a      	ldr	r2, [r3, #4]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4919      	ldr	r1, [pc, #100]	; (8001f94 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001f30:	428b      	cmp	r3, r1
 8001f32:	d101      	bne.n	8001f38 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8001f34:	4b18      	ldr	r3, [pc, #96]	; (8001f98 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001f36:	e001      	b.n	8001f3c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8001f38:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f3c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001f40:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2201      	movs	r2, #1
 8001f46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f4e:	f043 0202 	orr.w	r2, r3, #2
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f7ff fda6 	bl	8001aa8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001f5c:	69bb      	ldr	r3, [r7, #24]
 8001f5e:	f003 0308 	and.w	r3, r3, #8
 8001f62:	2b08      	cmp	r3, #8
 8001f64:	d136      	bne.n	8001fd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	f003 0320 	and.w	r3, r3, #32
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d031      	beq.n	8001fd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a07      	ldr	r2, [pc, #28]	; (8001f94 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d101      	bne.n	8001f7e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8001f7a:	4b07      	ldr	r3, [pc, #28]	; (8001f98 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001f7c:	e001      	b.n	8001f82 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8001f7e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f82:	685a      	ldr	r2, [r3, #4]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4902      	ldr	r1, [pc, #8]	; (8001f94 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001f8a:	428b      	cmp	r3, r1
 8001f8c:	d106      	bne.n	8001f9c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8001f8e:	4b02      	ldr	r3, [pc, #8]	; (8001f98 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001f90:	e006      	b.n	8001fa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8001f92:	bf00      	nop
 8001f94:	40003800 	.word	0x40003800
 8001f98:	40003400 	.word	0x40003400
 8001f9c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001fa0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001fa4:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	685a      	ldr	r2, [r3, #4]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001fb4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2201      	movs	r2, #1
 8001fba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc2:	f043 0204 	orr.w	r2, r3, #4
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f7ff fd6c 	bl	8001aa8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001fd0:	e000      	b.n	8001fd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001fd2:	bf00      	nop
}
 8001fd4:	bf00      	nop
 8001fd6:	3720      	adds	r7, #32
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8001fe4:	bf00      	nop
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr

08001ff0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffc:	1c99      	adds	r1, r3, #2
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	6251      	str	r1, [r2, #36]	; 0x24
 8002002:	881a      	ldrh	r2, [r3, #0]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800200e:	b29b      	uxth	r3, r3
 8002010:	3b01      	subs	r3, #1
 8002012:	b29a      	uxth	r2, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800201c:	b29b      	uxth	r3, r3
 800201e:	2b00      	cmp	r3, #0
 8002020:	d113      	bne.n	800204a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	685a      	ldr	r2, [r3, #4]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002030:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002036:	b29b      	uxth	r3, r3
 8002038:	2b00      	cmp	r3, #0
 800203a:	d106      	bne.n	800204a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2201      	movs	r2, #1
 8002040:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f7ff ffc9 	bl	8001fdc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800204a:	bf00      	nop
 800204c:	3708      	adds	r7, #8
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
	...

08002054 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002060:	1c99      	adds	r1, r3, #2
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	6251      	str	r1, [r2, #36]	; 0x24
 8002066:	8819      	ldrh	r1, [r3, #0]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a1d      	ldr	r2, [pc, #116]	; (80020e4 <I2SEx_TxISR_I2SExt+0x90>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d101      	bne.n	8002076 <I2SEx_TxISR_I2SExt+0x22>
 8002072:	4b1d      	ldr	r3, [pc, #116]	; (80020e8 <I2SEx_TxISR_I2SExt+0x94>)
 8002074:	e001      	b.n	800207a <I2SEx_TxISR_I2SExt+0x26>
 8002076:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800207a:	460a      	mov	r2, r1
 800207c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002082:	b29b      	uxth	r3, r3
 8002084:	3b01      	subs	r3, #1
 8002086:	b29a      	uxth	r2, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002090:	b29b      	uxth	r3, r3
 8002092:	2b00      	cmp	r3, #0
 8002094:	d121      	bne.n	80020da <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a12      	ldr	r2, [pc, #72]	; (80020e4 <I2SEx_TxISR_I2SExt+0x90>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d101      	bne.n	80020a4 <I2SEx_TxISR_I2SExt+0x50>
 80020a0:	4b11      	ldr	r3, [pc, #68]	; (80020e8 <I2SEx_TxISR_I2SExt+0x94>)
 80020a2:	e001      	b.n	80020a8 <I2SEx_TxISR_I2SExt+0x54>
 80020a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80020a8:	685a      	ldr	r2, [r3, #4]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	490d      	ldr	r1, [pc, #52]	; (80020e4 <I2SEx_TxISR_I2SExt+0x90>)
 80020b0:	428b      	cmp	r3, r1
 80020b2:	d101      	bne.n	80020b8 <I2SEx_TxISR_I2SExt+0x64>
 80020b4:	4b0c      	ldr	r3, [pc, #48]	; (80020e8 <I2SEx_TxISR_I2SExt+0x94>)
 80020b6:	e001      	b.n	80020bc <I2SEx_TxISR_I2SExt+0x68>
 80020b8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80020bc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80020c0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d106      	bne.n	80020da <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2201      	movs	r2, #1
 80020d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f7ff ff81 	bl	8001fdc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80020da:	bf00      	nop
 80020dc:	3708      	adds	r7, #8
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	40003800 	.word	0x40003800
 80020e8:	40003400 	.word	0x40003400

080020ec <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	68d8      	ldr	r0, [r3, #12]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020fe:	1c99      	adds	r1, r3, #2
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002104:	b282      	uxth	r2, r0
 8002106:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800210c:	b29b      	uxth	r3, r3
 800210e:	3b01      	subs	r3, #1
 8002110:	b29a      	uxth	r2, r3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800211a:	b29b      	uxth	r3, r3
 800211c:	2b00      	cmp	r3, #0
 800211e:	d113      	bne.n	8002148 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	685a      	ldr	r2, [r3, #4]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800212e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002134:	b29b      	uxth	r3, r3
 8002136:	2b00      	cmp	r3, #0
 8002138:	d106      	bne.n	8002148 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2201      	movs	r2, #1
 800213e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f7ff ff4a 	bl	8001fdc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002148:	bf00      	nop
 800214a:	3708      	adds	r7, #8
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}

08002150 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a20      	ldr	r2, [pc, #128]	; (80021e0 <I2SEx_RxISR_I2SExt+0x90>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d101      	bne.n	8002166 <I2SEx_RxISR_I2SExt+0x16>
 8002162:	4b20      	ldr	r3, [pc, #128]	; (80021e4 <I2SEx_RxISR_I2SExt+0x94>)
 8002164:	e001      	b.n	800216a <I2SEx_RxISR_I2SExt+0x1a>
 8002166:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800216a:	68d8      	ldr	r0, [r3, #12]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002170:	1c99      	adds	r1, r3, #2
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002176:	b282      	uxth	r2, r0
 8002178:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800217e:	b29b      	uxth	r3, r3
 8002180:	3b01      	subs	r3, #1
 8002182:	b29a      	uxth	r2, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800218c:	b29b      	uxth	r3, r3
 800218e:	2b00      	cmp	r3, #0
 8002190:	d121      	bne.n	80021d6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a12      	ldr	r2, [pc, #72]	; (80021e0 <I2SEx_RxISR_I2SExt+0x90>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d101      	bne.n	80021a0 <I2SEx_RxISR_I2SExt+0x50>
 800219c:	4b11      	ldr	r3, [pc, #68]	; (80021e4 <I2SEx_RxISR_I2SExt+0x94>)
 800219e:	e001      	b.n	80021a4 <I2SEx_RxISR_I2SExt+0x54>
 80021a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80021a4:	685a      	ldr	r2, [r3, #4]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	490d      	ldr	r1, [pc, #52]	; (80021e0 <I2SEx_RxISR_I2SExt+0x90>)
 80021ac:	428b      	cmp	r3, r1
 80021ae:	d101      	bne.n	80021b4 <I2SEx_RxISR_I2SExt+0x64>
 80021b0:	4b0c      	ldr	r3, [pc, #48]	; (80021e4 <I2SEx_RxISR_I2SExt+0x94>)
 80021b2:	e001      	b.n	80021b8 <I2SEx_RxISR_I2SExt+0x68>
 80021b4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80021b8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80021bc:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d106      	bne.n	80021d6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2201      	movs	r2, #1
 80021cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f7ff ff03 	bl	8001fdc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80021d6:	bf00      	nop
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	40003800 	.word	0x40003800
 80021e4:	40003400 	.word	0x40003400

080021e8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80021e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021ea:	b08f      	sub	sp, #60	; 0x3c
 80021ec:	af0a      	add	r7, sp, #40	; 0x28
 80021ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d101      	bne.n	80021fa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e10f      	b.n	800241a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002206:	b2db      	uxtb	r3, r3
 8002208:	2b00      	cmp	r3, #0
 800220a:	d106      	bne.n	800221a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f005 fa03 	bl	8007620 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2203      	movs	r2, #3
 800221e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002226:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800222a:	2b00      	cmp	r3, #0
 800222c:	d102      	bne.n	8002234 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4618      	mov	r0, r3
 800223a:	f002 f816 	bl	800426a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	603b      	str	r3, [r7, #0]
 8002244:	687e      	ldr	r6, [r7, #4]
 8002246:	466d      	mov	r5, sp
 8002248:	f106 0410 	add.w	r4, r6, #16
 800224c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800224e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002250:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002252:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002254:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002258:	e885 0003 	stmia.w	r5, {r0, r1}
 800225c:	1d33      	adds	r3, r6, #4
 800225e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002260:	6838      	ldr	r0, [r7, #0]
 8002262:	f001 feed 	bl	8004040 <USB_CoreInit>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d005      	beq.n	8002278 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2202      	movs	r2, #2
 8002270:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e0d0      	b.n	800241a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2100      	movs	r1, #0
 800227e:	4618      	mov	r0, r3
 8002280:	f002 f804 	bl	800428c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002284:	2300      	movs	r3, #0
 8002286:	73fb      	strb	r3, [r7, #15]
 8002288:	e04a      	b.n	8002320 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800228a:	7bfa      	ldrb	r2, [r7, #15]
 800228c:	6879      	ldr	r1, [r7, #4]
 800228e:	4613      	mov	r3, r2
 8002290:	00db      	lsls	r3, r3, #3
 8002292:	1a9b      	subs	r3, r3, r2
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	440b      	add	r3, r1
 8002298:	333d      	adds	r3, #61	; 0x3d
 800229a:	2201      	movs	r2, #1
 800229c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800229e:	7bfa      	ldrb	r2, [r7, #15]
 80022a0:	6879      	ldr	r1, [r7, #4]
 80022a2:	4613      	mov	r3, r2
 80022a4:	00db      	lsls	r3, r3, #3
 80022a6:	1a9b      	subs	r3, r3, r2
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	440b      	add	r3, r1
 80022ac:	333c      	adds	r3, #60	; 0x3c
 80022ae:	7bfa      	ldrb	r2, [r7, #15]
 80022b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80022b2:	7bfa      	ldrb	r2, [r7, #15]
 80022b4:	7bfb      	ldrb	r3, [r7, #15]
 80022b6:	b298      	uxth	r0, r3
 80022b8:	6879      	ldr	r1, [r7, #4]
 80022ba:	4613      	mov	r3, r2
 80022bc:	00db      	lsls	r3, r3, #3
 80022be:	1a9b      	subs	r3, r3, r2
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	440b      	add	r3, r1
 80022c4:	3342      	adds	r3, #66	; 0x42
 80022c6:	4602      	mov	r2, r0
 80022c8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80022ca:	7bfa      	ldrb	r2, [r7, #15]
 80022cc:	6879      	ldr	r1, [r7, #4]
 80022ce:	4613      	mov	r3, r2
 80022d0:	00db      	lsls	r3, r3, #3
 80022d2:	1a9b      	subs	r3, r3, r2
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	440b      	add	r3, r1
 80022d8:	333f      	adds	r3, #63	; 0x3f
 80022da:	2200      	movs	r2, #0
 80022dc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80022de:	7bfa      	ldrb	r2, [r7, #15]
 80022e0:	6879      	ldr	r1, [r7, #4]
 80022e2:	4613      	mov	r3, r2
 80022e4:	00db      	lsls	r3, r3, #3
 80022e6:	1a9b      	subs	r3, r3, r2
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	440b      	add	r3, r1
 80022ec:	3344      	adds	r3, #68	; 0x44
 80022ee:	2200      	movs	r2, #0
 80022f0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80022f2:	7bfa      	ldrb	r2, [r7, #15]
 80022f4:	6879      	ldr	r1, [r7, #4]
 80022f6:	4613      	mov	r3, r2
 80022f8:	00db      	lsls	r3, r3, #3
 80022fa:	1a9b      	subs	r3, r3, r2
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	440b      	add	r3, r1
 8002300:	3348      	adds	r3, #72	; 0x48
 8002302:	2200      	movs	r2, #0
 8002304:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002306:	7bfa      	ldrb	r2, [r7, #15]
 8002308:	6879      	ldr	r1, [r7, #4]
 800230a:	4613      	mov	r3, r2
 800230c:	00db      	lsls	r3, r3, #3
 800230e:	1a9b      	subs	r3, r3, r2
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	440b      	add	r3, r1
 8002314:	3350      	adds	r3, #80	; 0x50
 8002316:	2200      	movs	r2, #0
 8002318:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800231a:	7bfb      	ldrb	r3, [r7, #15]
 800231c:	3301      	adds	r3, #1
 800231e:	73fb      	strb	r3, [r7, #15]
 8002320:	7bfa      	ldrb	r2, [r7, #15]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	429a      	cmp	r2, r3
 8002328:	d3af      	bcc.n	800228a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800232a:	2300      	movs	r3, #0
 800232c:	73fb      	strb	r3, [r7, #15]
 800232e:	e044      	b.n	80023ba <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002330:	7bfa      	ldrb	r2, [r7, #15]
 8002332:	6879      	ldr	r1, [r7, #4]
 8002334:	4613      	mov	r3, r2
 8002336:	00db      	lsls	r3, r3, #3
 8002338:	1a9b      	subs	r3, r3, r2
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	440b      	add	r3, r1
 800233e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002342:	2200      	movs	r2, #0
 8002344:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002346:	7bfa      	ldrb	r2, [r7, #15]
 8002348:	6879      	ldr	r1, [r7, #4]
 800234a:	4613      	mov	r3, r2
 800234c:	00db      	lsls	r3, r3, #3
 800234e:	1a9b      	subs	r3, r3, r2
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	440b      	add	r3, r1
 8002354:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002358:	7bfa      	ldrb	r2, [r7, #15]
 800235a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800235c:	7bfa      	ldrb	r2, [r7, #15]
 800235e:	6879      	ldr	r1, [r7, #4]
 8002360:	4613      	mov	r3, r2
 8002362:	00db      	lsls	r3, r3, #3
 8002364:	1a9b      	subs	r3, r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	440b      	add	r3, r1
 800236a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800236e:	2200      	movs	r2, #0
 8002370:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002372:	7bfa      	ldrb	r2, [r7, #15]
 8002374:	6879      	ldr	r1, [r7, #4]
 8002376:	4613      	mov	r3, r2
 8002378:	00db      	lsls	r3, r3, #3
 800237a:	1a9b      	subs	r3, r3, r2
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	440b      	add	r3, r1
 8002380:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002384:	2200      	movs	r2, #0
 8002386:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002388:	7bfa      	ldrb	r2, [r7, #15]
 800238a:	6879      	ldr	r1, [r7, #4]
 800238c:	4613      	mov	r3, r2
 800238e:	00db      	lsls	r3, r3, #3
 8002390:	1a9b      	subs	r3, r3, r2
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	440b      	add	r3, r1
 8002396:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800239a:	2200      	movs	r2, #0
 800239c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800239e:	7bfa      	ldrb	r2, [r7, #15]
 80023a0:	6879      	ldr	r1, [r7, #4]
 80023a2:	4613      	mov	r3, r2
 80023a4:	00db      	lsls	r3, r3, #3
 80023a6:	1a9b      	subs	r3, r3, r2
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	440b      	add	r3, r1
 80023ac:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80023b0:	2200      	movs	r2, #0
 80023b2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023b4:	7bfb      	ldrb	r3, [r7, #15]
 80023b6:	3301      	adds	r3, #1
 80023b8:	73fb      	strb	r3, [r7, #15]
 80023ba:	7bfa      	ldrb	r2, [r7, #15]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d3b5      	bcc.n	8002330 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	603b      	str	r3, [r7, #0]
 80023ca:	687e      	ldr	r6, [r7, #4]
 80023cc:	466d      	mov	r5, sp
 80023ce:	f106 0410 	add.w	r4, r6, #16
 80023d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023da:	e894 0003 	ldmia.w	r4, {r0, r1}
 80023de:	e885 0003 	stmia.w	r5, {r0, r1}
 80023e2:	1d33      	adds	r3, r6, #4
 80023e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023e6:	6838      	ldr	r0, [r7, #0]
 80023e8:	f001 ff7a 	bl	80042e0 <USB_DevInit>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d005      	beq.n	80023fe <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2202      	movs	r2, #2
 80023f6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e00d      	b.n	800241a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2200      	movs	r2, #0
 8002402:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2201      	movs	r2, #1
 800240a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4618      	mov	r0, r3
 8002414:	f002 ffc2 	bl	800539c <USB_DevDisconnect>

  return HAL_OK;
 8002418:	2300      	movs	r3, #0
}
 800241a:	4618      	mov	r0, r3
 800241c:	3714      	adds	r7, #20
 800241e:	46bd      	mov	sp, r7
 8002420:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002422 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002422:	b580      	push	{r7, lr}
 8002424:	b084      	sub	sp, #16
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002436:	2b01      	cmp	r3, #1
 8002438:	d101      	bne.n	800243e <HAL_PCD_Start+0x1c>
 800243a:	2302      	movs	r3, #2
 800243c:	e020      	b.n	8002480 <HAL_PCD_Start+0x5e>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2201      	movs	r2, #1
 8002442:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800244a:	2b01      	cmp	r3, #1
 800244c:	d109      	bne.n	8002462 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002452:	2b01      	cmp	r3, #1
 8002454:	d005      	beq.n	8002462 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800245a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4618      	mov	r0, r3
 8002468:	f001 feee 	bl	8004248 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4618      	mov	r0, r3
 8002472:	f002 ff72 	bl	800535a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2200      	movs	r2, #0
 800247a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800247e:	2300      	movs	r3, #0
}
 8002480:	4618      	mov	r0, r3
 8002482:	3710      	adds	r7, #16
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}

08002488 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002488:	b590      	push	{r4, r7, lr}
 800248a:	b08d      	sub	sp, #52	; 0x34
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002496:	6a3b      	ldr	r3, [r7, #32]
 8002498:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4618      	mov	r0, r3
 80024a0:	f003 f830 	bl	8005504 <USB_GetMode>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	f040 839d 	bne.w	8002be6 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4618      	mov	r0, r3
 80024b2:	f002 ff94 	bl	80053de <USB_ReadInterrupts>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	f000 8393 	beq.w	8002be4 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4618      	mov	r0, r3
 80024c4:	f002 ff8b 	bl	80053de <USB_ReadInterrupts>
 80024c8:	4603      	mov	r3, r0
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d107      	bne.n	80024e2 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	695a      	ldr	r2, [r3, #20]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f002 0202 	and.w	r2, r2, #2
 80024e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4618      	mov	r0, r3
 80024e8:	f002 ff79 	bl	80053de <USB_ReadInterrupts>
 80024ec:	4603      	mov	r3, r0
 80024ee:	f003 0310 	and.w	r3, r3, #16
 80024f2:	2b10      	cmp	r3, #16
 80024f4:	d161      	bne.n	80025ba <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	699a      	ldr	r2, [r3, #24]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f022 0210 	bic.w	r2, r2, #16
 8002504:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002506:	6a3b      	ldr	r3, [r7, #32]
 8002508:	6a1b      	ldr	r3, [r3, #32]
 800250a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	f003 020f 	and.w	r2, r3, #15
 8002512:	4613      	mov	r3, r2
 8002514:	00db      	lsls	r3, r3, #3
 8002516:	1a9b      	subs	r3, r3, r2
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	4413      	add	r3, r2
 8002522:	3304      	adds	r3, #4
 8002524:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	0c5b      	lsrs	r3, r3, #17
 800252a:	f003 030f 	and.w	r3, r3, #15
 800252e:	2b02      	cmp	r3, #2
 8002530:	d124      	bne.n	800257c <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002532:	69ba      	ldr	r2, [r7, #24]
 8002534:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002538:	4013      	ands	r3, r2
 800253a:	2b00      	cmp	r3, #0
 800253c:	d035      	beq.n	80025aa <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002542:	69bb      	ldr	r3, [r7, #24]
 8002544:	091b      	lsrs	r3, r3, #4
 8002546:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002548:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800254c:	b29b      	uxth	r3, r3
 800254e:	461a      	mov	r2, r3
 8002550:	6a38      	ldr	r0, [r7, #32]
 8002552:	f002 fddf 	bl	8005114 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	68da      	ldr	r2, [r3, #12]
 800255a:	69bb      	ldr	r3, [r7, #24]
 800255c:	091b      	lsrs	r3, r3, #4
 800255e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002562:	441a      	add	r2, r3
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	699a      	ldr	r2, [r3, #24]
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	091b      	lsrs	r3, r3, #4
 8002570:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002574:	441a      	add	r2, r3
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	619a      	str	r2, [r3, #24]
 800257a:	e016      	b.n	80025aa <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800257c:	69bb      	ldr	r3, [r7, #24]
 800257e:	0c5b      	lsrs	r3, r3, #17
 8002580:	f003 030f 	and.w	r3, r3, #15
 8002584:	2b06      	cmp	r3, #6
 8002586:	d110      	bne.n	80025aa <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800258e:	2208      	movs	r2, #8
 8002590:	4619      	mov	r1, r3
 8002592:	6a38      	ldr	r0, [r7, #32]
 8002594:	f002 fdbe 	bl	8005114 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	699a      	ldr	r2, [r3, #24]
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	091b      	lsrs	r3, r3, #4
 80025a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025a4:	441a      	add	r2, r3
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	699a      	ldr	r2, [r3, #24]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f042 0210 	orr.w	r2, r2, #16
 80025b8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4618      	mov	r0, r3
 80025c0:	f002 ff0d 	bl	80053de <USB_ReadInterrupts>
 80025c4:	4603      	mov	r3, r0
 80025c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025ca:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80025ce:	d16e      	bne.n	80026ae <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80025d0:	2300      	movs	r3, #0
 80025d2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4618      	mov	r0, r3
 80025da:	f002 ff13 	bl	8005404 <USB_ReadDevAllOutEpInterrupt>
 80025de:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80025e0:	e062      	b.n	80026a8 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80025e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025e4:	f003 0301 	and.w	r3, r3, #1
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d057      	beq.n	800269c <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025f2:	b2d2      	uxtb	r2, r2
 80025f4:	4611      	mov	r1, r2
 80025f6:	4618      	mov	r0, r3
 80025f8:	f002 ff38 	bl	800546c <USB_ReadDevOutEPInterrupt>
 80025fc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	f003 0301 	and.w	r3, r3, #1
 8002604:	2b00      	cmp	r3, #0
 8002606:	d00c      	beq.n	8002622 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260a:	015a      	lsls	r2, r3, #5
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	4413      	add	r3, r2
 8002610:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002614:	461a      	mov	r2, r3
 8002616:	2301      	movs	r3, #1
 8002618:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800261a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f000 fddd 	bl	80031dc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	f003 0308 	and.w	r3, r3, #8
 8002628:	2b00      	cmp	r3, #0
 800262a:	d00c      	beq.n	8002646 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800262c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262e:	015a      	lsls	r2, r3, #5
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	4413      	add	r3, r2
 8002634:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002638:	461a      	mov	r2, r3
 800263a:	2308      	movs	r3, #8
 800263c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800263e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f000 fed7 	bl	80033f4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	f003 0310 	and.w	r3, r3, #16
 800264c:	2b00      	cmp	r3, #0
 800264e:	d008      	beq.n	8002662 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002652:	015a      	lsls	r2, r3, #5
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	4413      	add	r3, r2
 8002658:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800265c:	461a      	mov	r2, r3
 800265e:	2310      	movs	r3, #16
 8002660:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	f003 0320 	and.w	r3, r3, #32
 8002668:	2b00      	cmp	r3, #0
 800266a:	d008      	beq.n	800267e <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800266c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266e:	015a      	lsls	r2, r3, #5
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	4413      	add	r3, r2
 8002674:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002678:	461a      	mov	r2, r3
 800267a:	2320      	movs	r3, #32
 800267c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d009      	beq.n	800269c <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268a:	015a      	lsls	r2, r3, #5
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	4413      	add	r3, r2
 8002690:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002694:	461a      	mov	r2, r3
 8002696:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800269a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800269c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269e:	3301      	adds	r3, #1
 80026a0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80026a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026a4:	085b      	lsrs	r3, r3, #1
 80026a6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80026a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d199      	bne.n	80025e2 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4618      	mov	r0, r3
 80026b4:	f002 fe93 	bl	80053de <USB_ReadInterrupts>
 80026b8:	4603      	mov	r3, r0
 80026ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026be:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80026c2:	f040 80c0 	bne.w	8002846 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4618      	mov	r0, r3
 80026cc:	f002 feb4 	bl	8005438 <USB_ReadDevAllInEpInterrupt>
 80026d0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80026d2:	2300      	movs	r3, #0
 80026d4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80026d6:	e0b2      	b.n	800283e <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80026d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026da:	f003 0301 	and.w	r3, r3, #1
 80026de:	2b00      	cmp	r3, #0
 80026e0:	f000 80a7 	beq.w	8002832 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026ea:	b2d2      	uxtb	r2, r2
 80026ec:	4611      	mov	r1, r2
 80026ee:	4618      	mov	r0, r3
 80026f0:	f002 feda 	bl	80054a8 <USB_ReadDevInEPInterrupt>
 80026f4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	f003 0301 	and.w	r3, r3, #1
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d057      	beq.n	80027b0 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002702:	f003 030f 	and.w	r3, r3, #15
 8002706:	2201      	movs	r2, #1
 8002708:	fa02 f303 	lsl.w	r3, r2, r3
 800270c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002714:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	43db      	mvns	r3, r3
 800271a:	69f9      	ldr	r1, [r7, #28]
 800271c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002720:	4013      	ands	r3, r2
 8002722:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002726:	015a      	lsls	r2, r3, #5
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	4413      	add	r3, r2
 800272c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002730:	461a      	mov	r2, r3
 8002732:	2301      	movs	r3, #1
 8002734:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	691b      	ldr	r3, [r3, #16]
 800273a:	2b01      	cmp	r3, #1
 800273c:	d132      	bne.n	80027a4 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800273e:	6879      	ldr	r1, [r7, #4]
 8002740:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002742:	4613      	mov	r3, r2
 8002744:	00db      	lsls	r3, r3, #3
 8002746:	1a9b      	subs	r3, r3, r2
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	440b      	add	r3, r1
 800274c:	3348      	adds	r3, #72	; 0x48
 800274e:	6819      	ldr	r1, [r3, #0]
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002754:	4613      	mov	r3, r2
 8002756:	00db      	lsls	r3, r3, #3
 8002758:	1a9b      	subs	r3, r3, r2
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	4403      	add	r3, r0
 800275e:	3344      	adds	r3, #68	; 0x44
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4419      	add	r1, r3
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002768:	4613      	mov	r3, r2
 800276a:	00db      	lsls	r3, r3, #3
 800276c:	1a9b      	subs	r3, r3, r2
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	4403      	add	r3, r0
 8002772:	3348      	adds	r3, #72	; 0x48
 8002774:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002778:	2b00      	cmp	r3, #0
 800277a:	d113      	bne.n	80027a4 <HAL_PCD_IRQHandler+0x31c>
 800277c:	6879      	ldr	r1, [r7, #4]
 800277e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002780:	4613      	mov	r3, r2
 8002782:	00db      	lsls	r3, r3, #3
 8002784:	1a9b      	subs	r3, r3, r2
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	440b      	add	r3, r1
 800278a:	3350      	adds	r3, #80	; 0x50
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d108      	bne.n	80027a4 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6818      	ldr	r0, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800279c:	461a      	mov	r2, r3
 800279e:	2101      	movs	r1, #1
 80027a0:	f002 fee2 	bl	8005568 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80027a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	4619      	mov	r1, r3
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f004 ffb9 	bl	8007722 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	f003 0308 	and.w	r3, r3, #8
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d008      	beq.n	80027cc <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80027ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027bc:	015a      	lsls	r2, r3, #5
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	4413      	add	r3, r2
 80027c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027c6:	461a      	mov	r2, r3
 80027c8:	2308      	movs	r3, #8
 80027ca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	f003 0310 	and.w	r3, r3, #16
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d008      	beq.n	80027e8 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80027d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d8:	015a      	lsls	r2, r3, #5
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	4413      	add	r3, r2
 80027de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027e2:	461a      	mov	r2, r3
 80027e4:	2310      	movs	r3, #16
 80027e6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d008      	beq.n	8002804 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80027f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f4:	015a      	lsls	r2, r3, #5
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	4413      	add	r3, r2
 80027fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027fe:	461a      	mov	r2, r3
 8002800:	2340      	movs	r3, #64	; 0x40
 8002802:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	f003 0302 	and.w	r3, r3, #2
 800280a:	2b00      	cmp	r3, #0
 800280c:	d008      	beq.n	8002820 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800280e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002810:	015a      	lsls	r2, r3, #5
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	4413      	add	r3, r2
 8002816:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800281a:	461a      	mov	r2, r3
 800281c:	2302      	movs	r3, #2
 800281e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002826:	2b00      	cmp	r3, #0
 8002828:	d003      	beq.n	8002832 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800282a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f000 fc48 	bl	80030c2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002834:	3301      	adds	r3, #1
 8002836:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800283a:	085b      	lsrs	r3, r3, #1
 800283c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800283e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002840:	2b00      	cmp	r3, #0
 8002842:	f47f af49 	bne.w	80026d8 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4618      	mov	r0, r3
 800284c:	f002 fdc7 	bl	80053de <USB_ReadInterrupts>
 8002850:	4603      	mov	r3, r0
 8002852:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002856:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800285a:	d122      	bne.n	80028a2 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	69fa      	ldr	r2, [r7, #28]
 8002866:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800286a:	f023 0301 	bic.w	r3, r3, #1
 800286e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002876:	2b01      	cmp	r3, #1
 8002878:	d108      	bne.n	800288c <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2200      	movs	r2, #0
 800287e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002882:	2100      	movs	r1, #0
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f000 fe53 	bl	8003530 <HAL_PCDEx_LPM_Callback>
 800288a:	e002      	b.n	8002892 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f004 ffb5 	bl	80077fc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	695a      	ldr	r2, [r3, #20]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80028a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4618      	mov	r0, r3
 80028a8:	f002 fd99 	bl	80053de <USB_ReadInterrupts>
 80028ac:	4603      	mov	r3, r0
 80028ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028b6:	d112      	bne.n	80028de <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	f003 0301 	and.w	r3, r3, #1
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d102      	bne.n	80028ce <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	f004 ff71 	bl	80077b0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	695a      	ldr	r2, [r3, #20]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80028dc:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4618      	mov	r0, r3
 80028e4:	f002 fd7b 	bl	80053de <USB_ReadInterrupts>
 80028e8:	4603      	mov	r3, r0
 80028ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028f2:	f040 80c7 	bne.w	8002a84 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	69fa      	ldr	r2, [r7, #28]
 8002900:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002904:	f023 0301 	bic.w	r3, r3, #1
 8002908:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2110      	movs	r1, #16
 8002910:	4618      	mov	r0, r3
 8002912:	f001 fe49 	bl	80045a8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002916:	2300      	movs	r3, #0
 8002918:	62fb      	str	r3, [r7, #44]	; 0x2c
 800291a:	e056      	b.n	80029ca <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800291c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800291e:	015a      	lsls	r2, r3, #5
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	4413      	add	r3, r2
 8002924:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002928:	461a      	mov	r2, r3
 800292a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800292e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002932:	015a      	lsls	r2, r3, #5
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	4413      	add	r3, r2
 8002938:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002940:	0151      	lsls	r1, r2, #5
 8002942:	69fa      	ldr	r2, [r7, #28]
 8002944:	440a      	add	r2, r1
 8002946:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800294a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800294e:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002952:	015a      	lsls	r2, r3, #5
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	4413      	add	r3, r2
 8002958:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002960:	0151      	lsls	r1, r2, #5
 8002962:	69fa      	ldr	r2, [r7, #28]
 8002964:	440a      	add	r2, r1
 8002966:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800296a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800296e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002972:	015a      	lsls	r2, r3, #5
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	4413      	add	r3, r2
 8002978:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800297c:	461a      	mov	r2, r3
 800297e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002982:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002986:	015a      	lsls	r2, r3, #5
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	4413      	add	r3, r2
 800298c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002994:	0151      	lsls	r1, r2, #5
 8002996:	69fa      	ldr	r2, [r7, #28]
 8002998:	440a      	add	r2, r1
 800299a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800299e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80029a2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80029a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029a6:	015a      	lsls	r2, r3, #5
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	4413      	add	r3, r2
 80029ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029b4:	0151      	lsls	r1, r2, #5
 80029b6:	69fa      	ldr	r2, [r7, #28]
 80029b8:	440a      	add	r2, r1
 80029ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80029be:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80029c2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029c6:	3301      	adds	r3, #1
 80029c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d3a3      	bcc.n	800291c <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029da:	69db      	ldr	r3, [r3, #28]
 80029dc:	69fa      	ldr	r2, [r7, #28]
 80029de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029e2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80029e6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d016      	beq.n	8002a1e <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029fa:	69fa      	ldr	r2, [r7, #28]
 80029fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a00:	f043 030b 	orr.w	r3, r3, #11
 8002a04:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a10:	69fa      	ldr	r2, [r7, #28]
 8002a12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a16:	f043 030b 	orr.w	r3, r3, #11
 8002a1a:	6453      	str	r3, [r2, #68]	; 0x44
 8002a1c:	e015      	b.n	8002a4a <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a24:	695b      	ldr	r3, [r3, #20]
 8002a26:	69fa      	ldr	r2, [r7, #28]
 8002a28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a2c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002a30:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002a34:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a3c:	691b      	ldr	r3, [r3, #16]
 8002a3e:	69fa      	ldr	r2, [r7, #28]
 8002a40:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a44:	f043 030b 	orr.w	r3, r3, #11
 8002a48:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	69fa      	ldr	r2, [r7, #28]
 8002a54:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a58:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002a5c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6818      	ldr	r0, [r3, #0]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002a6e:	461a      	mov	r2, r3
 8002a70:	f002 fd7a 	bl	8005568 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	695a      	ldr	r2, [r3, #20]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002a82:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f002 fca8 	bl	80053de <USB_ReadInterrupts>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a98:	d124      	bne.n	8002ae4 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f002 fd3e 	bl	8005520 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f001 fdde 	bl	800466a <USB_GetDevSpeed>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681c      	ldr	r4, [r3, #0]
 8002aba:	f001 f969 	bl	8003d90 <HAL_RCC_GetHCLKFreq>
 8002abe:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	4620      	mov	r0, r4
 8002aca:	f001 fb1b 	bl	8004104 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f004 fe4f 	bl	8007772 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	695a      	ldr	r2, [r3, #20]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002ae2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f002 fc78 	bl	80053de <USB_ReadInterrupts>
 8002aee:	4603      	mov	r3, r0
 8002af0:	f003 0308 	and.w	r3, r3, #8
 8002af4:	2b08      	cmp	r3, #8
 8002af6:	d10a      	bne.n	8002b0e <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f004 fe2c 	bl	8007756 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	695a      	ldr	r2, [r3, #20]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f002 0208 	and.w	r2, r2, #8
 8002b0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4618      	mov	r0, r3
 8002b14:	f002 fc63 	bl	80053de <USB_ReadInterrupts>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b22:	d10f      	bne.n	8002b44 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002b24:	2300      	movs	r3, #0
 8002b26:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f004 fe84 	bl	800783c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	695a      	ldr	r2, [r3, #20]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002b42:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f002 fc48 	bl	80053de <USB_ReadInterrupts>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b54:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b58:	d10f      	bne.n	8002b7a <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	4619      	mov	r1, r3
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f004 fe57 	bl	8007818 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	695a      	ldr	r2, [r3, #20]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002b78:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f002 fc2d 	bl	80053de <USB_ReadInterrupts>
 8002b84:	4603      	mov	r3, r0
 8002b86:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002b8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b8e:	d10a      	bne.n	8002ba6 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f004 fe65 	bl	8007860 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	695a      	ldr	r2, [r3, #20]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002ba4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4618      	mov	r0, r3
 8002bac:	f002 fc17 	bl	80053de <USB_ReadInterrupts>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	f003 0304 	and.w	r3, r3, #4
 8002bb6:	2b04      	cmp	r3, #4
 8002bb8:	d115      	bne.n	8002be6 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	f003 0304 	and.w	r3, r3, #4
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d002      	beq.n	8002bd2 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f004 fe55 	bl	800787c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	6859      	ldr	r1, [r3, #4]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	69ba      	ldr	r2, [r7, #24]
 8002bde:	430a      	orrs	r2, r1
 8002be0:	605a      	str	r2, [r3, #4]
 8002be2:	e000      	b.n	8002be6 <HAL_PCD_IRQHandler+0x75e>
      return;
 8002be4:	bf00      	nop
    }
  }
}
 8002be6:	3734      	adds	r7, #52	; 0x34
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd90      	pop	{r4, r7, pc}

08002bec <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	460b      	mov	r3, r1
 8002bf6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d101      	bne.n	8002c06 <HAL_PCD_SetAddress+0x1a>
 8002c02:	2302      	movs	r3, #2
 8002c04:	e013      	b.n	8002c2e <HAL_PCD_SetAddress+0x42>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2201      	movs	r2, #1
 8002c0a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	78fa      	ldrb	r2, [r7, #3]
 8002c12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	78fa      	ldrb	r2, [r7, #3]
 8002c1c:	4611      	mov	r1, r2
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f002 fb75 	bl	800530e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2200      	movs	r2, #0
 8002c28:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002c2c:	2300      	movs	r3, #0
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3708      	adds	r7, #8
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}

08002c36 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002c36:	b580      	push	{r7, lr}
 8002c38:	b084      	sub	sp, #16
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]
 8002c3e:	4608      	mov	r0, r1
 8002c40:	4611      	mov	r1, r2
 8002c42:	461a      	mov	r2, r3
 8002c44:	4603      	mov	r3, r0
 8002c46:	70fb      	strb	r3, [r7, #3]
 8002c48:	460b      	mov	r3, r1
 8002c4a:	803b      	strh	r3, [r7, #0]
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002c50:	2300      	movs	r3, #0
 8002c52:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	da0f      	bge.n	8002c7c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c5c:	78fb      	ldrb	r3, [r7, #3]
 8002c5e:	f003 020f 	and.w	r2, r3, #15
 8002c62:	4613      	mov	r3, r2
 8002c64:	00db      	lsls	r3, r3, #3
 8002c66:	1a9b      	subs	r3, r3, r2
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	3338      	adds	r3, #56	; 0x38
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	4413      	add	r3, r2
 8002c70:	3304      	adds	r3, #4
 8002c72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2201      	movs	r2, #1
 8002c78:	705a      	strb	r2, [r3, #1]
 8002c7a:	e00f      	b.n	8002c9c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c7c:	78fb      	ldrb	r3, [r7, #3]
 8002c7e:	f003 020f 	and.w	r2, r3, #15
 8002c82:	4613      	mov	r3, r2
 8002c84:	00db      	lsls	r3, r3, #3
 8002c86:	1a9b      	subs	r3, r3, r2
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	4413      	add	r3, r2
 8002c92:	3304      	adds	r3, #4
 8002c94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002c9c:	78fb      	ldrb	r3, [r7, #3]
 8002c9e:	f003 030f 	and.w	r3, r3, #15
 8002ca2:	b2da      	uxtb	r2, r3
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002ca8:	883a      	ldrh	r2, [r7, #0]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	78ba      	ldrb	r2, [r7, #2]
 8002cb2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	785b      	ldrb	r3, [r3, #1]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d004      	beq.n	8002cc6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	b29a      	uxth	r2, r3
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002cc6:	78bb      	ldrb	r3, [r7, #2]
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d102      	bne.n	8002cd2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d101      	bne.n	8002ce0 <HAL_PCD_EP_Open+0xaa>
 8002cdc:	2302      	movs	r3, #2
 8002cde:	e00e      	b.n	8002cfe <HAL_PCD_EP_Open+0xc8>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	68f9      	ldr	r1, [r7, #12]
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f001 fce0 	bl	80046b4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002cfc:	7afb      	ldrb	r3, [r7, #11]
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3710      	adds	r7, #16
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}

08002d06 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d06:	b580      	push	{r7, lr}
 8002d08:	b084      	sub	sp, #16
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	6078      	str	r0, [r7, #4]
 8002d0e:	460b      	mov	r3, r1
 8002d10:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d12:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	da0f      	bge.n	8002d3a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d1a:	78fb      	ldrb	r3, [r7, #3]
 8002d1c:	f003 020f 	and.w	r2, r3, #15
 8002d20:	4613      	mov	r3, r2
 8002d22:	00db      	lsls	r3, r3, #3
 8002d24:	1a9b      	subs	r3, r3, r2
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	3338      	adds	r3, #56	; 0x38
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	4413      	add	r3, r2
 8002d2e:	3304      	adds	r3, #4
 8002d30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2201      	movs	r2, #1
 8002d36:	705a      	strb	r2, [r3, #1]
 8002d38:	e00f      	b.n	8002d5a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d3a:	78fb      	ldrb	r3, [r7, #3]
 8002d3c:	f003 020f 	and.w	r2, r3, #15
 8002d40:	4613      	mov	r3, r2
 8002d42:	00db      	lsls	r3, r3, #3
 8002d44:	1a9b      	subs	r3, r3, r2
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	4413      	add	r3, r2
 8002d50:	3304      	adds	r3, #4
 8002d52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2200      	movs	r2, #0
 8002d58:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002d5a:	78fb      	ldrb	r3, [r7, #3]
 8002d5c:	f003 030f 	and.w	r3, r3, #15
 8002d60:	b2da      	uxtb	r2, r3
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d101      	bne.n	8002d74 <HAL_PCD_EP_Close+0x6e>
 8002d70:	2302      	movs	r3, #2
 8002d72:	e00e      	b.n	8002d92 <HAL_PCD_EP_Close+0x8c>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	68f9      	ldr	r1, [r7, #12]
 8002d82:	4618      	mov	r0, r3
 8002d84:	f001 fd1e 	bl	80047c4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3710      	adds	r7, #16
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}

08002d9a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002d9a:	b580      	push	{r7, lr}
 8002d9c:	b086      	sub	sp, #24
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	60f8      	str	r0, [r7, #12]
 8002da2:	607a      	str	r2, [r7, #4]
 8002da4:	603b      	str	r3, [r7, #0]
 8002da6:	460b      	mov	r3, r1
 8002da8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002daa:	7afb      	ldrb	r3, [r7, #11]
 8002dac:	f003 020f 	and.w	r2, r3, #15
 8002db0:	4613      	mov	r3, r2
 8002db2:	00db      	lsls	r3, r3, #3
 8002db4:	1a9b      	subs	r3, r3, r2
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002dbc:	68fa      	ldr	r2, [r7, #12]
 8002dbe:	4413      	add	r3, r2
 8002dc0:	3304      	adds	r3, #4
 8002dc2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	683a      	ldr	r2, [r7, #0]
 8002dce:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ddc:	7afb      	ldrb	r3, [r7, #11]
 8002dde:	f003 030f 	and.w	r3, r3, #15
 8002de2:	b2da      	uxtb	r2, r3
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	691b      	ldr	r3, [r3, #16]
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d102      	bne.n	8002df6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002df6:	7afb      	ldrb	r3, [r7, #11]
 8002df8:	f003 030f 	and.w	r3, r3, #15
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d109      	bne.n	8002e14 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6818      	ldr	r0, [r3, #0]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	691b      	ldr	r3, [r3, #16]
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	6979      	ldr	r1, [r7, #20]
 8002e0e:	f001 fff9 	bl	8004e04 <USB_EP0StartXfer>
 8002e12:	e008      	b.n	8002e26 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6818      	ldr	r0, [r3, #0]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	691b      	ldr	r3, [r3, #16]
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	461a      	mov	r2, r3
 8002e20:	6979      	ldr	r1, [r7, #20]
 8002e22:	f001 fdab 	bl	800497c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002e26:	2300      	movs	r3, #0
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3718      	adds	r7, #24
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	460b      	mov	r3, r1
 8002e3a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002e3c:	78fb      	ldrb	r3, [r7, #3]
 8002e3e:	f003 020f 	and.w	r2, r3, #15
 8002e42:	6879      	ldr	r1, [r7, #4]
 8002e44:	4613      	mov	r3, r2
 8002e46:	00db      	lsls	r3, r3, #3
 8002e48:	1a9b      	subs	r3, r3, r2
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	440b      	add	r3, r1
 8002e4e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002e52:	681b      	ldr	r3, [r3, #0]
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr

08002e60 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b086      	sub	sp, #24
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	607a      	str	r2, [r7, #4]
 8002e6a:	603b      	str	r3, [r7, #0]
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e70:	7afb      	ldrb	r3, [r7, #11]
 8002e72:	f003 020f 	and.w	r2, r3, #15
 8002e76:	4613      	mov	r3, r2
 8002e78:	00db      	lsls	r3, r3, #3
 8002e7a:	1a9b      	subs	r3, r3, r2
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	3338      	adds	r3, #56	; 0x38
 8002e80:	68fa      	ldr	r2, [r7, #12]
 8002e82:	4413      	add	r3, r2
 8002e84:	3304      	adds	r3, #4
 8002e86:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	683a      	ldr	r2, [r7, #0]
 8002e92:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	2200      	movs	r2, #0
 8002e98:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ea0:	7afb      	ldrb	r3, [r7, #11]
 8002ea2:	f003 030f 	and.w	r3, r3, #15
 8002ea6:	b2da      	uxtb	r2, r3
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	691b      	ldr	r3, [r3, #16]
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d102      	bne.n	8002eba <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002eba:	7afb      	ldrb	r3, [r7, #11]
 8002ebc:	f003 030f 	and.w	r3, r3, #15
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d109      	bne.n	8002ed8 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6818      	ldr	r0, [r3, #0]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	691b      	ldr	r3, [r3, #16]
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	461a      	mov	r2, r3
 8002ed0:	6979      	ldr	r1, [r7, #20]
 8002ed2:	f001 ff97 	bl	8004e04 <USB_EP0StartXfer>
 8002ed6:	e008      	b.n	8002eea <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6818      	ldr	r0, [r3, #0]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	691b      	ldr	r3, [r3, #16]
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	6979      	ldr	r1, [r7, #20]
 8002ee6:	f001 fd49 	bl	800497c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002eea:	2300      	movs	r3, #0
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3718      	adds	r7, #24
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}

08002ef4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	460b      	mov	r3, r1
 8002efe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002f00:	78fb      	ldrb	r3, [r7, #3]
 8002f02:	f003 020f 	and.w	r2, r3, #15
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d901      	bls.n	8002f12 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e050      	b.n	8002fb4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f12:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	da0f      	bge.n	8002f3a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f1a:	78fb      	ldrb	r3, [r7, #3]
 8002f1c:	f003 020f 	and.w	r2, r3, #15
 8002f20:	4613      	mov	r3, r2
 8002f22:	00db      	lsls	r3, r3, #3
 8002f24:	1a9b      	subs	r3, r3, r2
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	3338      	adds	r3, #56	; 0x38
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	4413      	add	r3, r2
 8002f2e:	3304      	adds	r3, #4
 8002f30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2201      	movs	r2, #1
 8002f36:	705a      	strb	r2, [r3, #1]
 8002f38:	e00d      	b.n	8002f56 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002f3a:	78fa      	ldrb	r2, [r7, #3]
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	00db      	lsls	r3, r3, #3
 8002f40:	1a9b      	subs	r3, r3, r2
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	4413      	add	r3, r2
 8002f4c:	3304      	adds	r3, #4
 8002f4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2200      	movs	r2, #0
 8002f54:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2201      	movs	r2, #1
 8002f5a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f5c:	78fb      	ldrb	r3, [r7, #3]
 8002f5e:	f003 030f 	and.w	r3, r3, #15
 8002f62:	b2da      	uxtb	r2, r3
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d101      	bne.n	8002f76 <HAL_PCD_EP_SetStall+0x82>
 8002f72:	2302      	movs	r3, #2
 8002f74:	e01e      	b.n	8002fb4 <HAL_PCD_EP_SetStall+0xc0>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2201      	movs	r2, #1
 8002f7a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	68f9      	ldr	r1, [r7, #12]
 8002f84:	4618      	mov	r0, r3
 8002f86:	f002 f8ee 	bl	8005166 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f8a:	78fb      	ldrb	r3, [r7, #3]
 8002f8c:	f003 030f 	and.w	r3, r3, #15
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d10a      	bne.n	8002faa <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6818      	ldr	r0, [r3, #0]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	691b      	ldr	r3, [r3, #16]
 8002f9c:	b2d9      	uxtb	r1, r3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	f002 fadf 	bl	8005568 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002fb2:	2300      	movs	r3, #0
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3710      	adds	r7, #16
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	460b      	mov	r3, r1
 8002fc6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002fc8:	78fb      	ldrb	r3, [r7, #3]
 8002fca:	f003 020f 	and.w	r2, r3, #15
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d901      	bls.n	8002fda <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e042      	b.n	8003060 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002fda:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	da0f      	bge.n	8003002 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fe2:	78fb      	ldrb	r3, [r7, #3]
 8002fe4:	f003 020f 	and.w	r2, r3, #15
 8002fe8:	4613      	mov	r3, r2
 8002fea:	00db      	lsls	r3, r3, #3
 8002fec:	1a9b      	subs	r3, r3, r2
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	3338      	adds	r3, #56	; 0x38
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	4413      	add	r3, r2
 8002ff6:	3304      	adds	r3, #4
 8002ff8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	705a      	strb	r2, [r3, #1]
 8003000:	e00f      	b.n	8003022 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003002:	78fb      	ldrb	r3, [r7, #3]
 8003004:	f003 020f 	and.w	r2, r3, #15
 8003008:	4613      	mov	r3, r2
 800300a:	00db      	lsls	r3, r3, #3
 800300c:	1a9b      	subs	r3, r3, r2
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	4413      	add	r3, r2
 8003018:	3304      	adds	r3, #4
 800301a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2200      	movs	r2, #0
 8003020:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2200      	movs	r2, #0
 8003026:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003028:	78fb      	ldrb	r3, [r7, #3]
 800302a:	f003 030f 	and.w	r3, r3, #15
 800302e:	b2da      	uxtb	r2, r3
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800303a:	2b01      	cmp	r3, #1
 800303c:	d101      	bne.n	8003042 <HAL_PCD_EP_ClrStall+0x86>
 800303e:	2302      	movs	r3, #2
 8003040:	e00e      	b.n	8003060 <HAL_PCD_EP_ClrStall+0xa4>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2201      	movs	r2, #1
 8003046:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	68f9      	ldr	r1, [r7, #12]
 8003050:	4618      	mov	r0, r3
 8003052:	f002 f8f6 	bl	8005242 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800305e:	2300      	movs	r3, #0
}
 8003060:	4618      	mov	r0, r3
 8003062:	3710      	adds	r7, #16
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}

08003068 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	460b      	mov	r3, r1
 8003072:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800307a:	2b01      	cmp	r3, #1
 800307c:	d101      	bne.n	8003082 <HAL_PCD_EP_Flush+0x1a>
 800307e:	2302      	movs	r3, #2
 8003080:	e01b      	b.n	80030ba <HAL_PCD_EP_Flush+0x52>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2201      	movs	r2, #1
 8003086:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 800308a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800308e:	2b00      	cmp	r3, #0
 8003090:	da09      	bge.n	80030a6 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	78fb      	ldrb	r3, [r7, #3]
 8003098:	f003 030f 	and.w	r3, r3, #15
 800309c:	4619      	mov	r1, r3
 800309e:	4610      	mov	r0, r2
 80030a0:	f001 fa82 	bl	80045a8 <USB_FlushTxFifo>
 80030a4:	e004      	b.n	80030b0 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4618      	mov	r0, r3
 80030ac:	f001 faa2 	bl	80045f4 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80030b8:	2300      	movs	r3, #0
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3708      	adds	r7, #8
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}

080030c2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80030c2:	b580      	push	{r7, lr}
 80030c4:	b08a      	sub	sp, #40	; 0x28
 80030c6:	af02      	add	r7, sp, #8
 80030c8:	6078      	str	r0, [r7, #4]
 80030ca:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80030d6:	683a      	ldr	r2, [r7, #0]
 80030d8:	4613      	mov	r3, r2
 80030da:	00db      	lsls	r3, r3, #3
 80030dc:	1a9b      	subs	r3, r3, r2
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	3338      	adds	r3, #56	; 0x38
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	4413      	add	r3, r2
 80030e6:	3304      	adds	r3, #4
 80030e8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	699a      	ldr	r2, [r3, #24]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	695b      	ldr	r3, [r3, #20]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d901      	bls.n	80030fa <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e06c      	b.n	80031d4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	695a      	ldr	r2, [r3, #20]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	699b      	ldr	r3, [r3, #24]
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	69fa      	ldr	r2, [r7, #28]
 800310c:	429a      	cmp	r2, r3
 800310e:	d902      	bls.n	8003116 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	3303      	adds	r3, #3
 800311a:	089b      	lsrs	r3, r3, #2
 800311c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800311e:	e02b      	b.n	8003178 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	695a      	ldr	r2, [r3, #20]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	699b      	ldr	r3, [r3, #24]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	69fa      	ldr	r2, [r7, #28]
 8003132:	429a      	cmp	r2, r3
 8003134:	d902      	bls.n	800313c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	3303      	adds	r3, #3
 8003140:	089b      	lsrs	r3, r3, #2
 8003142:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	68d9      	ldr	r1, [r3, #12]
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	b2da      	uxtb	r2, r3
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003154:	b2db      	uxtb	r3, r3
 8003156:	9300      	str	r3, [sp, #0]
 8003158:	4603      	mov	r3, r0
 800315a:	6978      	ldr	r0, [r7, #20]
 800315c:	f001 ffa5 	bl	80050aa <USB_WritePacket>

    ep->xfer_buff  += len;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	68da      	ldr	r2, [r3, #12]
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	441a      	add	r2, r3
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	699a      	ldr	r2, [r3, #24]
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	441a      	add	r2, r3
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	015a      	lsls	r2, r3, #5
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	4413      	add	r3, r2
 8003180:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003184:	699b      	ldr	r3, [r3, #24]
 8003186:	b29b      	uxth	r3, r3
 8003188:	69ba      	ldr	r2, [r7, #24]
 800318a:	429a      	cmp	r2, r3
 800318c:	d809      	bhi.n	80031a2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	699a      	ldr	r2, [r3, #24]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003196:	429a      	cmp	r2, r3
 8003198:	d203      	bcs.n	80031a2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	695b      	ldr	r3, [r3, #20]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d1be      	bne.n	8003120 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	695a      	ldr	r2, [r3, #20]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	699b      	ldr	r3, [r3, #24]
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d811      	bhi.n	80031d2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	f003 030f 	and.w	r3, r3, #15
 80031b4:	2201      	movs	r2, #1
 80031b6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ba:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	43db      	mvns	r3, r3
 80031c8:	6939      	ldr	r1, [r7, #16]
 80031ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80031ce:	4013      	ands	r3, r2
 80031d0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80031d2:	2300      	movs	r3, #0
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3720      	adds	r7, #32
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}

080031dc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b086      	sub	sp, #24
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	333c      	adds	r3, #60	; 0x3c
 80031f4:	3304      	adds	r3, #4
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	015a      	lsls	r2, r3, #5
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	4413      	add	r3, r2
 8003202:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	2b01      	cmp	r3, #1
 8003210:	f040 80a0 	bne.w	8003354 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	f003 0308 	and.w	r3, r3, #8
 800321a:	2b00      	cmp	r3, #0
 800321c:	d015      	beq.n	800324a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	4a72      	ldr	r2, [pc, #456]	; (80033ec <PCD_EP_OutXfrComplete_int+0x210>)
 8003222:	4293      	cmp	r3, r2
 8003224:	f240 80dd 	bls.w	80033e2 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800322e:	2b00      	cmp	r3, #0
 8003230:	f000 80d7 	beq.w	80033e2 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	015a      	lsls	r2, r3, #5
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	4413      	add	r3, r2
 800323c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003240:	461a      	mov	r2, r3
 8003242:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003246:	6093      	str	r3, [r2, #8]
 8003248:	e0cb      	b.n	80033e2 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	f003 0320 	and.w	r3, r3, #32
 8003250:	2b00      	cmp	r3, #0
 8003252:	d009      	beq.n	8003268 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	015a      	lsls	r2, r3, #5
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	4413      	add	r3, r2
 800325c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003260:	461a      	mov	r2, r3
 8003262:	2320      	movs	r3, #32
 8003264:	6093      	str	r3, [r2, #8]
 8003266:	e0bc      	b.n	80033e2 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800326e:	2b00      	cmp	r3, #0
 8003270:	f040 80b7 	bne.w	80033e2 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	4a5d      	ldr	r2, [pc, #372]	; (80033ec <PCD_EP_OutXfrComplete_int+0x210>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d90f      	bls.n	800329c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003282:	2b00      	cmp	r3, #0
 8003284:	d00a      	beq.n	800329c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	015a      	lsls	r2, r3, #5
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	4413      	add	r3, r2
 800328e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003292:	461a      	mov	r2, r3
 8003294:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003298:	6093      	str	r3, [r2, #8]
 800329a:	e0a2      	b.n	80033e2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800329c:	6879      	ldr	r1, [r7, #4]
 800329e:	683a      	ldr	r2, [r7, #0]
 80032a0:	4613      	mov	r3, r2
 80032a2:	00db      	lsls	r3, r3, #3
 80032a4:	1a9b      	subs	r3, r3, r2
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	440b      	add	r3, r1
 80032aa:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80032ae:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	0159      	lsls	r1, r3, #5
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	440b      	add	r3, r1
 80032b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032bc:	691b      	ldr	r3, [r3, #16]
 80032be:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80032c2:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	683a      	ldr	r2, [r7, #0]
 80032c8:	4613      	mov	r3, r2
 80032ca:	00db      	lsls	r3, r3, #3
 80032cc:	1a9b      	subs	r3, r3, r2
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	4403      	add	r3, r0
 80032d2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80032d6:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80032d8:	6879      	ldr	r1, [r7, #4]
 80032da:	683a      	ldr	r2, [r7, #0]
 80032dc:	4613      	mov	r3, r2
 80032de:	00db      	lsls	r3, r3, #3
 80032e0:	1a9b      	subs	r3, r3, r2
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	440b      	add	r3, r1
 80032e6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80032ea:	6819      	ldr	r1, [r3, #0]
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	683a      	ldr	r2, [r7, #0]
 80032f0:	4613      	mov	r3, r2
 80032f2:	00db      	lsls	r3, r3, #3
 80032f4:	1a9b      	subs	r3, r3, r2
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	4403      	add	r3, r0
 80032fa:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4419      	add	r1, r3
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	683a      	ldr	r2, [r7, #0]
 8003306:	4613      	mov	r3, r2
 8003308:	00db      	lsls	r3, r3, #3
 800330a:	1a9b      	subs	r3, r3, r2
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	4403      	add	r3, r0
 8003310:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003314:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d114      	bne.n	8003346 <PCD_EP_OutXfrComplete_int+0x16a>
 800331c:	6879      	ldr	r1, [r7, #4]
 800331e:	683a      	ldr	r2, [r7, #0]
 8003320:	4613      	mov	r3, r2
 8003322:	00db      	lsls	r3, r3, #3
 8003324:	1a9b      	subs	r3, r3, r2
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	440b      	add	r3, r1
 800332a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d108      	bne.n	8003346 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6818      	ldr	r0, [r3, #0]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800333e:	461a      	mov	r2, r3
 8003340:	2101      	movs	r1, #1
 8003342:	f002 f911 	bl	8005568 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	b2db      	uxtb	r3, r3
 800334a:	4619      	mov	r1, r3
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f004 f9cd 	bl	80076ec <HAL_PCD_DataOutStageCallback>
 8003352:	e046      	b.n	80033e2 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	4a26      	ldr	r2, [pc, #152]	; (80033f0 <PCD_EP_OutXfrComplete_int+0x214>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d124      	bne.n	80033a6 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d00a      	beq.n	800337c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	015a      	lsls	r2, r3, #5
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	4413      	add	r3, r2
 800336e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003372:	461a      	mov	r2, r3
 8003374:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003378:	6093      	str	r3, [r2, #8]
 800337a:	e032      	b.n	80033e2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	f003 0320 	and.w	r3, r3, #32
 8003382:	2b00      	cmp	r3, #0
 8003384:	d008      	beq.n	8003398 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	015a      	lsls	r2, r3, #5
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	4413      	add	r3, r2
 800338e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003392:	461a      	mov	r2, r3
 8003394:	2320      	movs	r3, #32
 8003396:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	b2db      	uxtb	r3, r3
 800339c:	4619      	mov	r1, r3
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f004 f9a4 	bl	80076ec <HAL_PCD_DataOutStageCallback>
 80033a4:	e01d      	b.n	80033e2 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d114      	bne.n	80033d6 <PCD_EP_OutXfrComplete_int+0x1fa>
 80033ac:	6879      	ldr	r1, [r7, #4]
 80033ae:	683a      	ldr	r2, [r7, #0]
 80033b0:	4613      	mov	r3, r2
 80033b2:	00db      	lsls	r3, r3, #3
 80033b4:	1a9b      	subs	r3, r3, r2
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	440b      	add	r3, r1
 80033ba:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d108      	bne.n	80033d6 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6818      	ldr	r0, [r3, #0]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80033ce:	461a      	mov	r2, r3
 80033d0:	2100      	movs	r1, #0
 80033d2:	f002 f8c9 	bl	8005568 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	4619      	mov	r1, r3
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f004 f985 	bl	80076ec <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80033e2:	2300      	movs	r3, #0
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3718      	adds	r7, #24
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	4f54300a 	.word	0x4f54300a
 80033f0:	4f54310a 	.word	0x4f54310a

080033f4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b086      	sub	sp, #24
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	333c      	adds	r3, #60	; 0x3c
 800340c:	3304      	adds	r3, #4
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	015a      	lsls	r2, r3, #5
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	4413      	add	r3, r2
 800341a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	4a15      	ldr	r2, [pc, #84]	; (800347c <PCD_EP_OutSetupPacket_int+0x88>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d90e      	bls.n	8003448 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003430:	2b00      	cmp	r3, #0
 8003432:	d009      	beq.n	8003448 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	015a      	lsls	r2, r3, #5
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	4413      	add	r3, r2
 800343c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003440:	461a      	mov	r2, r3
 8003442:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003446:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f004 f93d 	bl	80076c8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	4a0a      	ldr	r2, [pc, #40]	; (800347c <PCD_EP_OutSetupPacket_int+0x88>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d90c      	bls.n	8003470 <PCD_EP_OutSetupPacket_int+0x7c>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	691b      	ldr	r3, [r3, #16]
 800345a:	2b01      	cmp	r3, #1
 800345c:	d108      	bne.n	8003470 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6818      	ldr	r0, [r3, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003468:	461a      	mov	r2, r3
 800346a:	2101      	movs	r1, #1
 800346c:	f002 f87c 	bl	8005568 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003470:	2300      	movs	r3, #0
}
 8003472:	4618      	mov	r0, r3
 8003474:	3718      	adds	r7, #24
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	4f54300a 	.word	0x4f54300a

08003480 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003480:	b480      	push	{r7}
 8003482:	b085      	sub	sp, #20
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	460b      	mov	r3, r1
 800348a:	70fb      	strb	r3, [r7, #3]
 800348c:	4613      	mov	r3, r2
 800348e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003496:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003498:	78fb      	ldrb	r3, [r7, #3]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d107      	bne.n	80034ae <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800349e:	883b      	ldrh	r3, [r7, #0]
 80034a0:	0419      	lsls	r1, r3, #16
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	68ba      	ldr	r2, [r7, #8]
 80034a8:	430a      	orrs	r2, r1
 80034aa:	629a      	str	r2, [r3, #40]	; 0x28
 80034ac:	e028      	b.n	8003500 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b4:	0c1b      	lsrs	r3, r3, #16
 80034b6:	68ba      	ldr	r2, [r7, #8]
 80034b8:	4413      	add	r3, r2
 80034ba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80034bc:	2300      	movs	r3, #0
 80034be:	73fb      	strb	r3, [r7, #15]
 80034c0:	e00d      	b.n	80034de <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	7bfb      	ldrb	r3, [r7, #15]
 80034c8:	3340      	adds	r3, #64	; 0x40
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	4413      	add	r3, r2
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	0c1b      	lsrs	r3, r3, #16
 80034d2:	68ba      	ldr	r2, [r7, #8]
 80034d4:	4413      	add	r3, r2
 80034d6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80034d8:	7bfb      	ldrb	r3, [r7, #15]
 80034da:	3301      	adds	r3, #1
 80034dc:	73fb      	strb	r3, [r7, #15]
 80034de:	7bfa      	ldrb	r2, [r7, #15]
 80034e0:	78fb      	ldrb	r3, [r7, #3]
 80034e2:	3b01      	subs	r3, #1
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d3ec      	bcc.n	80034c2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80034e8:	883b      	ldrh	r3, [r7, #0]
 80034ea:	0418      	lsls	r0, r3, #16
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6819      	ldr	r1, [r3, #0]
 80034f0:	78fb      	ldrb	r3, [r7, #3]
 80034f2:	3b01      	subs	r3, #1
 80034f4:	68ba      	ldr	r2, [r7, #8]
 80034f6:	4302      	orrs	r2, r0
 80034f8:	3340      	adds	r3, #64	; 0x40
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	440b      	add	r3, r1
 80034fe:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003500:	2300      	movs	r3, #0
}
 8003502:	4618      	mov	r0, r3
 8003504:	3714      	adds	r7, #20
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr

0800350e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800350e:	b480      	push	{r7}
 8003510:	b083      	sub	sp, #12
 8003512:	af00      	add	r7, sp, #0
 8003514:	6078      	str	r0, [r7, #4]
 8003516:	460b      	mov	r3, r1
 8003518:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	887a      	ldrh	r2, [r7, #2]
 8003520:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003522:	2300      	movs	r3, #0
}
 8003524:	4618      	mov	r0, r3
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr

08003530 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	460b      	mov	r3, r1
 800353a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800353c:	bf00      	nop
 800353e:	370c      	adds	r7, #12
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr

08003548 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b086      	sub	sp, #24
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d101      	bne.n	800355a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e267      	b.n	8003a2a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0301 	and.w	r3, r3, #1
 8003562:	2b00      	cmp	r3, #0
 8003564:	d075      	beq.n	8003652 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003566:	4b88      	ldr	r3, [pc, #544]	; (8003788 <HAL_RCC_OscConfig+0x240>)
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	f003 030c 	and.w	r3, r3, #12
 800356e:	2b04      	cmp	r3, #4
 8003570:	d00c      	beq.n	800358c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003572:	4b85      	ldr	r3, [pc, #532]	; (8003788 <HAL_RCC_OscConfig+0x240>)
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800357a:	2b08      	cmp	r3, #8
 800357c:	d112      	bne.n	80035a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800357e:	4b82      	ldr	r3, [pc, #520]	; (8003788 <HAL_RCC_OscConfig+0x240>)
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003586:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800358a:	d10b      	bne.n	80035a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800358c:	4b7e      	ldr	r3, [pc, #504]	; (8003788 <HAL_RCC_OscConfig+0x240>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d05b      	beq.n	8003650 <HAL_RCC_OscConfig+0x108>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d157      	bne.n	8003650 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e242      	b.n	8003a2a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035ac:	d106      	bne.n	80035bc <HAL_RCC_OscConfig+0x74>
 80035ae:	4b76      	ldr	r3, [pc, #472]	; (8003788 <HAL_RCC_OscConfig+0x240>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a75      	ldr	r2, [pc, #468]	; (8003788 <HAL_RCC_OscConfig+0x240>)
 80035b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035b8:	6013      	str	r3, [r2, #0]
 80035ba:	e01d      	b.n	80035f8 <HAL_RCC_OscConfig+0xb0>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035c4:	d10c      	bne.n	80035e0 <HAL_RCC_OscConfig+0x98>
 80035c6:	4b70      	ldr	r3, [pc, #448]	; (8003788 <HAL_RCC_OscConfig+0x240>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a6f      	ldr	r2, [pc, #444]	; (8003788 <HAL_RCC_OscConfig+0x240>)
 80035cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035d0:	6013      	str	r3, [r2, #0]
 80035d2:	4b6d      	ldr	r3, [pc, #436]	; (8003788 <HAL_RCC_OscConfig+0x240>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a6c      	ldr	r2, [pc, #432]	; (8003788 <HAL_RCC_OscConfig+0x240>)
 80035d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035dc:	6013      	str	r3, [r2, #0]
 80035de:	e00b      	b.n	80035f8 <HAL_RCC_OscConfig+0xb0>
 80035e0:	4b69      	ldr	r3, [pc, #420]	; (8003788 <HAL_RCC_OscConfig+0x240>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a68      	ldr	r2, [pc, #416]	; (8003788 <HAL_RCC_OscConfig+0x240>)
 80035e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035ea:	6013      	str	r3, [r2, #0]
 80035ec:	4b66      	ldr	r3, [pc, #408]	; (8003788 <HAL_RCC_OscConfig+0x240>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a65      	ldr	r2, [pc, #404]	; (8003788 <HAL_RCC_OscConfig+0x240>)
 80035f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d013      	beq.n	8003628 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003600:	f7fd fa16 	bl	8000a30 <HAL_GetTick>
 8003604:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003606:	e008      	b.n	800361a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003608:	f7fd fa12 	bl	8000a30 <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	2b64      	cmp	r3, #100	; 0x64
 8003614:	d901      	bls.n	800361a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	e207      	b.n	8003a2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800361a:	4b5b      	ldr	r3, [pc, #364]	; (8003788 <HAL_RCC_OscConfig+0x240>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d0f0      	beq.n	8003608 <HAL_RCC_OscConfig+0xc0>
 8003626:	e014      	b.n	8003652 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003628:	f7fd fa02 	bl	8000a30 <HAL_GetTick>
 800362c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800362e:	e008      	b.n	8003642 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003630:	f7fd f9fe 	bl	8000a30 <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	2b64      	cmp	r3, #100	; 0x64
 800363c:	d901      	bls.n	8003642 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e1f3      	b.n	8003a2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003642:	4b51      	ldr	r3, [pc, #324]	; (8003788 <HAL_RCC_OscConfig+0x240>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d1f0      	bne.n	8003630 <HAL_RCC_OscConfig+0xe8>
 800364e:	e000      	b.n	8003652 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003650:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0302 	and.w	r3, r3, #2
 800365a:	2b00      	cmp	r3, #0
 800365c:	d063      	beq.n	8003726 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800365e:	4b4a      	ldr	r3, [pc, #296]	; (8003788 <HAL_RCC_OscConfig+0x240>)
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	f003 030c 	and.w	r3, r3, #12
 8003666:	2b00      	cmp	r3, #0
 8003668:	d00b      	beq.n	8003682 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800366a:	4b47      	ldr	r3, [pc, #284]	; (8003788 <HAL_RCC_OscConfig+0x240>)
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003672:	2b08      	cmp	r3, #8
 8003674:	d11c      	bne.n	80036b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003676:	4b44      	ldr	r3, [pc, #272]	; (8003788 <HAL_RCC_OscConfig+0x240>)
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d116      	bne.n	80036b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003682:	4b41      	ldr	r3, [pc, #260]	; (8003788 <HAL_RCC_OscConfig+0x240>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0302 	and.w	r3, r3, #2
 800368a:	2b00      	cmp	r3, #0
 800368c:	d005      	beq.n	800369a <HAL_RCC_OscConfig+0x152>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	2b01      	cmp	r3, #1
 8003694:	d001      	beq.n	800369a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e1c7      	b.n	8003a2a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800369a:	4b3b      	ldr	r3, [pc, #236]	; (8003788 <HAL_RCC_OscConfig+0x240>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	691b      	ldr	r3, [r3, #16]
 80036a6:	00db      	lsls	r3, r3, #3
 80036a8:	4937      	ldr	r1, [pc, #220]	; (8003788 <HAL_RCC_OscConfig+0x240>)
 80036aa:	4313      	orrs	r3, r2
 80036ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036ae:	e03a      	b.n	8003726 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d020      	beq.n	80036fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036b8:	4b34      	ldr	r3, [pc, #208]	; (800378c <HAL_RCC_OscConfig+0x244>)
 80036ba:	2201      	movs	r2, #1
 80036bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036be:	f7fd f9b7 	bl	8000a30 <HAL_GetTick>
 80036c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036c4:	e008      	b.n	80036d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036c6:	f7fd f9b3 	bl	8000a30 <HAL_GetTick>
 80036ca:	4602      	mov	r2, r0
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	d901      	bls.n	80036d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80036d4:	2303      	movs	r3, #3
 80036d6:	e1a8      	b.n	8003a2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036d8:	4b2b      	ldr	r3, [pc, #172]	; (8003788 <HAL_RCC_OscConfig+0x240>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0302 	and.w	r3, r3, #2
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d0f0      	beq.n	80036c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036e4:	4b28      	ldr	r3, [pc, #160]	; (8003788 <HAL_RCC_OscConfig+0x240>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	691b      	ldr	r3, [r3, #16]
 80036f0:	00db      	lsls	r3, r3, #3
 80036f2:	4925      	ldr	r1, [pc, #148]	; (8003788 <HAL_RCC_OscConfig+0x240>)
 80036f4:	4313      	orrs	r3, r2
 80036f6:	600b      	str	r3, [r1, #0]
 80036f8:	e015      	b.n	8003726 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036fa:	4b24      	ldr	r3, [pc, #144]	; (800378c <HAL_RCC_OscConfig+0x244>)
 80036fc:	2200      	movs	r2, #0
 80036fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003700:	f7fd f996 	bl	8000a30 <HAL_GetTick>
 8003704:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003706:	e008      	b.n	800371a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003708:	f7fd f992 	bl	8000a30 <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	2b02      	cmp	r3, #2
 8003714:	d901      	bls.n	800371a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e187      	b.n	8003a2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800371a:	4b1b      	ldr	r3, [pc, #108]	; (8003788 <HAL_RCC_OscConfig+0x240>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0302 	and.w	r3, r3, #2
 8003722:	2b00      	cmp	r3, #0
 8003724:	d1f0      	bne.n	8003708 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0308 	and.w	r3, r3, #8
 800372e:	2b00      	cmp	r3, #0
 8003730:	d036      	beq.n	80037a0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	695b      	ldr	r3, [r3, #20]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d016      	beq.n	8003768 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800373a:	4b15      	ldr	r3, [pc, #84]	; (8003790 <HAL_RCC_OscConfig+0x248>)
 800373c:	2201      	movs	r2, #1
 800373e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003740:	f7fd f976 	bl	8000a30 <HAL_GetTick>
 8003744:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003746:	e008      	b.n	800375a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003748:	f7fd f972 	bl	8000a30 <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	2b02      	cmp	r3, #2
 8003754:	d901      	bls.n	800375a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e167      	b.n	8003a2a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800375a:	4b0b      	ldr	r3, [pc, #44]	; (8003788 <HAL_RCC_OscConfig+0x240>)
 800375c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800375e:	f003 0302 	and.w	r3, r3, #2
 8003762:	2b00      	cmp	r3, #0
 8003764:	d0f0      	beq.n	8003748 <HAL_RCC_OscConfig+0x200>
 8003766:	e01b      	b.n	80037a0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003768:	4b09      	ldr	r3, [pc, #36]	; (8003790 <HAL_RCC_OscConfig+0x248>)
 800376a:	2200      	movs	r2, #0
 800376c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800376e:	f7fd f95f 	bl	8000a30 <HAL_GetTick>
 8003772:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003774:	e00e      	b.n	8003794 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003776:	f7fd f95b 	bl	8000a30 <HAL_GetTick>
 800377a:	4602      	mov	r2, r0
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	2b02      	cmp	r3, #2
 8003782:	d907      	bls.n	8003794 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003784:	2303      	movs	r3, #3
 8003786:	e150      	b.n	8003a2a <HAL_RCC_OscConfig+0x4e2>
 8003788:	40023800 	.word	0x40023800
 800378c:	42470000 	.word	0x42470000
 8003790:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003794:	4b88      	ldr	r3, [pc, #544]	; (80039b8 <HAL_RCC_OscConfig+0x470>)
 8003796:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003798:	f003 0302 	and.w	r3, r3, #2
 800379c:	2b00      	cmp	r3, #0
 800379e:	d1ea      	bne.n	8003776 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0304 	and.w	r3, r3, #4
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	f000 8097 	beq.w	80038dc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037ae:	2300      	movs	r3, #0
 80037b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037b2:	4b81      	ldr	r3, [pc, #516]	; (80039b8 <HAL_RCC_OscConfig+0x470>)
 80037b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d10f      	bne.n	80037de <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037be:	2300      	movs	r3, #0
 80037c0:	60bb      	str	r3, [r7, #8]
 80037c2:	4b7d      	ldr	r3, [pc, #500]	; (80039b8 <HAL_RCC_OscConfig+0x470>)
 80037c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c6:	4a7c      	ldr	r2, [pc, #496]	; (80039b8 <HAL_RCC_OscConfig+0x470>)
 80037c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037cc:	6413      	str	r3, [r2, #64]	; 0x40
 80037ce:	4b7a      	ldr	r3, [pc, #488]	; (80039b8 <HAL_RCC_OscConfig+0x470>)
 80037d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037d6:	60bb      	str	r3, [r7, #8]
 80037d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037da:	2301      	movs	r3, #1
 80037dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037de:	4b77      	ldr	r3, [pc, #476]	; (80039bc <HAL_RCC_OscConfig+0x474>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d118      	bne.n	800381c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037ea:	4b74      	ldr	r3, [pc, #464]	; (80039bc <HAL_RCC_OscConfig+0x474>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a73      	ldr	r2, [pc, #460]	; (80039bc <HAL_RCC_OscConfig+0x474>)
 80037f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037f6:	f7fd f91b 	bl	8000a30 <HAL_GetTick>
 80037fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037fc:	e008      	b.n	8003810 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037fe:	f7fd f917 	bl	8000a30 <HAL_GetTick>
 8003802:	4602      	mov	r2, r0
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	2b02      	cmp	r3, #2
 800380a:	d901      	bls.n	8003810 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800380c:	2303      	movs	r3, #3
 800380e:	e10c      	b.n	8003a2a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003810:	4b6a      	ldr	r3, [pc, #424]	; (80039bc <HAL_RCC_OscConfig+0x474>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003818:	2b00      	cmp	r3, #0
 800381a:	d0f0      	beq.n	80037fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	2b01      	cmp	r3, #1
 8003822:	d106      	bne.n	8003832 <HAL_RCC_OscConfig+0x2ea>
 8003824:	4b64      	ldr	r3, [pc, #400]	; (80039b8 <HAL_RCC_OscConfig+0x470>)
 8003826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003828:	4a63      	ldr	r2, [pc, #396]	; (80039b8 <HAL_RCC_OscConfig+0x470>)
 800382a:	f043 0301 	orr.w	r3, r3, #1
 800382e:	6713      	str	r3, [r2, #112]	; 0x70
 8003830:	e01c      	b.n	800386c <HAL_RCC_OscConfig+0x324>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	2b05      	cmp	r3, #5
 8003838:	d10c      	bne.n	8003854 <HAL_RCC_OscConfig+0x30c>
 800383a:	4b5f      	ldr	r3, [pc, #380]	; (80039b8 <HAL_RCC_OscConfig+0x470>)
 800383c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800383e:	4a5e      	ldr	r2, [pc, #376]	; (80039b8 <HAL_RCC_OscConfig+0x470>)
 8003840:	f043 0304 	orr.w	r3, r3, #4
 8003844:	6713      	str	r3, [r2, #112]	; 0x70
 8003846:	4b5c      	ldr	r3, [pc, #368]	; (80039b8 <HAL_RCC_OscConfig+0x470>)
 8003848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800384a:	4a5b      	ldr	r2, [pc, #364]	; (80039b8 <HAL_RCC_OscConfig+0x470>)
 800384c:	f043 0301 	orr.w	r3, r3, #1
 8003850:	6713      	str	r3, [r2, #112]	; 0x70
 8003852:	e00b      	b.n	800386c <HAL_RCC_OscConfig+0x324>
 8003854:	4b58      	ldr	r3, [pc, #352]	; (80039b8 <HAL_RCC_OscConfig+0x470>)
 8003856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003858:	4a57      	ldr	r2, [pc, #348]	; (80039b8 <HAL_RCC_OscConfig+0x470>)
 800385a:	f023 0301 	bic.w	r3, r3, #1
 800385e:	6713      	str	r3, [r2, #112]	; 0x70
 8003860:	4b55      	ldr	r3, [pc, #340]	; (80039b8 <HAL_RCC_OscConfig+0x470>)
 8003862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003864:	4a54      	ldr	r2, [pc, #336]	; (80039b8 <HAL_RCC_OscConfig+0x470>)
 8003866:	f023 0304 	bic.w	r3, r3, #4
 800386a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d015      	beq.n	80038a0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003874:	f7fd f8dc 	bl	8000a30 <HAL_GetTick>
 8003878:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800387a:	e00a      	b.n	8003892 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800387c:	f7fd f8d8 	bl	8000a30 <HAL_GetTick>
 8003880:	4602      	mov	r2, r0
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	f241 3288 	movw	r2, #5000	; 0x1388
 800388a:	4293      	cmp	r3, r2
 800388c:	d901      	bls.n	8003892 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	e0cb      	b.n	8003a2a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003892:	4b49      	ldr	r3, [pc, #292]	; (80039b8 <HAL_RCC_OscConfig+0x470>)
 8003894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003896:	f003 0302 	and.w	r3, r3, #2
 800389a:	2b00      	cmp	r3, #0
 800389c:	d0ee      	beq.n	800387c <HAL_RCC_OscConfig+0x334>
 800389e:	e014      	b.n	80038ca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038a0:	f7fd f8c6 	bl	8000a30 <HAL_GetTick>
 80038a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038a6:	e00a      	b.n	80038be <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038a8:	f7fd f8c2 	bl	8000a30 <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d901      	bls.n	80038be <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e0b5      	b.n	8003a2a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038be:	4b3e      	ldr	r3, [pc, #248]	; (80039b8 <HAL_RCC_OscConfig+0x470>)
 80038c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038c2:	f003 0302 	and.w	r3, r3, #2
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d1ee      	bne.n	80038a8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038ca:	7dfb      	ldrb	r3, [r7, #23]
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d105      	bne.n	80038dc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038d0:	4b39      	ldr	r3, [pc, #228]	; (80039b8 <HAL_RCC_OscConfig+0x470>)
 80038d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d4:	4a38      	ldr	r2, [pc, #224]	; (80039b8 <HAL_RCC_OscConfig+0x470>)
 80038d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038da:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	699b      	ldr	r3, [r3, #24]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	f000 80a1 	beq.w	8003a28 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038e6:	4b34      	ldr	r3, [pc, #208]	; (80039b8 <HAL_RCC_OscConfig+0x470>)
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	f003 030c 	and.w	r3, r3, #12
 80038ee:	2b08      	cmp	r3, #8
 80038f0:	d05c      	beq.n	80039ac <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	699b      	ldr	r3, [r3, #24]
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d141      	bne.n	800397e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038fa:	4b31      	ldr	r3, [pc, #196]	; (80039c0 <HAL_RCC_OscConfig+0x478>)
 80038fc:	2200      	movs	r2, #0
 80038fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003900:	f7fd f896 	bl	8000a30 <HAL_GetTick>
 8003904:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003906:	e008      	b.n	800391a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003908:	f7fd f892 	bl	8000a30 <HAL_GetTick>
 800390c:	4602      	mov	r2, r0
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	2b02      	cmp	r3, #2
 8003914:	d901      	bls.n	800391a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	e087      	b.n	8003a2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800391a:	4b27      	ldr	r3, [pc, #156]	; (80039b8 <HAL_RCC_OscConfig+0x470>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d1f0      	bne.n	8003908 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	69da      	ldr	r2, [r3, #28]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6a1b      	ldr	r3, [r3, #32]
 800392e:	431a      	orrs	r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003934:	019b      	lsls	r3, r3, #6
 8003936:	431a      	orrs	r2, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800393c:	085b      	lsrs	r3, r3, #1
 800393e:	3b01      	subs	r3, #1
 8003940:	041b      	lsls	r3, r3, #16
 8003942:	431a      	orrs	r2, r3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003948:	061b      	lsls	r3, r3, #24
 800394a:	491b      	ldr	r1, [pc, #108]	; (80039b8 <HAL_RCC_OscConfig+0x470>)
 800394c:	4313      	orrs	r3, r2
 800394e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003950:	4b1b      	ldr	r3, [pc, #108]	; (80039c0 <HAL_RCC_OscConfig+0x478>)
 8003952:	2201      	movs	r2, #1
 8003954:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003956:	f7fd f86b 	bl	8000a30 <HAL_GetTick>
 800395a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800395c:	e008      	b.n	8003970 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800395e:	f7fd f867 	bl	8000a30 <HAL_GetTick>
 8003962:	4602      	mov	r2, r0
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	2b02      	cmp	r3, #2
 800396a:	d901      	bls.n	8003970 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800396c:	2303      	movs	r3, #3
 800396e:	e05c      	b.n	8003a2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003970:	4b11      	ldr	r3, [pc, #68]	; (80039b8 <HAL_RCC_OscConfig+0x470>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003978:	2b00      	cmp	r3, #0
 800397a:	d0f0      	beq.n	800395e <HAL_RCC_OscConfig+0x416>
 800397c:	e054      	b.n	8003a28 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800397e:	4b10      	ldr	r3, [pc, #64]	; (80039c0 <HAL_RCC_OscConfig+0x478>)
 8003980:	2200      	movs	r2, #0
 8003982:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003984:	f7fd f854 	bl	8000a30 <HAL_GetTick>
 8003988:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800398a:	e008      	b.n	800399e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800398c:	f7fd f850 	bl	8000a30 <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	2b02      	cmp	r3, #2
 8003998:	d901      	bls.n	800399e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e045      	b.n	8003a2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800399e:	4b06      	ldr	r3, [pc, #24]	; (80039b8 <HAL_RCC_OscConfig+0x470>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d1f0      	bne.n	800398c <HAL_RCC_OscConfig+0x444>
 80039aa:	e03d      	b.n	8003a28 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	699b      	ldr	r3, [r3, #24]
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d107      	bne.n	80039c4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	e038      	b.n	8003a2a <HAL_RCC_OscConfig+0x4e2>
 80039b8:	40023800 	.word	0x40023800
 80039bc:	40007000 	.word	0x40007000
 80039c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80039c4:	4b1b      	ldr	r3, [pc, #108]	; (8003a34 <HAL_RCC_OscConfig+0x4ec>)
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	699b      	ldr	r3, [r3, #24]
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d028      	beq.n	8003a24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039dc:	429a      	cmp	r2, r3
 80039de:	d121      	bne.n	8003a24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d11a      	bne.n	8003a24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039ee:	68fa      	ldr	r2, [r7, #12]
 80039f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80039f4:	4013      	ands	r3, r2
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80039fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d111      	bne.n	8003a24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a0a:	085b      	lsrs	r3, r3, #1
 8003a0c:	3b01      	subs	r3, #1
 8003a0e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d107      	bne.n	8003a24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a1e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d001      	beq.n	8003a28 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e000      	b.n	8003a2a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003a28:	2300      	movs	r3, #0
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3718      	adds	r7, #24
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	40023800 	.word	0x40023800

08003a38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b084      	sub	sp, #16
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d101      	bne.n	8003a4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e0cc      	b.n	8003be6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a4c:	4b68      	ldr	r3, [pc, #416]	; (8003bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 0307 	and.w	r3, r3, #7
 8003a54:	683a      	ldr	r2, [r7, #0]
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d90c      	bls.n	8003a74 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a5a:	4b65      	ldr	r3, [pc, #404]	; (8003bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a5c:	683a      	ldr	r2, [r7, #0]
 8003a5e:	b2d2      	uxtb	r2, r2
 8003a60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a62:	4b63      	ldr	r3, [pc, #396]	; (8003bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 0307 	and.w	r3, r3, #7
 8003a6a:	683a      	ldr	r2, [r7, #0]
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d001      	beq.n	8003a74 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e0b8      	b.n	8003be6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0302 	and.w	r3, r3, #2
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d020      	beq.n	8003ac2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 0304 	and.w	r3, r3, #4
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d005      	beq.n	8003a98 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a8c:	4b59      	ldr	r3, [pc, #356]	; (8003bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	4a58      	ldr	r2, [pc, #352]	; (8003bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a92:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a96:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0308 	and.w	r3, r3, #8
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d005      	beq.n	8003ab0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003aa4:	4b53      	ldr	r3, [pc, #332]	; (8003bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	4a52      	ldr	r2, [pc, #328]	; (8003bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8003aaa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003aae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ab0:	4b50      	ldr	r3, [pc, #320]	; (8003bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	494d      	ldr	r1, [pc, #308]	; (8003bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0301 	and.w	r3, r3, #1
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d044      	beq.n	8003b58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d107      	bne.n	8003ae6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ad6:	4b47      	ldr	r3, [pc, #284]	; (8003bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d119      	bne.n	8003b16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e07f      	b.n	8003be6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	2b02      	cmp	r3, #2
 8003aec:	d003      	beq.n	8003af6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003af2:	2b03      	cmp	r3, #3
 8003af4:	d107      	bne.n	8003b06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003af6:	4b3f      	ldr	r3, [pc, #252]	; (8003bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d109      	bne.n	8003b16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e06f      	b.n	8003be6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b06:	4b3b      	ldr	r3, [pc, #236]	; (8003bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0302 	and.w	r3, r3, #2
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d101      	bne.n	8003b16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e067      	b.n	8003be6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b16:	4b37      	ldr	r3, [pc, #220]	; (8003bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	f023 0203 	bic.w	r2, r3, #3
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	4934      	ldr	r1, [pc, #208]	; (8003bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b24:	4313      	orrs	r3, r2
 8003b26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b28:	f7fc ff82 	bl	8000a30 <HAL_GetTick>
 8003b2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b2e:	e00a      	b.n	8003b46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b30:	f7fc ff7e 	bl	8000a30 <HAL_GetTick>
 8003b34:	4602      	mov	r2, r0
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d901      	bls.n	8003b46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e04f      	b.n	8003be6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b46:	4b2b      	ldr	r3, [pc, #172]	; (8003bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	f003 020c 	and.w	r2, r3, #12
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d1eb      	bne.n	8003b30 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b58:	4b25      	ldr	r3, [pc, #148]	; (8003bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0307 	and.w	r3, r3, #7
 8003b60:	683a      	ldr	r2, [r7, #0]
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d20c      	bcs.n	8003b80 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b66:	4b22      	ldr	r3, [pc, #136]	; (8003bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b68:	683a      	ldr	r2, [r7, #0]
 8003b6a:	b2d2      	uxtb	r2, r2
 8003b6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b6e:	4b20      	ldr	r3, [pc, #128]	; (8003bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0307 	and.w	r3, r3, #7
 8003b76:	683a      	ldr	r2, [r7, #0]
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d001      	beq.n	8003b80 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e032      	b.n	8003be6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 0304 	and.w	r3, r3, #4
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d008      	beq.n	8003b9e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b8c:	4b19      	ldr	r3, [pc, #100]	; (8003bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	4916      	ldr	r1, [pc, #88]	; (8003bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0308 	and.w	r3, r3, #8
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d009      	beq.n	8003bbe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003baa:	4b12      	ldr	r3, [pc, #72]	; (8003bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	691b      	ldr	r3, [r3, #16]
 8003bb6:	00db      	lsls	r3, r3, #3
 8003bb8:	490e      	ldr	r1, [pc, #56]	; (8003bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003bbe:	f000 f821 	bl	8003c04 <HAL_RCC_GetSysClockFreq>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	4b0b      	ldr	r3, [pc, #44]	; (8003bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	091b      	lsrs	r3, r3, #4
 8003bca:	f003 030f 	and.w	r3, r3, #15
 8003bce:	490a      	ldr	r1, [pc, #40]	; (8003bf8 <HAL_RCC_ClockConfig+0x1c0>)
 8003bd0:	5ccb      	ldrb	r3, [r1, r3]
 8003bd2:	fa22 f303 	lsr.w	r3, r2, r3
 8003bd6:	4a09      	ldr	r2, [pc, #36]	; (8003bfc <HAL_RCC_ClockConfig+0x1c4>)
 8003bd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003bda:	4b09      	ldr	r3, [pc, #36]	; (8003c00 <HAL_RCC_ClockConfig+0x1c8>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4618      	mov	r0, r3
 8003be0:	f7fc fee2 	bl	80009a8 <HAL_InitTick>

  return HAL_OK;
 8003be4:	2300      	movs	r3, #0
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3710      	adds	r7, #16
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	40023c00 	.word	0x40023c00
 8003bf4:	40023800 	.word	0x40023800
 8003bf8:	08007d30 	.word	0x08007d30
 8003bfc:	20000000 	.word	0x20000000
 8003c00:	20000004 	.word	0x20000004

08003c04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c08:	b090      	sub	sp, #64	; 0x40
 8003c0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	637b      	str	r3, [r7, #52]	; 0x34
 8003c10:	2300      	movs	r3, #0
 8003c12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c14:	2300      	movs	r3, #0
 8003c16:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c1c:	4b59      	ldr	r3, [pc, #356]	; (8003d84 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	f003 030c 	and.w	r3, r3, #12
 8003c24:	2b08      	cmp	r3, #8
 8003c26:	d00d      	beq.n	8003c44 <HAL_RCC_GetSysClockFreq+0x40>
 8003c28:	2b08      	cmp	r3, #8
 8003c2a:	f200 80a1 	bhi.w	8003d70 <HAL_RCC_GetSysClockFreq+0x16c>
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d002      	beq.n	8003c38 <HAL_RCC_GetSysClockFreq+0x34>
 8003c32:	2b04      	cmp	r3, #4
 8003c34:	d003      	beq.n	8003c3e <HAL_RCC_GetSysClockFreq+0x3a>
 8003c36:	e09b      	b.n	8003d70 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c38:	4b53      	ldr	r3, [pc, #332]	; (8003d88 <HAL_RCC_GetSysClockFreq+0x184>)
 8003c3a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003c3c:	e09b      	b.n	8003d76 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c3e:	4b53      	ldr	r3, [pc, #332]	; (8003d8c <HAL_RCC_GetSysClockFreq+0x188>)
 8003c40:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003c42:	e098      	b.n	8003d76 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c44:	4b4f      	ldr	r3, [pc, #316]	; (8003d84 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c4c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c4e:	4b4d      	ldr	r3, [pc, #308]	; (8003d84 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d028      	beq.n	8003cac <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c5a:	4b4a      	ldr	r3, [pc, #296]	; (8003d84 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	099b      	lsrs	r3, r3, #6
 8003c60:	2200      	movs	r2, #0
 8003c62:	623b      	str	r3, [r7, #32]
 8003c64:	627a      	str	r2, [r7, #36]	; 0x24
 8003c66:	6a3b      	ldr	r3, [r7, #32]
 8003c68:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003c6c:	2100      	movs	r1, #0
 8003c6e:	4b47      	ldr	r3, [pc, #284]	; (8003d8c <HAL_RCC_GetSysClockFreq+0x188>)
 8003c70:	fb03 f201 	mul.w	r2, r3, r1
 8003c74:	2300      	movs	r3, #0
 8003c76:	fb00 f303 	mul.w	r3, r0, r3
 8003c7a:	4413      	add	r3, r2
 8003c7c:	4a43      	ldr	r2, [pc, #268]	; (8003d8c <HAL_RCC_GetSysClockFreq+0x188>)
 8003c7e:	fba0 1202 	umull	r1, r2, r0, r2
 8003c82:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c84:	460a      	mov	r2, r1
 8003c86:	62ba      	str	r2, [r7, #40]	; 0x28
 8003c88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c8a:	4413      	add	r3, r2
 8003c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c90:	2200      	movs	r2, #0
 8003c92:	61bb      	str	r3, [r7, #24]
 8003c94:	61fa      	str	r2, [r7, #28]
 8003c96:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c9a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003c9e:	f7fc fa99 	bl	80001d4 <__aeabi_uldivmod>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	460b      	mov	r3, r1
 8003ca6:	4613      	mov	r3, r2
 8003ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003caa:	e053      	b.n	8003d54 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cac:	4b35      	ldr	r3, [pc, #212]	; (8003d84 <HAL_RCC_GetSysClockFreq+0x180>)
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	099b      	lsrs	r3, r3, #6
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	613b      	str	r3, [r7, #16]
 8003cb6:	617a      	str	r2, [r7, #20]
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003cbe:	f04f 0b00 	mov.w	fp, #0
 8003cc2:	4652      	mov	r2, sl
 8003cc4:	465b      	mov	r3, fp
 8003cc6:	f04f 0000 	mov.w	r0, #0
 8003cca:	f04f 0100 	mov.w	r1, #0
 8003cce:	0159      	lsls	r1, r3, #5
 8003cd0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cd4:	0150      	lsls	r0, r2, #5
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	460b      	mov	r3, r1
 8003cda:	ebb2 080a 	subs.w	r8, r2, sl
 8003cde:	eb63 090b 	sbc.w	r9, r3, fp
 8003ce2:	f04f 0200 	mov.w	r2, #0
 8003ce6:	f04f 0300 	mov.w	r3, #0
 8003cea:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003cee:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003cf2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003cf6:	ebb2 0408 	subs.w	r4, r2, r8
 8003cfa:	eb63 0509 	sbc.w	r5, r3, r9
 8003cfe:	f04f 0200 	mov.w	r2, #0
 8003d02:	f04f 0300 	mov.w	r3, #0
 8003d06:	00eb      	lsls	r3, r5, #3
 8003d08:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d0c:	00e2      	lsls	r2, r4, #3
 8003d0e:	4614      	mov	r4, r2
 8003d10:	461d      	mov	r5, r3
 8003d12:	eb14 030a 	adds.w	r3, r4, sl
 8003d16:	603b      	str	r3, [r7, #0]
 8003d18:	eb45 030b 	adc.w	r3, r5, fp
 8003d1c:	607b      	str	r3, [r7, #4]
 8003d1e:	f04f 0200 	mov.w	r2, #0
 8003d22:	f04f 0300 	mov.w	r3, #0
 8003d26:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d2a:	4629      	mov	r1, r5
 8003d2c:	028b      	lsls	r3, r1, #10
 8003d2e:	4621      	mov	r1, r4
 8003d30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d34:	4621      	mov	r1, r4
 8003d36:	028a      	lsls	r2, r1, #10
 8003d38:	4610      	mov	r0, r2
 8003d3a:	4619      	mov	r1, r3
 8003d3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d3e:	2200      	movs	r2, #0
 8003d40:	60bb      	str	r3, [r7, #8]
 8003d42:	60fa      	str	r2, [r7, #12]
 8003d44:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d48:	f7fc fa44 	bl	80001d4 <__aeabi_uldivmod>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	460b      	mov	r3, r1
 8003d50:	4613      	mov	r3, r2
 8003d52:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d54:	4b0b      	ldr	r3, [pc, #44]	; (8003d84 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	0c1b      	lsrs	r3, r3, #16
 8003d5a:	f003 0303 	and.w	r3, r3, #3
 8003d5e:	3301      	adds	r3, #1
 8003d60:	005b      	lsls	r3, r3, #1
 8003d62:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003d64:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d6c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d6e:	e002      	b.n	8003d76 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d70:	4b05      	ldr	r3, [pc, #20]	; (8003d88 <HAL_RCC_GetSysClockFreq+0x184>)
 8003d72:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3740      	adds	r7, #64	; 0x40
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d82:	bf00      	nop
 8003d84:	40023800 	.word	0x40023800
 8003d88:	00f42400 	.word	0x00f42400
 8003d8c:	017d7840 	.word	0x017d7840

08003d90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d90:	b480      	push	{r7}
 8003d92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d94:	4b03      	ldr	r3, [pc, #12]	; (8003da4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d96:	681b      	ldr	r3, [r3, #0]
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr
 8003da2:	bf00      	nop
 8003da4:	20000000 	.word	0x20000000

08003da8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b086      	sub	sp, #24
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003db0:	2300      	movs	r3, #0
 8003db2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003db4:	2300      	movs	r3, #0
 8003db6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0301 	and.w	r3, r3, #1
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d105      	bne.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d035      	beq.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003dd0:	4b67      	ldr	r3, [pc, #412]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003dd6:	f7fc fe2b 	bl	8000a30 <HAL_GetTick>
 8003dda:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ddc:	e008      	b.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003dde:	f7fc fe27 	bl	8000a30 <HAL_GetTick>
 8003de2:	4602      	mov	r2, r0
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	1ad3      	subs	r3, r2, r3
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	d901      	bls.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003dec:	2303      	movs	r3, #3
 8003dee:	e0ba      	b.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003df0:	4b60      	ldr	r3, [pc, #384]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d1f0      	bne.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	019a      	lsls	r2, r3, #6
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	071b      	lsls	r3, r3, #28
 8003e08:	495a      	ldr	r1, [pc, #360]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003e10:	4b57      	ldr	r3, [pc, #348]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003e12:	2201      	movs	r2, #1
 8003e14:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003e16:	f7fc fe0b 	bl	8000a30 <HAL_GetTick>
 8003e1a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e1c:	e008      	b.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003e1e:	f7fc fe07 	bl	8000a30 <HAL_GetTick>
 8003e22:	4602      	mov	r2, r0
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	1ad3      	subs	r3, r2, r3
 8003e28:	2b02      	cmp	r3, #2
 8003e2a:	d901      	bls.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e2c:	2303      	movs	r3, #3
 8003e2e:	e09a      	b.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e30:	4b50      	ldr	r3, [pc, #320]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d0f0      	beq.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 0302 	and.w	r3, r3, #2
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	f000 8083 	beq.w	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	60fb      	str	r3, [r7, #12]
 8003e4e:	4b49      	ldr	r3, [pc, #292]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e52:	4a48      	ldr	r2, [pc, #288]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003e54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e58:	6413      	str	r3, [r2, #64]	; 0x40
 8003e5a:	4b46      	ldr	r3, [pc, #280]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e62:	60fb      	str	r3, [r7, #12]
 8003e64:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003e66:	4b44      	ldr	r3, [pc, #272]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a43      	ldr	r2, [pc, #268]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e70:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003e72:	f7fc fddd 	bl	8000a30 <HAL_GetTick>
 8003e76:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003e78:	e008      	b.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003e7a:	f7fc fdd9 	bl	8000a30 <HAL_GetTick>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	2b02      	cmp	r3, #2
 8003e86:	d901      	bls.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	e06c      	b.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003e8c:	4b3a      	ldr	r3, [pc, #232]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d0f0      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e98:	4b36      	ldr	r3, [pc, #216]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ea0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d02f      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eb0:	693a      	ldr	r2, [r7, #16]
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d028      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003eb6:	4b2f      	ldr	r3, [pc, #188]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ebe:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ec0:	4b2e      	ldr	r3, [pc, #184]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ec6:	4b2d      	ldr	r3, [pc, #180]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003ec8:	2200      	movs	r2, #0
 8003eca:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003ecc:	4a29      	ldr	r2, [pc, #164]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003ed2:	4b28      	ldr	r3, [pc, #160]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed6:	f003 0301 	and.w	r3, r3, #1
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d114      	bne.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003ede:	f7fc fda7 	bl	8000a30 <HAL_GetTick>
 8003ee2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ee4:	e00a      	b.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ee6:	f7fc fda3 	bl	8000a30 <HAL_GetTick>
 8003eea:	4602      	mov	r2, r0
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d901      	bls.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003ef8:	2303      	movs	r3, #3
 8003efa:	e034      	b.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003efc:	4b1d      	ldr	r3, [pc, #116]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003efe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f00:	f003 0302 	and.w	r3, r3, #2
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d0ee      	beq.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f10:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f14:	d10d      	bne.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003f16:	4b17      	ldr	r3, [pc, #92]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	68db      	ldr	r3, [r3, #12]
 8003f22:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003f26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f2a:	4912      	ldr	r1, [pc, #72]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	608b      	str	r3, [r1, #8]
 8003f30:	e005      	b.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003f32:	4b10      	ldr	r3, [pc, #64]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	4a0f      	ldr	r2, [pc, #60]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003f38:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003f3c:	6093      	str	r3, [r2, #8]
 8003f3e:	4b0d      	ldr	r3, [pc, #52]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003f40:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f4a:	490a      	ldr	r1, [pc, #40]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 0308 	and.w	r3, r3, #8
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d003      	beq.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	7c1a      	ldrb	r2, [r3, #16]
 8003f60:	4b07      	ldr	r3, [pc, #28]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003f62:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003f64:	2300      	movs	r3, #0
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3718      	adds	r7, #24
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	42470068 	.word	0x42470068
 8003f74:	40023800 	.word	0x40023800
 8003f78:	40007000 	.word	0x40007000
 8003f7c:	42470e40 	.word	0x42470e40
 8003f80:	424711e0 	.word	0x424711e0

08003f84 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b087      	sub	sp, #28
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003f90:	2300      	movs	r3, #0
 8003f92:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003f94:	2300      	movs	r3, #0
 8003f96:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d13e      	bne.n	8004020 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003fa2:	4b23      	ldr	r3, [pc, #140]	; (8004030 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003faa:	60fb      	str	r3, [r7, #12]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d005      	beq.n	8003fbe <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d12f      	bne.n	8004018 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003fb8:	4b1e      	ldr	r3, [pc, #120]	; (8004034 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003fba:	617b      	str	r3, [r7, #20]
          break;
 8003fbc:	e02f      	b.n	800401e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003fbe:	4b1c      	ldr	r3, [pc, #112]	; (8004030 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fc6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fca:	d108      	bne.n	8003fde <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003fcc:	4b18      	ldr	r3, [pc, #96]	; (8004030 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fd4:	4a18      	ldr	r2, [pc, #96]	; (8004038 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fda:	613b      	str	r3, [r7, #16]
 8003fdc:	e007      	b.n	8003fee <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003fde:	4b14      	ldr	r3, [pc, #80]	; (8004030 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fe6:	4a15      	ldr	r2, [pc, #84]	; (800403c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8003fe8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fec:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003fee:	4b10      	ldr	r3, [pc, #64]	; (8004030 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003ff0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ff4:	099b      	lsrs	r3, r3, #6
 8003ff6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	fb02 f303 	mul.w	r3, r2, r3
 8004000:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004002:	4b0b      	ldr	r3, [pc, #44]	; (8004030 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004004:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004008:	0f1b      	lsrs	r3, r3, #28
 800400a:	f003 0307 	and.w	r3, r3, #7
 800400e:	68ba      	ldr	r2, [r7, #8]
 8004010:	fbb2 f3f3 	udiv	r3, r2, r3
 8004014:	617b      	str	r3, [r7, #20]
          break;
 8004016:	e002      	b.n	800401e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004018:	2300      	movs	r3, #0
 800401a:	617b      	str	r3, [r7, #20]
          break;
 800401c:	bf00      	nop
        }
      }
      break;
 800401e:	bf00      	nop
    }
  }
  return frequency;
 8004020:	697b      	ldr	r3, [r7, #20]
}
 8004022:	4618      	mov	r0, r3
 8004024:	371c      	adds	r7, #28
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr
 800402e:	bf00      	nop
 8004030:	40023800 	.word	0x40023800
 8004034:	00bb8000 	.word	0x00bb8000
 8004038:	017d7840 	.word	0x017d7840
 800403c:	00f42400 	.word	0x00f42400

08004040 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004040:	b084      	sub	sp, #16
 8004042:	b580      	push	{r7, lr}
 8004044:	b084      	sub	sp, #16
 8004046:	af00      	add	r7, sp, #0
 8004048:	6078      	str	r0, [r7, #4]
 800404a:	f107 001c 	add.w	r0, r7, #28
 800404e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004054:	2b01      	cmp	r3, #1
 8004056:	d122      	bne.n	800409e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800405c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800406c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004070:	687a      	ldr	r2, [r7, #4]
 8004072:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004080:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004082:	2b01      	cmp	r3, #1
 8004084:	d105      	bne.n	8004092 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	68db      	ldr	r3, [r3, #12]
 800408a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f001 fac6 	bl	8005624 <USB_CoreReset>
 8004098:	4603      	mov	r3, r0
 800409a:	73fb      	strb	r3, [r7, #15]
 800409c:	e01a      	b.n	80040d4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f001 faba 	bl	8005624 <USB_CoreReset>
 80040b0:	4603      	mov	r3, r0
 80040b2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80040b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d106      	bne.n	80040c8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040be:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	639a      	str	r2, [r3, #56]	; 0x38
 80040c6:	e005      	b.n	80040d4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040cc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80040d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d10b      	bne.n	80040f2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	f043 0206 	orr.w	r2, r3, #6
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	f043 0220 	orr.w	r2, r3, #32
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80040f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3710      	adds	r7, #16
 80040f8:	46bd      	mov	sp, r7
 80040fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80040fe:	b004      	add	sp, #16
 8004100:	4770      	bx	lr
	...

08004104 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004104:	b480      	push	{r7}
 8004106:	b087      	sub	sp, #28
 8004108:	af00      	add	r7, sp, #0
 800410a:	60f8      	str	r0, [r7, #12]
 800410c:	60b9      	str	r1, [r7, #8]
 800410e:	4613      	mov	r3, r2
 8004110:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004112:	79fb      	ldrb	r3, [r7, #7]
 8004114:	2b02      	cmp	r3, #2
 8004116:	d165      	bne.n	80041e4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	4a41      	ldr	r2, [pc, #260]	; (8004220 <USB_SetTurnaroundTime+0x11c>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d906      	bls.n	800412e <USB_SetTurnaroundTime+0x2a>
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	4a40      	ldr	r2, [pc, #256]	; (8004224 <USB_SetTurnaroundTime+0x120>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d202      	bcs.n	800412e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004128:	230f      	movs	r3, #15
 800412a:	617b      	str	r3, [r7, #20]
 800412c:	e062      	b.n	80041f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	4a3c      	ldr	r2, [pc, #240]	; (8004224 <USB_SetTurnaroundTime+0x120>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d306      	bcc.n	8004144 <USB_SetTurnaroundTime+0x40>
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	4a3b      	ldr	r2, [pc, #236]	; (8004228 <USB_SetTurnaroundTime+0x124>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d202      	bcs.n	8004144 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800413e:	230e      	movs	r3, #14
 8004140:	617b      	str	r3, [r7, #20]
 8004142:	e057      	b.n	80041f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	4a38      	ldr	r2, [pc, #224]	; (8004228 <USB_SetTurnaroundTime+0x124>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d306      	bcc.n	800415a <USB_SetTurnaroundTime+0x56>
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	4a37      	ldr	r2, [pc, #220]	; (800422c <USB_SetTurnaroundTime+0x128>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d202      	bcs.n	800415a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004154:	230d      	movs	r3, #13
 8004156:	617b      	str	r3, [r7, #20]
 8004158:	e04c      	b.n	80041f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	4a33      	ldr	r2, [pc, #204]	; (800422c <USB_SetTurnaroundTime+0x128>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d306      	bcc.n	8004170 <USB_SetTurnaroundTime+0x6c>
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	4a32      	ldr	r2, [pc, #200]	; (8004230 <USB_SetTurnaroundTime+0x12c>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d802      	bhi.n	8004170 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800416a:	230c      	movs	r3, #12
 800416c:	617b      	str	r3, [r7, #20]
 800416e:	e041      	b.n	80041f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	4a2f      	ldr	r2, [pc, #188]	; (8004230 <USB_SetTurnaroundTime+0x12c>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d906      	bls.n	8004186 <USB_SetTurnaroundTime+0x82>
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	4a2e      	ldr	r2, [pc, #184]	; (8004234 <USB_SetTurnaroundTime+0x130>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d802      	bhi.n	8004186 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004180:	230b      	movs	r3, #11
 8004182:	617b      	str	r3, [r7, #20]
 8004184:	e036      	b.n	80041f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	4a2a      	ldr	r2, [pc, #168]	; (8004234 <USB_SetTurnaroundTime+0x130>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d906      	bls.n	800419c <USB_SetTurnaroundTime+0x98>
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	4a29      	ldr	r2, [pc, #164]	; (8004238 <USB_SetTurnaroundTime+0x134>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d802      	bhi.n	800419c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004196:	230a      	movs	r3, #10
 8004198:	617b      	str	r3, [r7, #20]
 800419a:	e02b      	b.n	80041f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	4a26      	ldr	r2, [pc, #152]	; (8004238 <USB_SetTurnaroundTime+0x134>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d906      	bls.n	80041b2 <USB_SetTurnaroundTime+0xae>
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	4a25      	ldr	r2, [pc, #148]	; (800423c <USB_SetTurnaroundTime+0x138>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d202      	bcs.n	80041b2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80041ac:	2309      	movs	r3, #9
 80041ae:	617b      	str	r3, [r7, #20]
 80041b0:	e020      	b.n	80041f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	4a21      	ldr	r2, [pc, #132]	; (800423c <USB_SetTurnaroundTime+0x138>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d306      	bcc.n	80041c8 <USB_SetTurnaroundTime+0xc4>
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	4a20      	ldr	r2, [pc, #128]	; (8004240 <USB_SetTurnaroundTime+0x13c>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d802      	bhi.n	80041c8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80041c2:	2308      	movs	r3, #8
 80041c4:	617b      	str	r3, [r7, #20]
 80041c6:	e015      	b.n	80041f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	4a1d      	ldr	r2, [pc, #116]	; (8004240 <USB_SetTurnaroundTime+0x13c>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d906      	bls.n	80041de <USB_SetTurnaroundTime+0xda>
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	4a1c      	ldr	r2, [pc, #112]	; (8004244 <USB_SetTurnaroundTime+0x140>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d202      	bcs.n	80041de <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80041d8:	2307      	movs	r3, #7
 80041da:	617b      	str	r3, [r7, #20]
 80041dc:	e00a      	b.n	80041f4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80041de:	2306      	movs	r3, #6
 80041e0:	617b      	str	r3, [r7, #20]
 80041e2:	e007      	b.n	80041f4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80041e4:	79fb      	ldrb	r3, [r7, #7]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d102      	bne.n	80041f0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80041ea:	2309      	movs	r3, #9
 80041ec:	617b      	str	r3, [r7, #20]
 80041ee:	e001      	b.n	80041f4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80041f0:	2309      	movs	r3, #9
 80041f2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	68da      	ldr	r2, [r3, #12]
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	029b      	lsls	r3, r3, #10
 8004208:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800420c:	431a      	orrs	r2, r3
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004212:	2300      	movs	r3, #0
}
 8004214:	4618      	mov	r0, r3
 8004216:	371c      	adds	r7, #28
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr
 8004220:	00d8acbf 	.word	0x00d8acbf
 8004224:	00e4e1c0 	.word	0x00e4e1c0
 8004228:	00f42400 	.word	0x00f42400
 800422c:	01067380 	.word	0x01067380
 8004230:	011a499f 	.word	0x011a499f
 8004234:	01312cff 	.word	0x01312cff
 8004238:	014ca43f 	.word	0x014ca43f
 800423c:	016e3600 	.word	0x016e3600
 8004240:	01a6ab1f 	.word	0x01a6ab1f
 8004244:	01e84800 	.word	0x01e84800

08004248 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004248:	b480      	push	{r7}
 800424a:	b083      	sub	sp, #12
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	f043 0201 	orr.w	r2, r3, #1
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800425c:	2300      	movs	r3, #0
}
 800425e:	4618      	mov	r0, r3
 8004260:	370c      	adds	r7, #12
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr

0800426a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800426a:	b480      	push	{r7}
 800426c:	b083      	sub	sp, #12
 800426e:	af00      	add	r7, sp, #0
 8004270:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	f023 0201 	bic.w	r2, r3, #1
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800427e:	2300      	movs	r3, #0
}
 8004280:	4618      	mov	r0, r3
 8004282:	370c      	adds	r7, #12
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b082      	sub	sp, #8
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	460b      	mov	r3, r1
 8004296:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80042a4:	78fb      	ldrb	r3, [r7, #3]
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d106      	bne.n	80042b8 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	60da      	str	r2, [r3, #12]
 80042b6:	e00b      	b.n	80042d0 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80042b8:	78fb      	ldrb	r3, [r7, #3]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d106      	bne.n	80042cc <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	60da      	str	r2, [r3, #12]
 80042ca:	e001      	b.n	80042d0 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	e003      	b.n	80042d8 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80042d0:	2032      	movs	r0, #50	; 0x32
 80042d2:	f7fc fbb9 	bl	8000a48 <HAL_Delay>

  return HAL_OK;
 80042d6:	2300      	movs	r3, #0
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3708      	adds	r7, #8
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}

080042e0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80042e0:	b084      	sub	sp, #16
 80042e2:	b580      	push	{r7, lr}
 80042e4:	b086      	sub	sp, #24
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
 80042ea:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80042ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80042f2:	2300      	movs	r3, #0
 80042f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80042fa:	2300      	movs	r3, #0
 80042fc:	613b      	str	r3, [r7, #16]
 80042fe:	e009      	b.n	8004314 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	3340      	adds	r3, #64	; 0x40
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	4413      	add	r3, r2
 800430a:	2200      	movs	r2, #0
 800430c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	3301      	adds	r3, #1
 8004312:	613b      	str	r3, [r7, #16]
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	2b0e      	cmp	r3, #14
 8004318:	d9f2      	bls.n	8004300 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800431a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800431c:	2b00      	cmp	r3, #0
 800431e:	d11c      	bne.n	800435a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	68fa      	ldr	r2, [r7, #12]
 800432a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800432e:	f043 0302 	orr.w	r3, r3, #2
 8004332:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004338:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004344:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004350:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	639a      	str	r2, [r3, #56]	; 0x38
 8004358:	e00b      	b.n	8004372 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800435e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800436a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004378:	461a      	mov	r2, r3
 800437a:	2300      	movs	r3, #0
 800437c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004384:	4619      	mov	r1, r3
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800438c:	461a      	mov	r2, r3
 800438e:	680b      	ldr	r3, [r1, #0]
 8004390:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004394:	2b01      	cmp	r3, #1
 8004396:	d10c      	bne.n	80043b2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800439a:	2b00      	cmp	r3, #0
 800439c:	d104      	bne.n	80043a8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800439e:	2100      	movs	r1, #0
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f000 f949 	bl	8004638 <USB_SetDevSpeed>
 80043a6:	e008      	b.n	80043ba <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80043a8:	2101      	movs	r1, #1
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f000 f944 	bl	8004638 <USB_SetDevSpeed>
 80043b0:	e003      	b.n	80043ba <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80043b2:	2103      	movs	r1, #3
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f000 f93f 	bl	8004638 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80043ba:	2110      	movs	r1, #16
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f000 f8f3 	bl	80045a8 <USB_FlushTxFifo>
 80043c2:	4603      	mov	r3, r0
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d001      	beq.n	80043cc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f000 f911 	bl	80045f4 <USB_FlushRxFifo>
 80043d2:	4603      	mov	r3, r0
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d001      	beq.n	80043dc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043e2:	461a      	mov	r2, r3
 80043e4:	2300      	movs	r3, #0
 80043e6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043ee:	461a      	mov	r2, r3
 80043f0:	2300      	movs	r3, #0
 80043f2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043fa:	461a      	mov	r2, r3
 80043fc:	2300      	movs	r3, #0
 80043fe:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004400:	2300      	movs	r3, #0
 8004402:	613b      	str	r3, [r7, #16]
 8004404:	e043      	b.n	800448e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	015a      	lsls	r2, r3, #5
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	4413      	add	r3, r2
 800440e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004418:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800441c:	d118      	bne.n	8004450 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d10a      	bne.n	800443a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	015a      	lsls	r2, r3, #5
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	4413      	add	r3, r2
 800442c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004430:	461a      	mov	r2, r3
 8004432:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004436:	6013      	str	r3, [r2, #0]
 8004438:	e013      	b.n	8004462 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	015a      	lsls	r2, r3, #5
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	4413      	add	r3, r2
 8004442:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004446:	461a      	mov	r2, r3
 8004448:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800444c:	6013      	str	r3, [r2, #0]
 800444e:	e008      	b.n	8004462 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	015a      	lsls	r2, r3, #5
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	4413      	add	r3, r2
 8004458:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800445c:	461a      	mov	r2, r3
 800445e:	2300      	movs	r3, #0
 8004460:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	015a      	lsls	r2, r3, #5
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	4413      	add	r3, r2
 800446a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800446e:	461a      	mov	r2, r3
 8004470:	2300      	movs	r3, #0
 8004472:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	015a      	lsls	r2, r3, #5
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	4413      	add	r3, r2
 800447c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004480:	461a      	mov	r2, r3
 8004482:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004486:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	3301      	adds	r3, #1
 800448c:	613b      	str	r3, [r7, #16]
 800448e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004490:	693a      	ldr	r2, [r7, #16]
 8004492:	429a      	cmp	r2, r3
 8004494:	d3b7      	bcc.n	8004406 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004496:	2300      	movs	r3, #0
 8004498:	613b      	str	r3, [r7, #16]
 800449a:	e043      	b.n	8004524 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	015a      	lsls	r2, r3, #5
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	4413      	add	r3, r2
 80044a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80044ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80044b2:	d118      	bne.n	80044e6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d10a      	bne.n	80044d0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	015a      	lsls	r2, r3, #5
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	4413      	add	r3, r2
 80044c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044c6:	461a      	mov	r2, r3
 80044c8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80044cc:	6013      	str	r3, [r2, #0]
 80044ce:	e013      	b.n	80044f8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	015a      	lsls	r2, r3, #5
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	4413      	add	r3, r2
 80044d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044dc:	461a      	mov	r2, r3
 80044de:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80044e2:	6013      	str	r3, [r2, #0]
 80044e4:	e008      	b.n	80044f8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	015a      	lsls	r2, r3, #5
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	4413      	add	r3, r2
 80044ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044f2:	461a      	mov	r2, r3
 80044f4:	2300      	movs	r3, #0
 80044f6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	015a      	lsls	r2, r3, #5
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	4413      	add	r3, r2
 8004500:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004504:	461a      	mov	r2, r3
 8004506:	2300      	movs	r3, #0
 8004508:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	015a      	lsls	r2, r3, #5
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	4413      	add	r3, r2
 8004512:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004516:	461a      	mov	r2, r3
 8004518:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800451c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	3301      	adds	r3, #1
 8004522:	613b      	str	r3, [r7, #16]
 8004524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004526:	693a      	ldr	r2, [r7, #16]
 8004528:	429a      	cmp	r2, r3
 800452a:	d3b7      	bcc.n	800449c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004532:	691b      	ldr	r3, [r3, #16]
 8004534:	68fa      	ldr	r2, [r7, #12]
 8004536:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800453a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800453e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800454c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800454e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004550:	2b00      	cmp	r3, #0
 8004552:	d105      	bne.n	8004560 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	699b      	ldr	r3, [r3, #24]
 8004558:	f043 0210 	orr.w	r2, r3, #16
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	699a      	ldr	r2, [r3, #24]
 8004564:	4b0f      	ldr	r3, [pc, #60]	; (80045a4 <USB_DevInit+0x2c4>)
 8004566:	4313      	orrs	r3, r2
 8004568:	687a      	ldr	r2, [r7, #4]
 800456a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800456c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800456e:	2b00      	cmp	r3, #0
 8004570:	d005      	beq.n	800457e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	699b      	ldr	r3, [r3, #24]
 8004576:	f043 0208 	orr.w	r2, r3, #8
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800457e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004580:	2b01      	cmp	r3, #1
 8004582:	d107      	bne.n	8004594 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	699b      	ldr	r3, [r3, #24]
 8004588:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800458c:	f043 0304 	orr.w	r3, r3, #4
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004594:	7dfb      	ldrb	r3, [r7, #23]
}
 8004596:	4618      	mov	r0, r3
 8004598:	3718      	adds	r7, #24
 800459a:	46bd      	mov	sp, r7
 800459c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80045a0:	b004      	add	sp, #16
 80045a2:	4770      	bx	lr
 80045a4:	803c3800 	.word	0x803c3800

080045a8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b085      	sub	sp, #20
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80045b2:	2300      	movs	r3, #0
 80045b4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	019b      	lsls	r3, r3, #6
 80045ba:	f043 0220 	orr.w	r2, r3, #32
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	3301      	adds	r3, #1
 80045c6:	60fb      	str	r3, [r7, #12]
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	4a09      	ldr	r2, [pc, #36]	; (80045f0 <USB_FlushTxFifo+0x48>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d901      	bls.n	80045d4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80045d0:	2303      	movs	r3, #3
 80045d2:	e006      	b.n	80045e2 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	691b      	ldr	r3, [r3, #16]
 80045d8:	f003 0320 	and.w	r3, r3, #32
 80045dc:	2b20      	cmp	r3, #32
 80045de:	d0f0      	beq.n	80045c2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3714      	adds	r7, #20
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr
 80045ee:	bf00      	nop
 80045f0:	00030d40 	.word	0x00030d40

080045f4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b085      	sub	sp, #20
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80045fc:	2300      	movs	r3, #0
 80045fe:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2210      	movs	r2, #16
 8004604:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	3301      	adds	r3, #1
 800460a:	60fb      	str	r3, [r7, #12]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	4a09      	ldr	r2, [pc, #36]	; (8004634 <USB_FlushRxFifo+0x40>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d901      	bls.n	8004618 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004614:	2303      	movs	r3, #3
 8004616:	e006      	b.n	8004626 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	691b      	ldr	r3, [r3, #16]
 800461c:	f003 0310 	and.w	r3, r3, #16
 8004620:	2b10      	cmp	r3, #16
 8004622:	d0f0      	beq.n	8004606 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004624:	2300      	movs	r3, #0
}
 8004626:	4618      	mov	r0, r3
 8004628:	3714      	adds	r7, #20
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr
 8004632:	bf00      	nop
 8004634:	00030d40 	.word	0x00030d40

08004638 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004638:	b480      	push	{r7}
 800463a:	b085      	sub	sp, #20
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	460b      	mov	r3, r1
 8004642:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	78fb      	ldrb	r3, [r7, #3]
 8004652:	68f9      	ldr	r1, [r7, #12]
 8004654:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004658:	4313      	orrs	r3, r2
 800465a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800465c:	2300      	movs	r3, #0
}
 800465e:	4618      	mov	r0, r3
 8004660:	3714      	adds	r7, #20
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr

0800466a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800466a:	b480      	push	{r7}
 800466c:	b087      	sub	sp, #28
 800466e:	af00      	add	r7, sp, #0
 8004670:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	f003 0306 	and.w	r3, r3, #6
 8004682:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d102      	bne.n	8004690 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800468a:	2300      	movs	r3, #0
 800468c:	75fb      	strb	r3, [r7, #23]
 800468e:	e00a      	b.n	80046a6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2b02      	cmp	r3, #2
 8004694:	d002      	beq.n	800469c <USB_GetDevSpeed+0x32>
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2b06      	cmp	r3, #6
 800469a:	d102      	bne.n	80046a2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800469c:	2302      	movs	r3, #2
 800469e:	75fb      	strb	r3, [r7, #23]
 80046a0:	e001      	b.n	80046a6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80046a2:	230f      	movs	r3, #15
 80046a4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80046a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	371c      	adds	r7, #28
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr

080046b4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b085      	sub	sp, #20
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	781b      	ldrb	r3, [r3, #0]
 80046c6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	785b      	ldrb	r3, [r3, #1]
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d13a      	bne.n	8004746 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046d6:	69da      	ldr	r2, [r3, #28]
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	f003 030f 	and.w	r3, r3, #15
 80046e0:	2101      	movs	r1, #1
 80046e2:	fa01 f303 	lsl.w	r3, r1, r3
 80046e6:	b29b      	uxth	r3, r3
 80046e8:	68f9      	ldr	r1, [r7, #12]
 80046ea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046ee:	4313      	orrs	r3, r2
 80046f0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	015a      	lsls	r2, r3, #5
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	4413      	add	r3, r2
 80046fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004704:	2b00      	cmp	r3, #0
 8004706:	d155      	bne.n	80047b4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	015a      	lsls	r2, r3, #5
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	4413      	add	r3, r2
 8004710:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	78db      	ldrb	r3, [r3, #3]
 8004722:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004724:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	059b      	lsls	r3, r3, #22
 800472a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800472c:	4313      	orrs	r3, r2
 800472e:	68ba      	ldr	r2, [r7, #8]
 8004730:	0151      	lsls	r1, r2, #5
 8004732:	68fa      	ldr	r2, [r7, #12]
 8004734:	440a      	add	r2, r1
 8004736:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800473a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800473e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004742:	6013      	str	r3, [r2, #0]
 8004744:	e036      	b.n	80047b4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800474c:	69da      	ldr	r2, [r3, #28]
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	781b      	ldrb	r3, [r3, #0]
 8004752:	f003 030f 	and.w	r3, r3, #15
 8004756:	2101      	movs	r1, #1
 8004758:	fa01 f303 	lsl.w	r3, r1, r3
 800475c:	041b      	lsls	r3, r3, #16
 800475e:	68f9      	ldr	r1, [r7, #12]
 8004760:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004764:	4313      	orrs	r3, r2
 8004766:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	015a      	lsls	r2, r3, #5
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	4413      	add	r3, r2
 8004770:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d11a      	bne.n	80047b4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	015a      	lsls	r2, r3, #5
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	4413      	add	r3, r2
 8004786:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	78db      	ldrb	r3, [r3, #3]
 8004798:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800479a:	430b      	orrs	r3, r1
 800479c:	4313      	orrs	r3, r2
 800479e:	68ba      	ldr	r2, [r7, #8]
 80047a0:	0151      	lsls	r1, r2, #5
 80047a2:	68fa      	ldr	r2, [r7, #12]
 80047a4:	440a      	add	r2, r1
 80047a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047b2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80047b4:	2300      	movs	r3, #0
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3714      	adds	r7, #20
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr
	...

080047c4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b085      	sub	sp, #20
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	781b      	ldrb	r3, [r3, #0]
 80047d6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	785b      	ldrb	r3, [r3, #1]
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d161      	bne.n	80048a4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	015a      	lsls	r2, r3, #5
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	4413      	add	r3, r2
 80047e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80047f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047f6:	d11f      	bne.n	8004838 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	015a      	lsls	r2, r3, #5
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	4413      	add	r3, r2
 8004800:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	68ba      	ldr	r2, [r7, #8]
 8004808:	0151      	lsls	r1, r2, #5
 800480a:	68fa      	ldr	r2, [r7, #12]
 800480c:	440a      	add	r2, r1
 800480e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004812:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004816:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	015a      	lsls	r2, r3, #5
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	4413      	add	r3, r2
 8004820:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	68ba      	ldr	r2, [r7, #8]
 8004828:	0151      	lsls	r1, r2, #5
 800482a:	68fa      	ldr	r2, [r7, #12]
 800482c:	440a      	add	r2, r1
 800482e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004832:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004836:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800483e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	781b      	ldrb	r3, [r3, #0]
 8004844:	f003 030f 	and.w	r3, r3, #15
 8004848:	2101      	movs	r1, #1
 800484a:	fa01 f303 	lsl.w	r3, r1, r3
 800484e:	b29b      	uxth	r3, r3
 8004850:	43db      	mvns	r3, r3
 8004852:	68f9      	ldr	r1, [r7, #12]
 8004854:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004858:	4013      	ands	r3, r2
 800485a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004862:	69da      	ldr	r2, [r3, #28]
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	781b      	ldrb	r3, [r3, #0]
 8004868:	f003 030f 	and.w	r3, r3, #15
 800486c:	2101      	movs	r1, #1
 800486e:	fa01 f303 	lsl.w	r3, r1, r3
 8004872:	b29b      	uxth	r3, r3
 8004874:	43db      	mvns	r3, r3
 8004876:	68f9      	ldr	r1, [r7, #12]
 8004878:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800487c:	4013      	ands	r3, r2
 800487e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	015a      	lsls	r2, r3, #5
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	4413      	add	r3, r2
 8004888:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	0159      	lsls	r1, r3, #5
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	440b      	add	r3, r1
 8004896:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800489a:	4619      	mov	r1, r3
 800489c:	4b35      	ldr	r3, [pc, #212]	; (8004974 <USB_DeactivateEndpoint+0x1b0>)
 800489e:	4013      	ands	r3, r2
 80048a0:	600b      	str	r3, [r1, #0]
 80048a2:	e060      	b.n	8004966 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	015a      	lsls	r2, r3, #5
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	4413      	add	r3, r2
 80048ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80048b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80048ba:	d11f      	bne.n	80048fc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	015a      	lsls	r2, r3, #5
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	4413      	add	r3, r2
 80048c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	68ba      	ldr	r2, [r7, #8]
 80048cc:	0151      	lsls	r1, r2, #5
 80048ce:	68fa      	ldr	r2, [r7, #12]
 80048d0:	440a      	add	r2, r1
 80048d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048d6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80048da:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	015a      	lsls	r2, r3, #5
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	4413      	add	r3, r2
 80048e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	68ba      	ldr	r2, [r7, #8]
 80048ec:	0151      	lsls	r1, r2, #5
 80048ee:	68fa      	ldr	r2, [r7, #12]
 80048f0:	440a      	add	r2, r1
 80048f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048f6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80048fa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004902:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	781b      	ldrb	r3, [r3, #0]
 8004908:	f003 030f 	and.w	r3, r3, #15
 800490c:	2101      	movs	r1, #1
 800490e:	fa01 f303 	lsl.w	r3, r1, r3
 8004912:	041b      	lsls	r3, r3, #16
 8004914:	43db      	mvns	r3, r3
 8004916:	68f9      	ldr	r1, [r7, #12]
 8004918:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800491c:	4013      	ands	r3, r2
 800491e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004926:	69da      	ldr	r2, [r3, #28]
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	781b      	ldrb	r3, [r3, #0]
 800492c:	f003 030f 	and.w	r3, r3, #15
 8004930:	2101      	movs	r1, #1
 8004932:	fa01 f303 	lsl.w	r3, r1, r3
 8004936:	041b      	lsls	r3, r3, #16
 8004938:	43db      	mvns	r3, r3
 800493a:	68f9      	ldr	r1, [r7, #12]
 800493c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004940:	4013      	ands	r3, r2
 8004942:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	015a      	lsls	r2, r3, #5
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	4413      	add	r3, r2
 800494c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	0159      	lsls	r1, r3, #5
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	440b      	add	r3, r1
 800495a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800495e:	4619      	mov	r1, r3
 8004960:	4b05      	ldr	r3, [pc, #20]	; (8004978 <USB_DeactivateEndpoint+0x1b4>)
 8004962:	4013      	ands	r3, r2
 8004964:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004966:	2300      	movs	r3, #0
}
 8004968:	4618      	mov	r0, r3
 800496a:	3714      	adds	r7, #20
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr
 8004974:	ec337800 	.word	0xec337800
 8004978:	eff37800 	.word	0xeff37800

0800497c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b08a      	sub	sp, #40	; 0x28
 8004980:	af02      	add	r7, sp, #8
 8004982:	60f8      	str	r0, [r7, #12]
 8004984:	60b9      	str	r1, [r7, #8]
 8004986:	4613      	mov	r3, r2
 8004988:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	781b      	ldrb	r3, [r3, #0]
 8004992:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	785b      	ldrb	r3, [r3, #1]
 8004998:	2b01      	cmp	r3, #1
 800499a:	f040 815c 	bne.w	8004c56 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	695b      	ldr	r3, [r3, #20]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d132      	bne.n	8004a0c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80049a6:	69bb      	ldr	r3, [r7, #24]
 80049a8:	015a      	lsls	r2, r3, #5
 80049aa:	69fb      	ldr	r3, [r7, #28]
 80049ac:	4413      	add	r3, r2
 80049ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049b2:	691b      	ldr	r3, [r3, #16]
 80049b4:	69ba      	ldr	r2, [r7, #24]
 80049b6:	0151      	lsls	r1, r2, #5
 80049b8:	69fa      	ldr	r2, [r7, #28]
 80049ba:	440a      	add	r2, r1
 80049bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049c0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80049c4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80049c8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80049ca:	69bb      	ldr	r3, [r7, #24]
 80049cc:	015a      	lsls	r2, r3, #5
 80049ce:	69fb      	ldr	r3, [r7, #28]
 80049d0:	4413      	add	r3, r2
 80049d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049d6:	691b      	ldr	r3, [r3, #16]
 80049d8:	69ba      	ldr	r2, [r7, #24]
 80049da:	0151      	lsls	r1, r2, #5
 80049dc:	69fa      	ldr	r2, [r7, #28]
 80049de:	440a      	add	r2, r1
 80049e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80049e8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80049ea:	69bb      	ldr	r3, [r7, #24]
 80049ec:	015a      	lsls	r2, r3, #5
 80049ee:	69fb      	ldr	r3, [r7, #28]
 80049f0:	4413      	add	r3, r2
 80049f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049f6:	691b      	ldr	r3, [r3, #16]
 80049f8:	69ba      	ldr	r2, [r7, #24]
 80049fa:	0151      	lsls	r1, r2, #5
 80049fc:	69fa      	ldr	r2, [r7, #28]
 80049fe:	440a      	add	r2, r1
 8004a00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a04:	0cdb      	lsrs	r3, r3, #19
 8004a06:	04db      	lsls	r3, r3, #19
 8004a08:	6113      	str	r3, [r2, #16]
 8004a0a:	e074      	b.n	8004af6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004a0c:	69bb      	ldr	r3, [r7, #24]
 8004a0e:	015a      	lsls	r2, r3, #5
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	4413      	add	r3, r2
 8004a14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	69ba      	ldr	r2, [r7, #24]
 8004a1c:	0151      	lsls	r1, r2, #5
 8004a1e:	69fa      	ldr	r2, [r7, #28]
 8004a20:	440a      	add	r2, r1
 8004a22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a26:	0cdb      	lsrs	r3, r3, #19
 8004a28:	04db      	lsls	r3, r3, #19
 8004a2a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004a2c:	69bb      	ldr	r3, [r7, #24]
 8004a2e:	015a      	lsls	r2, r3, #5
 8004a30:	69fb      	ldr	r3, [r7, #28]
 8004a32:	4413      	add	r3, r2
 8004a34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a38:	691b      	ldr	r3, [r3, #16]
 8004a3a:	69ba      	ldr	r2, [r7, #24]
 8004a3c:	0151      	lsls	r1, r2, #5
 8004a3e:	69fa      	ldr	r2, [r7, #28]
 8004a40:	440a      	add	r2, r1
 8004a42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a46:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004a4a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004a4e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004a50:	69bb      	ldr	r3, [r7, #24]
 8004a52:	015a      	lsls	r2, r3, #5
 8004a54:	69fb      	ldr	r3, [r7, #28]
 8004a56:	4413      	add	r3, r2
 8004a58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a5c:	691a      	ldr	r2, [r3, #16]
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	6959      	ldr	r1, [r3, #20]
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	440b      	add	r3, r1
 8004a68:	1e59      	subs	r1, r3, #1
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a72:	04d9      	lsls	r1, r3, #19
 8004a74:	4b9d      	ldr	r3, [pc, #628]	; (8004cec <USB_EPStartXfer+0x370>)
 8004a76:	400b      	ands	r3, r1
 8004a78:	69b9      	ldr	r1, [r7, #24]
 8004a7a:	0148      	lsls	r0, r1, #5
 8004a7c:	69f9      	ldr	r1, [r7, #28]
 8004a7e:	4401      	add	r1, r0
 8004a80:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004a84:	4313      	orrs	r3, r2
 8004a86:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004a88:	69bb      	ldr	r3, [r7, #24]
 8004a8a:	015a      	lsls	r2, r3, #5
 8004a8c:	69fb      	ldr	r3, [r7, #28]
 8004a8e:	4413      	add	r3, r2
 8004a90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a94:	691a      	ldr	r2, [r3, #16]
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	695b      	ldr	r3, [r3, #20]
 8004a9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a9e:	69b9      	ldr	r1, [r7, #24]
 8004aa0:	0148      	lsls	r0, r1, #5
 8004aa2:	69f9      	ldr	r1, [r7, #28]
 8004aa4:	4401      	add	r1, r0
 8004aa6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	78db      	ldrb	r3, [r3, #3]
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d11f      	bne.n	8004af6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004ab6:	69bb      	ldr	r3, [r7, #24]
 8004ab8:	015a      	lsls	r2, r3, #5
 8004aba:	69fb      	ldr	r3, [r7, #28]
 8004abc:	4413      	add	r3, r2
 8004abe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ac2:	691b      	ldr	r3, [r3, #16]
 8004ac4:	69ba      	ldr	r2, [r7, #24]
 8004ac6:	0151      	lsls	r1, r2, #5
 8004ac8:	69fa      	ldr	r2, [r7, #28]
 8004aca:	440a      	add	r2, r1
 8004acc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ad0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004ad4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004ad6:	69bb      	ldr	r3, [r7, #24]
 8004ad8:	015a      	lsls	r2, r3, #5
 8004ada:	69fb      	ldr	r3, [r7, #28]
 8004adc:	4413      	add	r3, r2
 8004ade:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ae2:	691b      	ldr	r3, [r3, #16]
 8004ae4:	69ba      	ldr	r2, [r7, #24]
 8004ae6:	0151      	lsls	r1, r2, #5
 8004ae8:	69fa      	ldr	r2, [r7, #28]
 8004aea:	440a      	add	r2, r1
 8004aec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004af0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004af4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004af6:	79fb      	ldrb	r3, [r7, #7]
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d14b      	bne.n	8004b94 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	691b      	ldr	r3, [r3, #16]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d009      	beq.n	8004b18 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004b04:	69bb      	ldr	r3, [r7, #24]
 8004b06:	015a      	lsls	r2, r3, #5
 8004b08:	69fb      	ldr	r3, [r7, #28]
 8004b0a:	4413      	add	r3, r2
 8004b0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b10:	461a      	mov	r2, r3
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	691b      	ldr	r3, [r3, #16]
 8004b16:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	78db      	ldrb	r3, [r3, #3]
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d128      	bne.n	8004b72 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004b20:	69fb      	ldr	r3, [r7, #28]
 8004b22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d110      	bne.n	8004b52 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004b30:	69bb      	ldr	r3, [r7, #24]
 8004b32:	015a      	lsls	r2, r3, #5
 8004b34:	69fb      	ldr	r3, [r7, #28]
 8004b36:	4413      	add	r3, r2
 8004b38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	69ba      	ldr	r2, [r7, #24]
 8004b40:	0151      	lsls	r1, r2, #5
 8004b42:	69fa      	ldr	r2, [r7, #28]
 8004b44:	440a      	add	r2, r1
 8004b46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b4a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004b4e:	6013      	str	r3, [r2, #0]
 8004b50:	e00f      	b.n	8004b72 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004b52:	69bb      	ldr	r3, [r7, #24]
 8004b54:	015a      	lsls	r2, r3, #5
 8004b56:	69fb      	ldr	r3, [r7, #28]
 8004b58:	4413      	add	r3, r2
 8004b5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	69ba      	ldr	r2, [r7, #24]
 8004b62:	0151      	lsls	r1, r2, #5
 8004b64:	69fa      	ldr	r2, [r7, #28]
 8004b66:	440a      	add	r2, r1
 8004b68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b70:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004b72:	69bb      	ldr	r3, [r7, #24]
 8004b74:	015a      	lsls	r2, r3, #5
 8004b76:	69fb      	ldr	r3, [r7, #28]
 8004b78:	4413      	add	r3, r2
 8004b7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	69ba      	ldr	r2, [r7, #24]
 8004b82:	0151      	lsls	r1, r2, #5
 8004b84:	69fa      	ldr	r2, [r7, #28]
 8004b86:	440a      	add	r2, r1
 8004b88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b8c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004b90:	6013      	str	r3, [r2, #0]
 8004b92:	e12f      	b.n	8004df4 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004b94:	69bb      	ldr	r3, [r7, #24]
 8004b96:	015a      	lsls	r2, r3, #5
 8004b98:	69fb      	ldr	r3, [r7, #28]
 8004b9a:	4413      	add	r3, r2
 8004b9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	69ba      	ldr	r2, [r7, #24]
 8004ba4:	0151      	lsls	r1, r2, #5
 8004ba6:	69fa      	ldr	r2, [r7, #28]
 8004ba8:	440a      	add	r2, r1
 8004baa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004bb2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	78db      	ldrb	r3, [r3, #3]
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d015      	beq.n	8004be8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	695b      	ldr	r3, [r3, #20]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	f000 8117 	beq.w	8004df4 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004bc6:	69fb      	ldr	r3, [r7, #28]
 8004bc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bcc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	781b      	ldrb	r3, [r3, #0]
 8004bd2:	f003 030f 	and.w	r3, r3, #15
 8004bd6:	2101      	movs	r1, #1
 8004bd8:	fa01 f303 	lsl.w	r3, r1, r3
 8004bdc:	69f9      	ldr	r1, [r7, #28]
 8004bde:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004be2:	4313      	orrs	r3, r2
 8004be4:	634b      	str	r3, [r1, #52]	; 0x34
 8004be6:	e105      	b.n	8004df4 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004be8:	69fb      	ldr	r3, [r7, #28]
 8004bea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d110      	bne.n	8004c1a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004bf8:	69bb      	ldr	r3, [r7, #24]
 8004bfa:	015a      	lsls	r2, r3, #5
 8004bfc:	69fb      	ldr	r3, [r7, #28]
 8004bfe:	4413      	add	r3, r2
 8004c00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	69ba      	ldr	r2, [r7, #24]
 8004c08:	0151      	lsls	r1, r2, #5
 8004c0a:	69fa      	ldr	r2, [r7, #28]
 8004c0c:	440a      	add	r2, r1
 8004c0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c12:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004c16:	6013      	str	r3, [r2, #0]
 8004c18:	e00f      	b.n	8004c3a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004c1a:	69bb      	ldr	r3, [r7, #24]
 8004c1c:	015a      	lsls	r2, r3, #5
 8004c1e:	69fb      	ldr	r3, [r7, #28]
 8004c20:	4413      	add	r3, r2
 8004c22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	69ba      	ldr	r2, [r7, #24]
 8004c2a:	0151      	lsls	r1, r2, #5
 8004c2c:	69fa      	ldr	r2, [r7, #28]
 8004c2e:	440a      	add	r2, r1
 8004c30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c38:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	68d9      	ldr	r1, [r3, #12]
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	781a      	ldrb	r2, [r3, #0]
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	695b      	ldr	r3, [r3, #20]
 8004c46:	b298      	uxth	r0, r3
 8004c48:	79fb      	ldrb	r3, [r7, #7]
 8004c4a:	9300      	str	r3, [sp, #0]
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	68f8      	ldr	r0, [r7, #12]
 8004c50:	f000 fa2b 	bl	80050aa <USB_WritePacket>
 8004c54:	e0ce      	b.n	8004df4 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004c56:	69bb      	ldr	r3, [r7, #24]
 8004c58:	015a      	lsls	r2, r3, #5
 8004c5a:	69fb      	ldr	r3, [r7, #28]
 8004c5c:	4413      	add	r3, r2
 8004c5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c62:	691b      	ldr	r3, [r3, #16]
 8004c64:	69ba      	ldr	r2, [r7, #24]
 8004c66:	0151      	lsls	r1, r2, #5
 8004c68:	69fa      	ldr	r2, [r7, #28]
 8004c6a:	440a      	add	r2, r1
 8004c6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c70:	0cdb      	lsrs	r3, r3, #19
 8004c72:	04db      	lsls	r3, r3, #19
 8004c74:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004c76:	69bb      	ldr	r3, [r7, #24]
 8004c78:	015a      	lsls	r2, r3, #5
 8004c7a:	69fb      	ldr	r3, [r7, #28]
 8004c7c:	4413      	add	r3, r2
 8004c7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c82:	691b      	ldr	r3, [r3, #16]
 8004c84:	69ba      	ldr	r2, [r7, #24]
 8004c86:	0151      	lsls	r1, r2, #5
 8004c88:	69fa      	ldr	r2, [r7, #28]
 8004c8a:	440a      	add	r2, r1
 8004c8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c90:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004c94:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004c98:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	695b      	ldr	r3, [r3, #20]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d126      	bne.n	8004cf0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004ca2:	69bb      	ldr	r3, [r7, #24]
 8004ca4:	015a      	lsls	r2, r3, #5
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	4413      	add	r3, r2
 8004caa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cae:	691a      	ldr	r2, [r3, #16]
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cb8:	69b9      	ldr	r1, [r7, #24]
 8004cba:	0148      	lsls	r0, r1, #5
 8004cbc:	69f9      	ldr	r1, [r7, #28]
 8004cbe:	4401      	add	r1, r0
 8004cc0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004cc8:	69bb      	ldr	r3, [r7, #24]
 8004cca:	015a      	lsls	r2, r3, #5
 8004ccc:	69fb      	ldr	r3, [r7, #28]
 8004cce:	4413      	add	r3, r2
 8004cd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cd4:	691b      	ldr	r3, [r3, #16]
 8004cd6:	69ba      	ldr	r2, [r7, #24]
 8004cd8:	0151      	lsls	r1, r2, #5
 8004cda:	69fa      	ldr	r2, [r7, #28]
 8004cdc:	440a      	add	r2, r1
 8004cde:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ce2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004ce6:	6113      	str	r3, [r2, #16]
 8004ce8:	e036      	b.n	8004d58 <USB_EPStartXfer+0x3dc>
 8004cea:	bf00      	nop
 8004cec:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	695a      	ldr	r2, [r3, #20]
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	4413      	add	r3, r2
 8004cfa:	1e5a      	subs	r2, r3, #1
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d04:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004d06:	69bb      	ldr	r3, [r7, #24]
 8004d08:	015a      	lsls	r2, r3, #5
 8004d0a:	69fb      	ldr	r3, [r7, #28]
 8004d0c:	4413      	add	r3, r2
 8004d0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d12:	691a      	ldr	r2, [r3, #16]
 8004d14:	8afb      	ldrh	r3, [r7, #22]
 8004d16:	04d9      	lsls	r1, r3, #19
 8004d18:	4b39      	ldr	r3, [pc, #228]	; (8004e00 <USB_EPStartXfer+0x484>)
 8004d1a:	400b      	ands	r3, r1
 8004d1c:	69b9      	ldr	r1, [r7, #24]
 8004d1e:	0148      	lsls	r0, r1, #5
 8004d20:	69f9      	ldr	r1, [r7, #28]
 8004d22:	4401      	add	r1, r0
 8004d24:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004d2c:	69bb      	ldr	r3, [r7, #24]
 8004d2e:	015a      	lsls	r2, r3, #5
 8004d30:	69fb      	ldr	r3, [r7, #28]
 8004d32:	4413      	add	r3, r2
 8004d34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d38:	691a      	ldr	r2, [r3, #16]
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	8af9      	ldrh	r1, [r7, #22]
 8004d40:	fb01 f303 	mul.w	r3, r1, r3
 8004d44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d48:	69b9      	ldr	r1, [r7, #24]
 8004d4a:	0148      	lsls	r0, r1, #5
 8004d4c:	69f9      	ldr	r1, [r7, #28]
 8004d4e:	4401      	add	r1, r0
 8004d50:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004d54:	4313      	orrs	r3, r2
 8004d56:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004d58:	79fb      	ldrb	r3, [r7, #7]
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d10d      	bne.n	8004d7a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d009      	beq.n	8004d7a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	68d9      	ldr	r1, [r3, #12]
 8004d6a:	69bb      	ldr	r3, [r7, #24]
 8004d6c:	015a      	lsls	r2, r3, #5
 8004d6e:	69fb      	ldr	r3, [r7, #28]
 8004d70:	4413      	add	r3, r2
 8004d72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d76:	460a      	mov	r2, r1
 8004d78:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	78db      	ldrb	r3, [r3, #3]
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d128      	bne.n	8004dd4 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004d82:	69fb      	ldr	r3, [r7, #28]
 8004d84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d110      	bne.n	8004db4 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004d92:	69bb      	ldr	r3, [r7, #24]
 8004d94:	015a      	lsls	r2, r3, #5
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	4413      	add	r3, r2
 8004d9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	69ba      	ldr	r2, [r7, #24]
 8004da2:	0151      	lsls	r1, r2, #5
 8004da4:	69fa      	ldr	r2, [r7, #28]
 8004da6:	440a      	add	r2, r1
 8004da8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004db0:	6013      	str	r3, [r2, #0]
 8004db2:	e00f      	b.n	8004dd4 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004db4:	69bb      	ldr	r3, [r7, #24]
 8004db6:	015a      	lsls	r2, r3, #5
 8004db8:	69fb      	ldr	r3, [r7, #28]
 8004dba:	4413      	add	r3, r2
 8004dbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	69ba      	ldr	r2, [r7, #24]
 8004dc4:	0151      	lsls	r1, r2, #5
 8004dc6:	69fa      	ldr	r2, [r7, #28]
 8004dc8:	440a      	add	r2, r1
 8004dca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dd2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004dd4:	69bb      	ldr	r3, [r7, #24]
 8004dd6:	015a      	lsls	r2, r3, #5
 8004dd8:	69fb      	ldr	r3, [r7, #28]
 8004dda:	4413      	add	r3, r2
 8004ddc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	69ba      	ldr	r2, [r7, #24]
 8004de4:	0151      	lsls	r1, r2, #5
 8004de6:	69fa      	ldr	r2, [r7, #28]
 8004de8:	440a      	add	r2, r1
 8004dea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004df2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004df4:	2300      	movs	r3, #0
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3720      	adds	r7, #32
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	bf00      	nop
 8004e00:	1ff80000 	.word	0x1ff80000

08004e04 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b087      	sub	sp, #28
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	60f8      	str	r0, [r7, #12]
 8004e0c:	60b9      	str	r1, [r7, #8]
 8004e0e:	4613      	mov	r3, r2
 8004e10:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	781b      	ldrb	r3, [r3, #0]
 8004e1a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	785b      	ldrb	r3, [r3, #1]
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	f040 80cd 	bne.w	8004fc0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	695b      	ldr	r3, [r3, #20]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d132      	bne.n	8004e94 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	015a      	lsls	r2, r3, #5
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	4413      	add	r3, r2
 8004e36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e3a:	691b      	ldr	r3, [r3, #16]
 8004e3c:	693a      	ldr	r2, [r7, #16]
 8004e3e:	0151      	lsls	r1, r2, #5
 8004e40:	697a      	ldr	r2, [r7, #20]
 8004e42:	440a      	add	r2, r1
 8004e44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e48:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004e4c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004e50:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	015a      	lsls	r2, r3, #5
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	4413      	add	r3, r2
 8004e5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e5e:	691b      	ldr	r3, [r3, #16]
 8004e60:	693a      	ldr	r2, [r7, #16]
 8004e62:	0151      	lsls	r1, r2, #5
 8004e64:	697a      	ldr	r2, [r7, #20]
 8004e66:	440a      	add	r2, r1
 8004e68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e6c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e70:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	015a      	lsls	r2, r3, #5
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	4413      	add	r3, r2
 8004e7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e7e:	691b      	ldr	r3, [r3, #16]
 8004e80:	693a      	ldr	r2, [r7, #16]
 8004e82:	0151      	lsls	r1, r2, #5
 8004e84:	697a      	ldr	r2, [r7, #20]
 8004e86:	440a      	add	r2, r1
 8004e88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e8c:	0cdb      	lsrs	r3, r3, #19
 8004e8e:	04db      	lsls	r3, r3, #19
 8004e90:	6113      	str	r3, [r2, #16]
 8004e92:	e04e      	b.n	8004f32 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	015a      	lsls	r2, r3, #5
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	4413      	add	r3, r2
 8004e9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ea0:	691b      	ldr	r3, [r3, #16]
 8004ea2:	693a      	ldr	r2, [r7, #16]
 8004ea4:	0151      	lsls	r1, r2, #5
 8004ea6:	697a      	ldr	r2, [r7, #20]
 8004ea8:	440a      	add	r2, r1
 8004eaa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004eae:	0cdb      	lsrs	r3, r3, #19
 8004eb0:	04db      	lsls	r3, r3, #19
 8004eb2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	015a      	lsls	r2, r3, #5
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	4413      	add	r3, r2
 8004ebc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ec0:	691b      	ldr	r3, [r3, #16]
 8004ec2:	693a      	ldr	r2, [r7, #16]
 8004ec4:	0151      	lsls	r1, r2, #5
 8004ec6:	697a      	ldr	r2, [r7, #20]
 8004ec8:	440a      	add	r2, r1
 8004eca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ece:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004ed2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004ed6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	695a      	ldr	r2, [r3, #20]
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d903      	bls.n	8004eec <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	689a      	ldr	r2, [r3, #8]
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	015a      	lsls	r2, r3, #5
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	4413      	add	r3, r2
 8004ef4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ef8:	691b      	ldr	r3, [r3, #16]
 8004efa:	693a      	ldr	r2, [r7, #16]
 8004efc:	0151      	lsls	r1, r2, #5
 8004efe:	697a      	ldr	r2, [r7, #20]
 8004f00:	440a      	add	r2, r1
 8004f02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f06:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f0a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	015a      	lsls	r2, r3, #5
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	4413      	add	r3, r2
 8004f14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f18:	691a      	ldr	r2, [r3, #16]
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	695b      	ldr	r3, [r3, #20]
 8004f1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f22:	6939      	ldr	r1, [r7, #16]
 8004f24:	0148      	lsls	r0, r1, #5
 8004f26:	6979      	ldr	r1, [r7, #20]
 8004f28:	4401      	add	r1, r0
 8004f2a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004f32:	79fb      	ldrb	r3, [r7, #7]
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d11e      	bne.n	8004f76 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	691b      	ldr	r3, [r3, #16]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d009      	beq.n	8004f54 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	015a      	lsls	r2, r3, #5
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	4413      	add	r3, r2
 8004f48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f4c:	461a      	mov	r2, r3
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	691b      	ldr	r3, [r3, #16]
 8004f52:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	015a      	lsls	r2, r3, #5
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	4413      	add	r3, r2
 8004f5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	693a      	ldr	r2, [r7, #16]
 8004f64:	0151      	lsls	r1, r2, #5
 8004f66:	697a      	ldr	r2, [r7, #20]
 8004f68:	440a      	add	r2, r1
 8004f6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f6e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004f72:	6013      	str	r3, [r2, #0]
 8004f74:	e092      	b.n	800509c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	015a      	lsls	r2, r3, #5
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	4413      	add	r3, r2
 8004f7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	693a      	ldr	r2, [r7, #16]
 8004f86:	0151      	lsls	r1, r2, #5
 8004f88:	697a      	ldr	r2, [r7, #20]
 8004f8a:	440a      	add	r2, r1
 8004f8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f90:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004f94:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	695b      	ldr	r3, [r3, #20]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d07e      	beq.n	800509c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fa4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	781b      	ldrb	r3, [r3, #0]
 8004faa:	f003 030f 	and.w	r3, r3, #15
 8004fae:	2101      	movs	r1, #1
 8004fb0:	fa01 f303 	lsl.w	r3, r1, r3
 8004fb4:	6979      	ldr	r1, [r7, #20]
 8004fb6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	634b      	str	r3, [r1, #52]	; 0x34
 8004fbe:	e06d      	b.n	800509c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	015a      	lsls	r2, r3, #5
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	4413      	add	r3, r2
 8004fc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fcc:	691b      	ldr	r3, [r3, #16]
 8004fce:	693a      	ldr	r2, [r7, #16]
 8004fd0:	0151      	lsls	r1, r2, #5
 8004fd2:	697a      	ldr	r2, [r7, #20]
 8004fd4:	440a      	add	r2, r1
 8004fd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fda:	0cdb      	lsrs	r3, r3, #19
 8004fdc:	04db      	lsls	r3, r3, #19
 8004fde:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	015a      	lsls	r2, r3, #5
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	4413      	add	r3, r2
 8004fe8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fec:	691b      	ldr	r3, [r3, #16]
 8004fee:	693a      	ldr	r2, [r7, #16]
 8004ff0:	0151      	lsls	r1, r2, #5
 8004ff2:	697a      	ldr	r2, [r7, #20]
 8004ff4:	440a      	add	r2, r1
 8004ff6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ffa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004ffe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005002:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	695b      	ldr	r3, [r3, #20]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d003      	beq.n	8005014 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	689a      	ldr	r2, [r3, #8]
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	015a      	lsls	r2, r3, #5
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	4413      	add	r3, r2
 800501c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005020:	691b      	ldr	r3, [r3, #16]
 8005022:	693a      	ldr	r2, [r7, #16]
 8005024:	0151      	lsls	r1, r2, #5
 8005026:	697a      	ldr	r2, [r7, #20]
 8005028:	440a      	add	r2, r1
 800502a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800502e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005032:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	015a      	lsls	r2, r3, #5
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	4413      	add	r3, r2
 800503c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005040:	691a      	ldr	r2, [r3, #16]
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800504a:	6939      	ldr	r1, [r7, #16]
 800504c:	0148      	lsls	r0, r1, #5
 800504e:	6979      	ldr	r1, [r7, #20]
 8005050:	4401      	add	r1, r0
 8005052:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005056:	4313      	orrs	r3, r2
 8005058:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800505a:	79fb      	ldrb	r3, [r7, #7]
 800505c:	2b01      	cmp	r3, #1
 800505e:	d10d      	bne.n	800507c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	68db      	ldr	r3, [r3, #12]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d009      	beq.n	800507c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	68d9      	ldr	r1, [r3, #12]
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	015a      	lsls	r2, r3, #5
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	4413      	add	r3, r2
 8005074:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005078:	460a      	mov	r2, r1
 800507a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	015a      	lsls	r2, r3, #5
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	4413      	add	r3, r2
 8005084:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	693a      	ldr	r2, [r7, #16]
 800508c:	0151      	lsls	r1, r2, #5
 800508e:	697a      	ldr	r2, [r7, #20]
 8005090:	440a      	add	r2, r1
 8005092:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005096:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800509a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800509c:	2300      	movs	r3, #0
}
 800509e:	4618      	mov	r0, r3
 80050a0:	371c      	adds	r7, #28
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr

080050aa <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80050aa:	b480      	push	{r7}
 80050ac:	b089      	sub	sp, #36	; 0x24
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	60f8      	str	r0, [r7, #12]
 80050b2:	60b9      	str	r1, [r7, #8]
 80050b4:	4611      	mov	r1, r2
 80050b6:	461a      	mov	r2, r3
 80050b8:	460b      	mov	r3, r1
 80050ba:	71fb      	strb	r3, [r7, #7]
 80050bc:	4613      	mov	r3, r2
 80050be:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80050c8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d11a      	bne.n	8005106 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80050d0:	88bb      	ldrh	r3, [r7, #4]
 80050d2:	3303      	adds	r3, #3
 80050d4:	089b      	lsrs	r3, r3, #2
 80050d6:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80050d8:	2300      	movs	r3, #0
 80050da:	61bb      	str	r3, [r7, #24]
 80050dc:	e00f      	b.n	80050fe <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80050de:	79fb      	ldrb	r3, [r7, #7]
 80050e0:	031a      	lsls	r2, r3, #12
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	4413      	add	r3, r2
 80050e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050ea:	461a      	mov	r2, r3
 80050ec:	69fb      	ldr	r3, [r7, #28]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	6013      	str	r3, [r2, #0]
      pSrc++;
 80050f2:	69fb      	ldr	r3, [r7, #28]
 80050f4:	3304      	adds	r3, #4
 80050f6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80050f8:	69bb      	ldr	r3, [r7, #24]
 80050fa:	3301      	adds	r3, #1
 80050fc:	61bb      	str	r3, [r7, #24]
 80050fe:	69ba      	ldr	r2, [r7, #24]
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	429a      	cmp	r2, r3
 8005104:	d3eb      	bcc.n	80050de <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005106:	2300      	movs	r3, #0
}
 8005108:	4618      	mov	r0, r3
 800510a:	3724      	adds	r7, #36	; 0x24
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr

08005114 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005114:	b480      	push	{r7}
 8005116:	b089      	sub	sp, #36	; 0x24
 8005118:	af00      	add	r7, sp, #0
 800511a:	60f8      	str	r0, [r7, #12]
 800511c:	60b9      	str	r1, [r7, #8]
 800511e:	4613      	mov	r3, r2
 8005120:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800512a:	88fb      	ldrh	r3, [r7, #6]
 800512c:	3303      	adds	r3, #3
 800512e:	089b      	lsrs	r3, r3, #2
 8005130:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005132:	2300      	movs	r3, #0
 8005134:	61bb      	str	r3, [r7, #24]
 8005136:	e00b      	b.n	8005150 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	69fb      	ldr	r3, [r7, #28]
 8005142:	601a      	str	r2, [r3, #0]
    pDest++;
 8005144:	69fb      	ldr	r3, [r7, #28]
 8005146:	3304      	adds	r3, #4
 8005148:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800514a:	69bb      	ldr	r3, [r7, #24]
 800514c:	3301      	adds	r3, #1
 800514e:	61bb      	str	r3, [r7, #24]
 8005150:	69ba      	ldr	r2, [r7, #24]
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	429a      	cmp	r2, r3
 8005156:	d3ef      	bcc.n	8005138 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005158:	69fb      	ldr	r3, [r7, #28]
}
 800515a:	4618      	mov	r0, r3
 800515c:	3724      	adds	r7, #36	; 0x24
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr

08005166 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005166:	b480      	push	{r7}
 8005168:	b085      	sub	sp, #20
 800516a:	af00      	add	r7, sp, #0
 800516c:	6078      	str	r0, [r7, #4]
 800516e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	781b      	ldrb	r3, [r3, #0]
 8005178:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	785b      	ldrb	r3, [r3, #1]
 800517e:	2b01      	cmp	r3, #1
 8005180:	d12c      	bne.n	80051dc <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	015a      	lsls	r2, r3, #5
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	4413      	add	r3, r2
 800518a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	2b00      	cmp	r3, #0
 8005192:	db12      	blt.n	80051ba <USB_EPSetStall+0x54>
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d00f      	beq.n	80051ba <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	015a      	lsls	r2, r3, #5
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	4413      	add	r3, r2
 80051a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	68ba      	ldr	r2, [r7, #8]
 80051aa:	0151      	lsls	r1, r2, #5
 80051ac:	68fa      	ldr	r2, [r7, #12]
 80051ae:	440a      	add	r2, r1
 80051b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051b4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80051b8:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	015a      	lsls	r2, r3, #5
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	4413      	add	r3, r2
 80051c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	68ba      	ldr	r2, [r7, #8]
 80051ca:	0151      	lsls	r1, r2, #5
 80051cc:	68fa      	ldr	r2, [r7, #12]
 80051ce:	440a      	add	r2, r1
 80051d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80051d8:	6013      	str	r3, [r2, #0]
 80051da:	e02b      	b.n	8005234 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	015a      	lsls	r2, r3, #5
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	4413      	add	r3, r2
 80051e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	db12      	blt.n	8005214 <USB_EPSetStall+0xae>
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d00f      	beq.n	8005214 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	015a      	lsls	r2, r3, #5
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	4413      	add	r3, r2
 80051fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	68ba      	ldr	r2, [r7, #8]
 8005204:	0151      	lsls	r1, r2, #5
 8005206:	68fa      	ldr	r2, [r7, #12]
 8005208:	440a      	add	r2, r1
 800520a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800520e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005212:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	015a      	lsls	r2, r3, #5
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	4413      	add	r3, r2
 800521c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	68ba      	ldr	r2, [r7, #8]
 8005224:	0151      	lsls	r1, r2, #5
 8005226:	68fa      	ldr	r2, [r7, #12]
 8005228:	440a      	add	r2, r1
 800522a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800522e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005232:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005234:	2300      	movs	r3, #0
}
 8005236:	4618      	mov	r0, r3
 8005238:	3714      	adds	r7, #20
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr

08005242 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005242:	b480      	push	{r7}
 8005244:	b085      	sub	sp, #20
 8005246:	af00      	add	r7, sp, #0
 8005248:	6078      	str	r0, [r7, #4]
 800524a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	781b      	ldrb	r3, [r3, #0]
 8005254:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	785b      	ldrb	r3, [r3, #1]
 800525a:	2b01      	cmp	r3, #1
 800525c:	d128      	bne.n	80052b0 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	015a      	lsls	r2, r3, #5
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	4413      	add	r3, r2
 8005266:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	68ba      	ldr	r2, [r7, #8]
 800526e:	0151      	lsls	r1, r2, #5
 8005270:	68fa      	ldr	r2, [r7, #12]
 8005272:	440a      	add	r2, r1
 8005274:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005278:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800527c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	78db      	ldrb	r3, [r3, #3]
 8005282:	2b03      	cmp	r3, #3
 8005284:	d003      	beq.n	800528e <USB_EPClearStall+0x4c>
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	78db      	ldrb	r3, [r3, #3]
 800528a:	2b02      	cmp	r3, #2
 800528c:	d138      	bne.n	8005300 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	015a      	lsls	r2, r3, #5
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	4413      	add	r3, r2
 8005296:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	68ba      	ldr	r2, [r7, #8]
 800529e:	0151      	lsls	r1, r2, #5
 80052a0:	68fa      	ldr	r2, [r7, #12]
 80052a2:	440a      	add	r2, r1
 80052a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052ac:	6013      	str	r3, [r2, #0]
 80052ae:	e027      	b.n	8005300 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	015a      	lsls	r2, r3, #5
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	4413      	add	r3, r2
 80052b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	68ba      	ldr	r2, [r7, #8]
 80052c0:	0151      	lsls	r1, r2, #5
 80052c2:	68fa      	ldr	r2, [r7, #12]
 80052c4:	440a      	add	r2, r1
 80052c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80052ce:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	78db      	ldrb	r3, [r3, #3]
 80052d4:	2b03      	cmp	r3, #3
 80052d6:	d003      	beq.n	80052e0 <USB_EPClearStall+0x9e>
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	78db      	ldrb	r3, [r3, #3]
 80052dc:	2b02      	cmp	r3, #2
 80052de:	d10f      	bne.n	8005300 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	015a      	lsls	r2, r3, #5
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	4413      	add	r3, r2
 80052e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	68ba      	ldr	r2, [r7, #8]
 80052f0:	0151      	lsls	r1, r2, #5
 80052f2:	68fa      	ldr	r2, [r7, #12]
 80052f4:	440a      	add	r2, r1
 80052f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052fe:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005300:	2300      	movs	r3, #0
}
 8005302:	4618      	mov	r0, r3
 8005304:	3714      	adds	r7, #20
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr

0800530e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800530e:	b480      	push	{r7}
 8005310:	b085      	sub	sp, #20
 8005312:	af00      	add	r7, sp, #0
 8005314:	6078      	str	r0, [r7, #4]
 8005316:	460b      	mov	r3, r1
 8005318:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	68fa      	ldr	r2, [r7, #12]
 8005328:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800532c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005330:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	78fb      	ldrb	r3, [r7, #3]
 800533c:	011b      	lsls	r3, r3, #4
 800533e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005342:	68f9      	ldr	r1, [r7, #12]
 8005344:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005348:	4313      	orrs	r3, r2
 800534a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800534c:	2300      	movs	r3, #0
}
 800534e:	4618      	mov	r0, r3
 8005350:	3714      	adds	r7, #20
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr

0800535a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800535a:	b480      	push	{r7}
 800535c:	b085      	sub	sp, #20
 800535e:	af00      	add	r7, sp, #0
 8005360:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	68fa      	ldr	r2, [r7, #12]
 8005370:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005374:	f023 0303 	bic.w	r3, r3, #3
 8005378:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	68fa      	ldr	r2, [r7, #12]
 8005384:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005388:	f023 0302 	bic.w	r3, r3, #2
 800538c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800538e:	2300      	movs	r3, #0
}
 8005390:	4618      	mov	r0, r3
 8005392:	3714      	adds	r7, #20
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr

0800539c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800539c:	b480      	push	{r7}
 800539e:	b085      	sub	sp, #20
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	68fa      	ldr	r2, [r7, #12]
 80053b2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80053b6:	f023 0303 	bic.w	r3, r3, #3
 80053ba:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	68fa      	ldr	r2, [r7, #12]
 80053c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053ca:	f043 0302 	orr.w	r3, r3, #2
 80053ce:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80053d0:	2300      	movs	r3, #0
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3714      	adds	r7, #20
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr

080053de <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80053de:	b480      	push	{r7}
 80053e0:	b085      	sub	sp, #20
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	695b      	ldr	r3, [r3, #20]
 80053ea:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	699b      	ldr	r3, [r3, #24]
 80053f0:	68fa      	ldr	r2, [r7, #12]
 80053f2:	4013      	ands	r3, r2
 80053f4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80053f6:	68fb      	ldr	r3, [r7, #12]
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3714      	adds	r7, #20
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr

08005404 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005404:	b480      	push	{r7}
 8005406:	b085      	sub	sp, #20
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005416:	699b      	ldr	r3, [r3, #24]
 8005418:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005420:	69db      	ldr	r3, [r3, #28]
 8005422:	68ba      	ldr	r2, [r7, #8]
 8005424:	4013      	ands	r3, r2
 8005426:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	0c1b      	lsrs	r3, r3, #16
}
 800542c:	4618      	mov	r0, r3
 800542e:	3714      	adds	r7, #20
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr

08005438 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005438:	b480      	push	{r7}
 800543a:	b085      	sub	sp, #20
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800544a:	699b      	ldr	r3, [r3, #24]
 800544c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005454:	69db      	ldr	r3, [r3, #28]
 8005456:	68ba      	ldr	r2, [r7, #8]
 8005458:	4013      	ands	r3, r2
 800545a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	b29b      	uxth	r3, r3
}
 8005460:	4618      	mov	r0, r3
 8005462:	3714      	adds	r7, #20
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr

0800546c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800546c:	b480      	push	{r7}
 800546e:	b085      	sub	sp, #20
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
 8005474:	460b      	mov	r3, r1
 8005476:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800547c:	78fb      	ldrb	r3, [r7, #3]
 800547e:	015a      	lsls	r2, r3, #5
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	4413      	add	r3, r2
 8005484:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005492:	695b      	ldr	r3, [r3, #20]
 8005494:	68ba      	ldr	r2, [r7, #8]
 8005496:	4013      	ands	r3, r2
 8005498:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800549a:	68bb      	ldr	r3, [r7, #8]
}
 800549c:	4618      	mov	r0, r3
 800549e:	3714      	adds	r7, #20
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr

080054a8 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b087      	sub	sp, #28
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	460b      	mov	r3, r1
 80054b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054be:	691b      	ldr	r3, [r3, #16]
 80054c0:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054ca:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80054cc:	78fb      	ldrb	r3, [r7, #3]
 80054ce:	f003 030f 	and.w	r3, r3, #15
 80054d2:	68fa      	ldr	r2, [r7, #12]
 80054d4:	fa22 f303 	lsr.w	r3, r2, r3
 80054d8:	01db      	lsls	r3, r3, #7
 80054da:	b2db      	uxtb	r3, r3
 80054dc:	693a      	ldr	r2, [r7, #16]
 80054de:	4313      	orrs	r3, r2
 80054e0:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80054e2:	78fb      	ldrb	r3, [r7, #3]
 80054e4:	015a      	lsls	r2, r3, #5
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	4413      	add	r3, r2
 80054ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	693a      	ldr	r2, [r7, #16]
 80054f2:	4013      	ands	r3, r2
 80054f4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80054f6:	68bb      	ldr	r3, [r7, #8]
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	371c      	adds	r7, #28
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr

08005504 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005504:	b480      	push	{r7}
 8005506:	b083      	sub	sp, #12
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	695b      	ldr	r3, [r3, #20]
 8005510:	f003 0301 	and.w	r3, r3, #1
}
 8005514:	4618      	mov	r0, r3
 8005516:	370c      	adds	r7, #12
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr

08005520 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005520:	b480      	push	{r7}
 8005522:	b085      	sub	sp, #20
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	68fa      	ldr	r2, [r7, #12]
 8005536:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800553a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800553e:	f023 0307 	bic.w	r3, r3, #7
 8005542:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	68fa      	ldr	r2, [r7, #12]
 800554e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005552:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005556:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005558:	2300      	movs	r3, #0
}
 800555a:	4618      	mov	r0, r3
 800555c:	3714      	adds	r7, #20
 800555e:	46bd      	mov	sp, r7
 8005560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005564:	4770      	bx	lr
	...

08005568 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005568:	b480      	push	{r7}
 800556a:	b087      	sub	sp, #28
 800556c:	af00      	add	r7, sp, #0
 800556e:	60f8      	str	r0, [r7, #12]
 8005570:	460b      	mov	r3, r1
 8005572:	607a      	str	r2, [r7, #4]
 8005574:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	333c      	adds	r3, #60	; 0x3c
 800557e:	3304      	adds	r3, #4
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	4a26      	ldr	r2, [pc, #152]	; (8005620 <USB_EP0_OutStart+0xb8>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d90a      	bls.n	80055a2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005598:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800559c:	d101      	bne.n	80055a2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800559e:	2300      	movs	r3, #0
 80055a0:	e037      	b.n	8005612 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055a8:	461a      	mov	r2, r3
 80055aa:	2300      	movs	r3, #0
 80055ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055b4:	691b      	ldr	r3, [r3, #16]
 80055b6:	697a      	ldr	r2, [r7, #20]
 80055b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80055c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055c8:	691b      	ldr	r3, [r3, #16]
 80055ca:	697a      	ldr	r2, [r7, #20]
 80055cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055d0:	f043 0318 	orr.w	r3, r3, #24
 80055d4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055dc:	691b      	ldr	r3, [r3, #16]
 80055de:	697a      	ldr	r2, [r7, #20]
 80055e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055e4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80055e8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80055ea:	7afb      	ldrb	r3, [r7, #11]
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d10f      	bne.n	8005610 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055f6:	461a      	mov	r2, r3
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	697a      	ldr	r2, [r7, #20]
 8005606:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800560a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800560e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005610:	2300      	movs	r3, #0
}
 8005612:	4618      	mov	r0, r3
 8005614:	371c      	adds	r7, #28
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr
 800561e:	bf00      	nop
 8005620:	4f54300a 	.word	0x4f54300a

08005624 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005624:	b480      	push	{r7}
 8005626:	b085      	sub	sp, #20
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800562c:	2300      	movs	r3, #0
 800562e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	3301      	adds	r3, #1
 8005634:	60fb      	str	r3, [r7, #12]
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	4a13      	ldr	r2, [pc, #76]	; (8005688 <USB_CoreReset+0x64>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d901      	bls.n	8005642 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800563e:	2303      	movs	r3, #3
 8005640:	e01b      	b.n	800567a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	691b      	ldr	r3, [r3, #16]
 8005646:	2b00      	cmp	r3, #0
 8005648:	daf2      	bge.n	8005630 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800564a:	2300      	movs	r3, #0
 800564c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	691b      	ldr	r3, [r3, #16]
 8005652:	f043 0201 	orr.w	r2, r3, #1
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	3301      	adds	r3, #1
 800565e:	60fb      	str	r3, [r7, #12]
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	4a09      	ldr	r2, [pc, #36]	; (8005688 <USB_CoreReset+0x64>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d901      	bls.n	800566c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005668:	2303      	movs	r3, #3
 800566a:	e006      	b.n	800567a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	691b      	ldr	r3, [r3, #16]
 8005670:	f003 0301 	and.w	r3, r3, #1
 8005674:	2b01      	cmp	r3, #1
 8005676:	d0f0      	beq.n	800565a <USB_CoreReset+0x36>

  return HAL_OK;
 8005678:	2300      	movs	r3, #0
}
 800567a:	4618      	mov	r0, r3
 800567c:	3714      	adds	r7, #20
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr
 8005686:	bf00      	nop
 8005688:	00030d40 	.word	0x00030d40

0800568c <USBD_AUDIO_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_AUDIO_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b084      	sub	sp, #16
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	460b      	mov	r3, r1
 8005696:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_AUDIO_HandleTypeDef *haudio;

  /* Allocate Audio structure */
  haudio = USBD_malloc(sizeof(USBD_AUDIO_HandleTypeDef));
 8005698:	f44f 60ca 	mov.w	r0, #1616	; 0x650
 800569c:	f002 faa8 	bl	8007bf0 <USBD_static_malloc>
 80056a0:	60f8      	str	r0, [r7, #12]

  if (haudio == NULL)
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d105      	bne.n	80056b4 <USBD_AUDIO_Init+0x28>
  {
    pdev->pClassData = NULL;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80056b0:	2302      	movs	r3, #2
 80056b2:	e053      	b.n	800575c <USBD_AUDIO_Init+0xd0>
  }

  pdev->pClassData = (void *)haudio;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	68fa      	ldr	r2, [r7, #12]
 80056b8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	7c1b      	ldrb	r3, [r3, #16]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d104      	bne.n	80056ce <USBD_AUDIO_Init+0x42>
  {
    pdev->ep_out[AUDIO_OUT_EP & 0xFU].bInterval = AUDIO_HS_BINTERVAL;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2201      	movs	r2, #1
 80056c8:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
 80056cc:	e003      	b.n	80056d6 <USBD_AUDIO_Init+0x4a>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_out[AUDIO_OUT_EP & 0xFU].bInterval = AUDIO_FS_BINTERVAL;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2201      	movs	r2, #1
 80056d2:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
  }

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, AUDIO_OUT_EP, USBD_EP_TYPE_ISOC, AUDIO_OUT_PACKET);
 80056d6:	23c0      	movs	r3, #192	; 0xc0
 80056d8:	2201      	movs	r2, #1
 80056da:	2101      	movs	r1, #1
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f002 f944 	bl	800796a <USBD_LL_OpenEP>
  pdev->ep_out[AUDIO_OUT_EP & 0xFU].is_used = 1U;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2201      	movs	r2, #1
 80056e6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  (void)USBD_LL_OpenEP(pdev, AUDIO_IN_EP, USBD_EP_TYPE_ISOC, AUDIO_IN_PACKET);
 80056ea:	2303      	movs	r3, #3
 80056ec:	2201      	movs	r2, #1
 80056ee:	2181      	movs	r1, #129	; 0x81
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f002 f93a 	bl	800796a <USBD_LL_OpenEP>
  pdev->ep_in[AUDIO_IN_EP & 0xFU].is_used = 1U;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2201      	movs	r2, #1
 80056fa:	871a      	strh	r2, [r3, #56]	; 0x38

  (void)USBD_LL_FlushEP(pdev, AUDIO_IN_EP);
 80056fc:	2181      	movs	r1, #129	; 0x81
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f002 f978 	bl	80079f4 <USBD_LL_FlushEP>

  tx_flag = 1;
 8005704:	4b17      	ldr	r3, [pc, #92]	; (8005764 <USBD_AUDIO_Init+0xd8>)
 8005706:	2201      	movs	r2, #1
 8005708:	601a      	str	r2, [r3, #0]

  haudio->alt_setting = 0U;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2200      	movs	r2, #0
 800570e:	601a      	str	r2, [r3, #0]
  haudio->offset = AUDIO_OFFSET_UNKNOWN;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2203      	movs	r2, #3
 8005714:	f883 2604 	strb.w	r2, [r3, #1540]	; 0x604
  haudio->wr_ptr = 0U;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2200      	movs	r2, #0
 800571c:	f8a3 2608 	strh.w	r2, [r3, #1544]	; 0x608
  haudio->rd_ptr = 0U;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2200      	movs	r2, #0
 8005724:	f8a3 2606 	strh.w	r2, [r3, #1542]	; 0x606
  haudio->rd_enable = 0U;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2200      	movs	r2, #0
 800572c:	f883 2605 	strb.w	r2, [r3, #1541]	; 0x605

  /* Initialize the Audio output Hardware layer */
  if (((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->Init(USBD_AUDIO_FREQ,
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	2200      	movs	r2, #0
 800573a:	2146      	movs	r1, #70	; 0x46
 800573c:	f64b 3080 	movw	r0, #48000	; 0xbb80
 8005740:	4798      	blx	r3
 8005742:	4603      	mov	r3, r0
 8005744:	2b00      	cmp	r3, #0
 8005746:	d001      	beq.n	800574c <USBD_AUDIO_Init+0xc0>
                                                       AUDIO_DEFAULT_VOLUME,
                                                       0U) != 0U)
  {
    return (uint8_t)USBD_FAIL;
 8005748:	2303      	movs	r3, #3
 800574a:	e007      	b.n	800575c <USBD_AUDIO_Init+0xd0>
  }

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, AUDIO_OUT_EP, haudio->buffer,
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	1d1a      	adds	r2, r3, #4
 8005750:	23c0      	movs	r3, #192	; 0xc0
 8005752:	2101      	movs	r1, #1
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f002 fa16 	bl	8007b86 <USBD_LL_PrepareReceive>
                               AUDIO_OUT_PACKET);

  return (uint8_t)USBD_OK;
 800575a:	2300      	movs	r3, #0
}
 800575c:	4618      	mov	r0, r3
 800575e:	3710      	adds	r7, #16
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}
 8005764:	200000c8 	.word	0x200000c8

08005768 <USBD_AUDIO_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_AUDIO_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b082      	sub	sp, #8
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
 8005770:	460b      	mov	r3, r1
 8005772:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  (void)USBD_LL_FlushEP(pdev, AUDIO_OUT_EP);
 8005774:	2101      	movs	r1, #1
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f002 f93c 	bl	80079f4 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, AUDIO_IN_EP);
 800577c:	2181      	movs	r1, #129	; 0x81
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f002 f938 	bl	80079f4 <USBD_LL_FlushEP>

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, AUDIO_OUT_EP);
 8005784:	2101      	movs	r1, #1
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f002 f915 	bl	80079b6 <USBD_LL_CloseEP>
  pdev->ep_out[AUDIO_OUT_EP & 0xFU].is_used = 0U;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2200      	movs	r2, #0
 8005790:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178
  pdev->ep_out[AUDIO_OUT_EP & 0xFU].bInterval = 0U;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2200      	movs	r2, #0
 8005798:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, AUDIO_IN_EP);
 800579c:	2181      	movs	r1, #129	; 0x81
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f002 f909 	bl	80079b6 <USBD_LL_CloseEP>
  pdev->ep_in[AUDIO_IN_EP & 0xFU].is_used = 0U;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2200      	movs	r2, #0
 80057a8:	871a      	strh	r2, [r3, #56]	; 0x38

  tx_flag = 0U;
 80057aa:	4b0e      	ldr	r3, [pc, #56]	; (80057e4 <USBD_AUDIO_DeInit+0x7c>)
 80057ac:	2200      	movs	r2, #0
 80057ae:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d00f      	beq.n	80057da <USBD_AUDIO_DeInit+0x72>
  {
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->DeInit(0U);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	2000      	movs	r0, #0
 80057c4:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80057cc:	4618      	mov	r0, r3
 80057ce:	f002 fa1d 	bl	8007c0c <USBD_static_free>
    pdev->pClassData = NULL;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2200      	movs	r2, #0
 80057d6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80057da:	2300      	movs	r3, #0
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3708      	adds	r7, #8
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}
 80057e4:	200000c8 	.word	0x200000c8

080057e8 <USBD_AUDIO_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_AUDIO_Setup(USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b086      	sub	sp, #24
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
 80057f0:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 80057f2:	2300      	movs	r3, #0
 80057f4:	813b      	strh	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_OK;
 80057f6:	2300      	movs	r3, #0
 80057f8:	75fb      	strb	r3, [r7, #23]

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005800:	613b      	str	r3, [r7, #16]

  if (haudio == NULL)
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d101      	bne.n	800580c <USBD_AUDIO_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005808:	2303      	movs	r3, #3
 800580a:	e11b      	b.n	8005a44 <USBD_AUDIO_Setup+0x25c>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	781b      	ldrb	r3, [r3, #0]
 8005810:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005814:	2b00      	cmp	r3, #0
 8005816:	d01a      	beq.n	800584e <USBD_AUDIO_Setup+0x66>
 8005818:	2b20      	cmp	r3, #32
 800581a:	f040 810b 	bne.w	8005a34 <USBD_AUDIO_Setup+0x24c>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	785b      	ldrb	r3, [r3, #1]
 8005822:	2b01      	cmp	r3, #1
 8005824:	d006      	beq.n	8005834 <USBD_AUDIO_Setup+0x4c>
 8005826:	2b81      	cmp	r3, #129	; 0x81
 8005828:	d109      	bne.n	800583e <USBD_AUDIO_Setup+0x56>
      {
        case AUDIO_REQ_GET_CUR:
          AUDIO_REQ_GetCurrent(pdev, req);
 800582a:	6839      	ldr	r1, [r7, #0]
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f000 fb75 	bl	8005f1c <AUDIO_REQ_GetCurrent>
          break;
 8005832:	e00b      	b.n	800584c <USBD_AUDIO_Setup+0x64>

        case AUDIO_REQ_SET_CUR:
          AUDIO_REQ_SetCurrent(pdev, req);
 8005834:	6839      	ldr	r1, [r7, #0]
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f000 fb92 	bl	8005f60 <AUDIO_REQ_SetCurrent>
          break;
 800583c:	e006      	b.n	800584c <USBD_AUDIO_Setup+0x64>

        default:
          USBD_CtlError(pdev, req);
 800583e:	6839      	ldr	r1, [r7, #0]
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f001 fc59 	bl	80070f8 <USBD_CtlError>
          ret = USBD_FAIL;
 8005846:	2303      	movs	r3, #3
 8005848:	75fb      	strb	r3, [r7, #23]
          break;
 800584a:	bf00      	nop
      }
      break;
 800584c:	e0f9      	b.n	8005a42 <USBD_AUDIO_Setup+0x25a>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	785b      	ldrb	r3, [r3, #1]
 8005852:	2b0b      	cmp	r3, #11
 8005854:	f200 80e3 	bhi.w	8005a1e <USBD_AUDIO_Setup+0x236>
 8005858:	a201      	add	r2, pc, #4	; (adr r2, 8005860 <USBD_AUDIO_Setup+0x78>)
 800585a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800585e:	bf00      	nop
 8005860:	08005891 	.word	0x08005891
 8005864:	08005a2d 	.word	0x08005a2d
 8005868:	08005a1f 	.word	0x08005a1f
 800586c:	08005a1f 	.word	0x08005a1f
 8005870:	08005a1f 	.word	0x08005a1f
 8005874:	08005a1f 	.word	0x08005a1f
 8005878:	080058bb 	.word	0x080058bb
 800587c:	08005a1f 	.word	0x08005a1f
 8005880:	08005a1f 	.word	0x08005a1f
 8005884:	08005a1f 	.word	0x08005a1f
 8005888:	080058e7 	.word	0x080058e7
 800588c:	0800590f 	.word	0x0800590f
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005896:	b2db      	uxtb	r3, r3
 8005898:	2b03      	cmp	r3, #3
 800589a:	d107      	bne.n	80058ac <USBD_AUDIO_Setup+0xc4>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800589c:	f107 0308 	add.w	r3, r7, #8
 80058a0:	2202      	movs	r2, #2
 80058a2:	4619      	mov	r1, r3
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f001 fc98 	bl	80071da <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80058aa:	e0c2      	b.n	8005a32 <USBD_AUDIO_Setup+0x24a>
            USBD_CtlError(pdev, req);
 80058ac:	6839      	ldr	r1, [r7, #0]
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f001 fc22 	bl	80070f8 <USBD_CtlError>
            ret = USBD_FAIL;
 80058b4:	2303      	movs	r3, #3
 80058b6:	75fb      	strb	r3, [r7, #23]
          break;
 80058b8:	e0bb      	b.n	8005a32 <USBD_AUDIO_Setup+0x24a>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == AUDIO_DESCRIPTOR_TYPE)
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	885b      	ldrh	r3, [r3, #2]
 80058be:	0a1b      	lsrs	r3, r3, #8
 80058c0:	b29b      	uxth	r3, r3
 80058c2:	2b21      	cmp	r3, #33	; 0x21
 80058c4:	f040 80b4 	bne.w	8005a30 <USBD_AUDIO_Setup+0x248>
          {
            pbuf = USBD_AUDIO_CfgDesc + 18;
 80058c8:	4b60      	ldr	r3, [pc, #384]	; (8005a4c <USBD_AUDIO_Setup+0x264>)
 80058ca:	60fb      	str	r3, [r7, #12]
            len = MIN(USB_AUDIO_DESC_SIZ, req->wLength);
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	88db      	ldrh	r3, [r3, #6]
 80058d0:	2b09      	cmp	r3, #9
 80058d2:	bf28      	it	cs
 80058d4:	2309      	movcs	r3, #9
 80058d6:	817b      	strh	r3, [r7, #10]

            (void)USBD_CtlSendData(pdev, pbuf, len);
 80058d8:	897b      	ldrh	r3, [r7, #10]
 80058da:	461a      	mov	r2, r3
 80058dc:	68f9      	ldr	r1, [r7, #12]
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f001 fc7b 	bl	80071da <USBD_CtlSendData>
          }
          break;
 80058e4:	e0a4      	b.n	8005a30 <USBD_AUDIO_Setup+0x248>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	2b03      	cmp	r3, #3
 80058f0:	d106      	bne.n	8005900 <USBD_AUDIO_Setup+0x118>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&haudio->alt_setting, 1U);
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	2201      	movs	r2, #1
 80058f6:	4619      	mov	r1, r3
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f001 fc6e 	bl	80071da <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80058fe:	e098      	b.n	8005a32 <USBD_AUDIO_Setup+0x24a>
            USBD_CtlError(pdev, req);
 8005900:	6839      	ldr	r1, [r7, #0]
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f001 fbf8 	bl	80070f8 <USBD_CtlError>
            ret = USBD_FAIL;
 8005908:	2303      	movs	r3, #3
 800590a:	75fb      	strb	r3, [r7, #23]
          break;
 800590c:	e091      	b.n	8005a32 <USBD_AUDIO_Setup+0x24a>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005914:	b2db      	uxtb	r3, r3
 8005916:	2b03      	cmp	r3, #3
 8005918:	d17a      	bne.n	8005a10 <USBD_AUDIO_Setup+0x228>
          {
            if ((uint8_t)(req->wValue) <= USBD_MAX_NUM_INTERFACES)
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	885b      	ldrh	r3, [r3, #2]
 800591e:	b2db      	uxtb	r3, r3
 8005920:	2b01      	cmp	r3, #1
 8005922:	d86e      	bhi.n	8005a02 <USBD_AUDIO_Setup+0x21a>
            {
              haudio->alt_setting = (uint8_t)(req->wValue);
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	885b      	ldrh	r3, [r3, #2]
 8005928:	b2db      	uxtb	r3, r3
 800592a:	461a      	mov	r2, r3
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	601a      	str	r2, [r3, #0]
              if (haudio->alt_setting == 0)
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d12f      	bne.n	8005998 <USBD_AUDIO_Setup+0x1b0>
              {
            	  memset(&haudio->buffer, 0, AUDIO_TOTAL_BUF_SIZE);
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	3304      	adds	r3, #4
 800593c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8005940:	2100      	movs	r1, #0
 8005942:	4618      	mov	r0, r3
 8005944:	f002 f9bc 	bl	8007cc0 <memset>
            	  all_ready = 0U;
 8005948:	4b41      	ldr	r3, [pc, #260]	; (8005a50 <USBD_AUDIO_Setup+0x268>)
 800594a:	2200      	movs	r2, #0
 800594c:	601a      	str	r2, [r3, #0]
            	  tx_flag = 1U;
 800594e:	4b41      	ldr	r3, [pc, #260]	; (8005a54 <USBD_AUDIO_Setup+0x26c>)
 8005950:	2201      	movs	r2, #1
 8005952:	601a      	str	r2, [r3, #0]
            	  is_playing = 0U;
 8005954:	4b40      	ldr	r3, [pc, #256]	; (8005a58 <USBD_AUDIO_Setup+0x270>)
 8005956:	2200      	movs	r2, #0
 8005958:	601a      	str	r2, [r3, #0]

            	  haudio->offset = AUDIO_OFFSET_UNKNOWN;
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	2203      	movs	r2, #3
 800595e:	f883 2604 	strb.w	r2, [r3, #1540]	; 0x604
            	  haudio->rd_enable = 0U;
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	2200      	movs	r2, #0
 8005966:	f883 2605 	strb.w	r2, [r3, #1541]	; 0x605
            	  haudio->rd_ptr = 0U;
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	2200      	movs	r2, #0
 800596e:	f8a3 2606 	strh.w	r2, [r3, #1542]	; 0x606
            	  haudio->wr_ptr = 0U;
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	2200      	movs	r2, #0
 8005976:	f8a3 2608 	strh.w	r2, [r3, #1544]	; 0x608

            	  USBD_LL_FlushEP(pdev, AUDIO_IN_EP);
 800597a:	2181      	movs	r1, #129	; 0x81
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f002 f839 	bl	80079f4 <USBD_LL_FlushEP>
            	  USBD_LL_FlushEP(pdev, AUDIO_OUT_EP);
 8005982:	2101      	movs	r1, #1
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f002 f835 	bl	80079f4 <USBD_LL_FlushEP>

            	  ((USBD_AUDIO_ItfTypeDef*)pdev->pUserData)->DeInit(0);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	2000      	movs	r0, #0
 8005994:	4798      	blx	r3
 8005996:	e02f      	b.n	80059f8 <USBD_AUDIO_Setup+0x210>
              }
              else
              {
            	  all_ready = 0U;
 8005998:	4b2d      	ldr	r3, [pc, #180]	; (8005a50 <USBD_AUDIO_Setup+0x268>)
 800599a:	2200      	movs	r2, #0
 800599c:	601a      	str	r2, [r3, #0]
            	  tx_flag = 1U;
 800599e:	4b2d      	ldr	r3, [pc, #180]	; (8005a54 <USBD_AUDIO_Setup+0x26c>)
 80059a0:	2201      	movs	r2, #1
 80059a2:	601a      	str	r2, [r3, #0]
            	  is_playing = 0U;
 80059a4:	4b2c      	ldr	r3, [pc, #176]	; (8005a58 <USBD_AUDIO_Setup+0x270>)
 80059a6:	2200      	movs	r2, #0
 80059a8:	601a      	str	r2, [r3, #0]

            	  haudio->offset = AUDIO_OFFSET_UNKNOWN;
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	2203      	movs	r2, #3
 80059ae:	f883 2604 	strb.w	r2, [r3, #1540]	; 0x604
            	  haudio->rd_enable = 0U;
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	2200      	movs	r2, #0
 80059b6:	f883 2605 	strb.w	r2, [r3, #1541]	; 0x605
            	  haudio->rd_ptr = 0U;
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	2200      	movs	r2, #0
 80059be:	f8a3 2606 	strh.w	r2, [r3, #1542]	; 0x606
            	  haudio->wr_ptr = 0U;
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	2200      	movs	r2, #0
 80059c6:	f8a3 2608 	strh.w	r2, [r3, #1544]	; 0x608

            	  USBD_LL_FlushEP(pdev, AUDIO_IN_EP);
 80059ca:	2181      	movs	r1, #129	; 0x81
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f002 f811 	bl	80079f4 <USBD_LL_FlushEP>
            	  USBD_LL_FlushEP(pdev, AUDIO_OUT_EP);
 80059d2:	2101      	movs	r1, #1
 80059d4:	6878      	ldr	r0, [r7, #4]
 80059d6:	f002 f80d 	bl	80079f4 <USBD_LL_FlushEP>

            	  ((USBD_AUDIO_ItfTypeDef*)pdev->pUserData)->Init(USBD_AUDIO_FREQ,
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	2200      	movs	r2, #0
 80059e4:	2146      	movs	r1, #70	; 0x46
 80059e6:	f64b 3080 	movw	r0, #48000	; 0xbb80
 80059ea:	4798      	blx	r3
																  AUDIO_DEFAULT_VOLUME,
																  0U);

            	  tx_flag = 0;
 80059ec:	4b19      	ldr	r3, [pc, #100]	; (8005a54 <USBD_AUDIO_Setup+0x26c>)
 80059ee:	2200      	movs	r2, #0
 80059f0:	601a      	str	r2, [r3, #0]
            	  all_ready = 1U;
 80059f2:	4b17      	ldr	r3, [pc, #92]	; (8005a50 <USBD_AUDIO_Setup+0x268>)
 80059f4:	2201      	movs	r2, #1
 80059f6:	601a      	str	r2, [r3, #0]
              }
              (void)USBD_LL_FlushEP(pdev, AUDIO_IN_EP);
 80059f8:	2181      	movs	r1, #129	; 0x81
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f001 fffa 	bl	80079f4 <USBD_LL_FlushEP>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005a00:	e017      	b.n	8005a32 <USBD_AUDIO_Setup+0x24a>
              USBD_CtlError(pdev, req);
 8005a02:	6839      	ldr	r1, [r7, #0]
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f001 fb77 	bl	80070f8 <USBD_CtlError>
              ret = USBD_FAIL;
 8005a0a:	2303      	movs	r3, #3
 8005a0c:	75fb      	strb	r3, [r7, #23]
          break;
 8005a0e:	e010      	b.n	8005a32 <USBD_AUDIO_Setup+0x24a>
            USBD_CtlError(pdev, req);
 8005a10:	6839      	ldr	r1, [r7, #0]
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f001 fb70 	bl	80070f8 <USBD_CtlError>
            ret = USBD_FAIL;
 8005a18:	2303      	movs	r3, #3
 8005a1a:	75fb      	strb	r3, [r7, #23]
          break;
 8005a1c:	e009      	b.n	8005a32 <USBD_AUDIO_Setup+0x24a>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005a1e:	6839      	ldr	r1, [r7, #0]
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f001 fb69 	bl	80070f8 <USBD_CtlError>
          ret = USBD_FAIL;
 8005a26:	2303      	movs	r3, #3
 8005a28:	75fb      	strb	r3, [r7, #23]
          break;
 8005a2a:	e002      	b.n	8005a32 <USBD_AUDIO_Setup+0x24a>
          break;
 8005a2c:	bf00      	nop
 8005a2e:	e008      	b.n	8005a42 <USBD_AUDIO_Setup+0x25a>
          break;
 8005a30:	bf00      	nop
      }
      break;
 8005a32:	e006      	b.n	8005a42 <USBD_AUDIO_Setup+0x25a>
    default:
      USBD_CtlError(pdev, req);
 8005a34:	6839      	ldr	r1, [r7, #0]
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f001 fb5e 	bl	80070f8 <USBD_CtlError>
      ret = USBD_FAIL;
 8005a3c:	2303      	movs	r3, #3
 8005a3e:	75fb      	strb	r3, [r7, #23]
      break;
 8005a40:	bf00      	nop
  }

  return (uint8_t)ret;
 8005a42:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	3718      	adds	r7, #24
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}
 8005a4c:	20000056 	.word	0x20000056
 8005a50:	20000214 	.word	0x20000214
 8005a54:	200000c8 	.word	0x200000c8
 8005a58:	20000210 	.word	0x20000210

08005a5c <USBD_AUDIO_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_AUDIO_GetCfgDesc(uint16_t *length)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_AUDIO_CfgDesc);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2276      	movs	r2, #118	; 0x76
 8005a68:	801a      	strh	r2, [r3, #0]

  return USBD_AUDIO_CfgDesc;
 8005a6a:	4b03      	ldr	r3, [pc, #12]	; (8005a78 <USBD_AUDIO_GetCfgDesc+0x1c>)
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	370c      	adds	r7, #12
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr
 8005a78:	20000044 	.word	0x20000044

08005a7c <USBD_AUDIO_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b083      	sub	sp, #12
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
 8005a84:	460b      	mov	r3, r1
 8005a86:	70fb      	strb	r3, [r7, #3]
  /* epnum is the lowest 4 bits of bEndpointAddress. See UAC 1.0 spec, p.61 */
  if (epnum == (AUDIO_IN_EP & 0xf)) {
 8005a88:	78fb      	ldrb	r3, [r7, #3]
 8005a8a:	2b01      	cmp	r3, #1
 8005a8c:	d102      	bne.n	8005a94 <USBD_AUDIO_DataIn+0x18>
	tx_flag = 0U;
 8005a8e:	4b05      	ldr	r3, [pc, #20]	; (8005aa4 <USBD_AUDIO_DataIn+0x28>)
 8005a90:	2200      	movs	r2, #0
 8005a92:	601a      	str	r2, [r3, #0]
  }
  return (uint8_t)USBD_OK;
 8005a94:	2300      	movs	r3, #0
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	370c      	adds	r7, #12
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr
 8005aa2:	bf00      	nop
 8005aa4:	200000c8 	.word	0x200000c8

08005aa8 <USBD_AUDIO_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b084      	sub	sp, #16
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ab6:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d101      	bne.n	8005ac2 <USBD_AUDIO_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8005abe:	2303      	movs	r3, #3
 8005ac0:	e01b      	b.n	8005afa <USBD_AUDIO_EP0_RxReady+0x52>
  }

  if (haudio->control.cmd == AUDIO_REQ_SET_CUR)
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	f893 360a 	ldrb.w	r3, [r3, #1546]	; 0x60a
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d115      	bne.n	8005af8 <USBD_AUDIO_EP0_RxReady+0x50>
  {
    /* In this driver, to simplify code, only SET_CUR request is managed */

    if (haudio->control.unit == AUDIO_OUT_STREAMING_CTRL)
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f893 364c 	ldrb.w	r3, [r3, #1612]	; 0x64c
 8005ad2:	2b02      	cmp	r3, #2
 8005ad4:	d110      	bne.n	8005af8 <USBD_AUDIO_EP0_RxReady+0x50>
    {
      ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->MuteCtl(haudio->control.data[0]);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005adc:	691b      	ldr	r3, [r3, #16]
 8005ade:	68fa      	ldr	r2, [r7, #12]
 8005ae0:	f892 260b 	ldrb.w	r2, [r2, #1547]	; 0x60b
 8005ae4:	4610      	mov	r0, r2
 8005ae6:	4798      	blx	r3
      haudio->control.cmd = 0U;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2200      	movs	r2, #0
 8005aec:	f883 260a 	strb.w	r2, [r3, #1546]	; 0x60a
      haudio->control.len = 0U;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2200      	movs	r2, #0
 8005af4:	f883 264b 	strb.w	r2, [r3, #1611]	; 0x64b
    }
  }

  return (uint8_t)USBD_OK;
 8005af8:	2300      	movs	r3, #0
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3710      	adds	r7, #16
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}

08005b02 <USBD_AUDIO_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 8005b02:	b480      	push	{r7}
 8005b04:	b083      	sub	sp, #12
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  /* Only OUT control data are processed */
  return (uint8_t)USBD_OK;
 8005b0a:	2300      	movs	r3, #0
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	370c      	adds	r7, #12
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr

08005b18 <USBD_AUDIO_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_SOF(USBD_HandleTypeDef *pdev)
{
 8005b18:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005b1c:	b08e      	sub	sp, #56	; 0x38
 8005b1e:	af00      	add	r7, sp, #0
 8005b20:	6078      	str	r0, [r7, #4]
  USBD_AUDIO_HandleTypeDef* haudio;
  haudio = (USBD_AUDIO_HandleTypeDef*)pdev->pClassData;
 8005b22:	6879      	ldr	r1, [r7, #4]
 8005b24:	f8d1 12bc 	ldr.w	r1, [r1, #700]	; 0x2bc
 8005b28:	6379      	str	r1, [r7, #52]	; 0x34
   * 2. Must be volatile so that it will not be optimized out by the compiler.
   */
  static volatile uint32_t sof_count = 0;

  /* Do stuff only when playing */
  if (haudio->rd_enable >= 1U && all_ready == 1U)
 8005b2a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005b2c:	f891 1605 	ldrb.w	r1, [r1, #1541]	; 0x605
 8005b30:	2900      	cmp	r1, #0
 8005b32:	f000 80d7 	beq.w	8005ce4 <USBD_AUDIO_SOF+0x1cc>
 8005b36:	496e      	ldr	r1, [pc, #440]	; (8005cf0 <USBD_AUDIO_SOF+0x1d8>)
 8005b38:	6809      	ldr	r1, [r1, #0]
 8005b3a:	2901      	cmp	r1, #1
 8005b3c:	f040 80d2 	bne.w	8005ce4 <USBD_AUDIO_SOF+0x1cc>
  {
    /* Remaining writable buffer size */
    uint32_t audio_buf_writable_size;

    /* Update audio read pointer */
    haudio->rd_ptr = AUDIO_TOTAL_BUF_SIZE - (LL_DMA_ReadReg(DMA1_Stream4, NDTR) & 0xFFFF);
 8005b40:	496c      	ldr	r1, [pc, #432]	; (8005cf4 <USBD_AUDIO_SOF+0x1dc>)
 8005b42:	6849      	ldr	r1, [r1, #4]
 8005b44:	b289      	uxth	r1, r1
 8005b46:	f5c1 61c0 	rsb	r1, r1, #1536	; 0x600
 8005b4a:	b288      	uxth	r0, r1
 8005b4c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005b4e:	f8a1 0606 	strh.w	r0, [r1, #1542]	; 0x606

    /* Calculate remaining writable buffer size */
    audio_buf_writable_size = haudio->rd_ptr < haudio->wr_ptr
 8005b52:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005b54:	f8b1 0606 	ldrh.w	r0, [r1, #1542]	; 0x606
 8005b58:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005b5a:	f8b1 1608 	ldrh.w	r1, [r1, #1544]	; 0x608
    						? (haudio->rd_ptr + AUDIO_TOTAL_BUF_SIZE - haudio->wr_ptr)/4
							: (haudio->rd_ptr - haudio->wr_ptr)/4;
 8005b5e:	4288      	cmp	r0, r1
 8005b60:	d20d      	bcs.n	8005b7e <USBD_AUDIO_SOF+0x66>
    						? (haudio->rd_ptr + AUDIO_TOTAL_BUF_SIZE - haudio->wr_ptr)/4
 8005b62:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005b64:	f8b1 1606 	ldrh.w	r1, [r1, #1542]	; 0x606
 8005b68:	f501 61c0 	add.w	r1, r1, #1536	; 0x600
 8005b6c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005b6e:	f8b0 0608 	ldrh.w	r0, [r0, #1544]	; 0x608
 8005b72:	1a09      	subs	r1, r1, r0
 8005b74:	2900      	cmp	r1, #0
 8005b76:	da00      	bge.n	8005b7a <USBD_AUDIO_SOF+0x62>
 8005b78:	3103      	adds	r1, #3
 8005b7a:	1089      	asrs	r1, r1, #2
 8005b7c:	e00b      	b.n	8005b96 <USBD_AUDIO_SOF+0x7e>
							: (haudio->rd_ptr - haudio->wr_ptr)/4;
 8005b7e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005b80:	f8b1 1606 	ldrh.w	r1, [r1, #1542]	; 0x606
 8005b84:	4608      	mov	r0, r1
 8005b86:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005b88:	f8b1 1608 	ldrh.w	r1, [r1, #1544]	; 0x608
 8005b8c:	1a41      	subs	r1, r0, r1
 8005b8e:	2900      	cmp	r1, #0
 8005b90:	da00      	bge.n	8005b94 <USBD_AUDIO_SOF+0x7c>
 8005b92:	3103      	adds	r1, #3
 8005b94:	1089      	asrs	r1, r1, #2
    audio_buf_writable_size = haudio->rd_ptr < haudio->wr_ptr
 8005b96:	6339      	str	r1, [r7, #48]	; 0x30

    fb_value = AUDIO_FB_DEFAULT;
 8005b98:	4957      	ldr	r1, [pc, #348]	; (8005cf8 <USBD_AUDIO_SOF+0x1e0>)
 8005b9a:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
 8005b9e:	6008      	str	r0, [r1, #0]

    fb_data[0] = (uint8_t)((fb_value >> 8) & 0x000000FF);
 8005ba0:	4955      	ldr	r1, [pc, #340]	; (8005cf8 <USBD_AUDIO_SOF+0x1e0>)
 8005ba2:	6809      	ldr	r1, [r1, #0]
 8005ba4:	0a09      	lsrs	r1, r1, #8
 8005ba6:	b2c8      	uxtb	r0, r1
 8005ba8:	4954      	ldr	r1, [pc, #336]	; (8005cfc <USBD_AUDIO_SOF+0x1e4>)
 8005baa:	7008      	strb	r0, [r1, #0]
    fb_data[1] = (uint8_t)((fb_value >> 16) & 0x000000FF);
 8005bac:	4952      	ldr	r1, [pc, #328]	; (8005cf8 <USBD_AUDIO_SOF+0x1e0>)
 8005bae:	6809      	ldr	r1, [r1, #0]
 8005bb0:	0c09      	lsrs	r1, r1, #16
 8005bb2:	b2c8      	uxtb	r0, r1
 8005bb4:	4951      	ldr	r1, [pc, #324]	; (8005cfc <USBD_AUDIO_SOF+0x1e4>)
 8005bb6:	7048      	strb	r0, [r1, #1]
    fb_data[2] = (uint8_t)((fb_value >> 24) & 0x000000FF);
 8005bb8:	494f      	ldr	r1, [pc, #316]	; (8005cf8 <USBD_AUDIO_SOF+0x1e0>)
 8005bba:	6809      	ldr	r1, [r1, #0]
 8005bbc:	0e09      	lsrs	r1, r1, #24
 8005bbe:	b2c8      	uxtb	r0, r1
 8005bc0:	494e      	ldr	r1, [pc, #312]	; (8005cfc <USBD_AUDIO_SOF+0x1e4>)
 8005bc2:	7088      	strb	r0, [r1, #2]

    sof_count += 1;
 8005bc4:	494e      	ldr	r1, [pc, #312]	; (8005d00 <USBD_AUDIO_SOF+0x1e8>)
 8005bc6:	6809      	ldr	r1, [r1, #0]
 8005bc8:	3101      	adds	r1, #1
 8005bca:	484d      	ldr	r0, [pc, #308]	; (8005d00 <USBD_AUDIO_SOF+0x1e8>)
 8005bcc:	6001      	str	r1, [r0, #0]

    if (sof_count == 1U)
 8005bce:	494c      	ldr	r1, [pc, #304]	; (8005d00 <USBD_AUDIO_SOF+0x1e8>)
 8005bd0:	6809      	ldr	r1, [r1, #0]
 8005bd2:	2901      	cmp	r1, #1
 8005bd4:	d164      	bne.n	8005ca0 <USBD_AUDIO_SOF+0x188>
    {
      sof_count = 0;
 8005bd6:	494a      	ldr	r1, [pc, #296]	; (8005d00 <USBD_AUDIO_SOF+0x1e8>)
 8005bd8:	2000      	movs	r0, #0
 8005bda:	6008      	str	r0, [r1, #0]
      // we start transmitting to I2S DAC when the audio buffer is half full, so the optimal
      // remaining writable size is (AUDIO_TOTAL_BUF_SIZE/2)/6 samples
      // Calculate feedback value based on the deviation from optimal
      int32_t audio_buf_writable_dev_from_nom_size = audio_buf_writable_size - AUDIO_TOTAL_BUF_SIZE/(2*6);
 8005bdc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005bde:	3980      	subs	r1, #128	; 0x80
 8005be0:	62f9      	str	r1, [r7, #44]	; 0x2c
      // pointer over time.
      // Need to multiply by at least a "PID k factor" of (1<<22) + 256 for a deviation of 1 sample to produce a change in feedback
      // as the internal fb value = (10.14) shifted 8bits in uint32_t.
      // We also should use the minimum "PID k factor" that keeps the write-pointer to read-pointer distance out of the
      // danger zone. This is to minimize the distortion caused by changes in host sampling frequency Fs.
      uint64_t tmp = (uint64_t)((int32_t)(1<<22) + (audio_buf_writable_dev_from_nom_size * 256));
 8005be2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005be4:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 8005be8:	0209      	lsls	r1, r1, #8
 8005bea:	17c8      	asrs	r0, r1, #31
 8005bec:	4688      	mov	r8, r1
 8005bee:	4681      	mov	r9, r0
 8005bf0:	e9c7 8908 	strd	r8, r9, [r7, #32]
      uint64_t pid_k = ((uint64_t)fb_nom) * tmp;
 8005bf4:	4943      	ldr	r1, [pc, #268]	; (8005d04 <USBD_AUDIO_SOF+0x1ec>)
 8005bf6:	6809      	ldr	r1, [r1, #0]
 8005bf8:	2000      	movs	r0, #0
 8005bfa:	460c      	mov	r4, r1
 8005bfc:	4605      	mov	r5, r0
 8005bfe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005c00:	fb04 f001 	mul.w	r0, r4, r1
 8005c04:	6a39      	ldr	r1, [r7, #32]
 8005c06:	fb05 f101 	mul.w	r1, r5, r1
 8005c0a:	4401      	add	r1, r0
 8005c0c:	6a38      	ldr	r0, [r7, #32]
 8005c0e:	fba0 2304 	umull	r2, r3, r0, r4
 8005c12:	4419      	add	r1, r3
 8005c14:	460b      	mov	r3, r1
 8005c16:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8005c1a:	e9c7 2306 	strd	r2, r3, [r7, #24]
      fb_value = (uint32_t)(pid_k >> 22);
 8005c1e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005c22:	f04f 0200 	mov.w	r2, #0
 8005c26:	f04f 0300 	mov.w	r3, #0
 8005c2a:	0d82      	lsrs	r2, r0, #22
 8005c2c:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8005c30:	0d8b      	lsrs	r3, r1, #22
 8005c32:	4b31      	ldr	r3, [pc, #196]	; (8005cf8 <USBD_AUDIO_SOF+0x1e0>)
 8005c34:	601a      	str	r2, [r3, #0]

      /* Check feedback max / min */
      if (fb_value > fb_nom + AUDIO_FB_DELTA)
 8005c36:	4b33      	ldr	r3, [pc, #204]	; (8005d04 <USBD_AUDIO_SOF+0x1ec>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f503 0280 	add.w	r2, r3, #4194304	; 0x400000
 8005c3e:	4b2e      	ldr	r3, [pc, #184]	; (8005cf8 <USBD_AUDIO_SOF+0x1e0>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	429a      	cmp	r2, r3
 8005c44:	d209      	bcs.n	8005c5a <USBD_AUDIO_SOF+0x142>
        fb_value = fb_raw = fb_nom + AUDIO_FB_DELTA;
 8005c46:	4b2f      	ldr	r3, [pc, #188]	; (8005d04 <USBD_AUDIO_SOF+0x1ec>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f503 0380 	add.w	r3, r3, #4194304	; 0x400000
 8005c4e:	461a      	mov	r2, r3
 8005c50:	4b2d      	ldr	r3, [pc, #180]	; (8005d08 <USBD_AUDIO_SOF+0x1f0>)
 8005c52:	601a      	str	r2, [r3, #0]
 8005c54:	4b28      	ldr	r3, [pc, #160]	; (8005cf8 <USBD_AUDIO_SOF+0x1e0>)
 8005c56:	601a      	str	r2, [r3, #0]
 8005c58:	e010      	b.n	8005c7c <USBD_AUDIO_SOF+0x164>
      else if (fb_value < fb_nom - AUDIO_FB_DELTA)
 8005c5a:	4b2a      	ldr	r3, [pc, #168]	; (8005d04 <USBD_AUDIO_SOF+0x1ec>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f5a3 0280 	sub.w	r2, r3, #4194304	; 0x400000
 8005c62:	4b25      	ldr	r3, [pc, #148]	; (8005cf8 <USBD_AUDIO_SOF+0x1e0>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	429a      	cmp	r2, r3
 8005c68:	d908      	bls.n	8005c7c <USBD_AUDIO_SOF+0x164>
    	fb_value = fb_raw = fb_nom - AUDIO_FB_DELTA;
 8005c6a:	4b26      	ldr	r3, [pc, #152]	; (8005d04 <USBD_AUDIO_SOF+0x1ec>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f5a3 0380 	sub.w	r3, r3, #4194304	; 0x400000
 8005c72:	461a      	mov	r2, r3
 8005c74:	4b24      	ldr	r3, [pc, #144]	; (8005d08 <USBD_AUDIO_SOF+0x1f0>)
 8005c76:	601a      	str	r2, [r3, #0]
 8005c78:	4b1f      	ldr	r3, [pc, #124]	; (8005cf8 <USBD_AUDIO_SOF+0x1e0>)
 8005c7a:	601a      	str	r2, [r3, #0]
	   * For example,
	   * 48.000(dec) => 300000(hex, 8.16) => 0C0000(hex, 10.14) => packet { 00, 00, 0C }
	   *
	   * Note that ALSA accepts 8.16 format.
	   */
      fb_data[0] = (uint8_t)((fb_value >> 8) & 0x000000FF);
 8005c7c:	4b1e      	ldr	r3, [pc, #120]	; (8005cf8 <USBD_AUDIO_SOF+0x1e0>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	0a1b      	lsrs	r3, r3, #8
 8005c82:	b2da      	uxtb	r2, r3
 8005c84:	4b1d      	ldr	r3, [pc, #116]	; (8005cfc <USBD_AUDIO_SOF+0x1e4>)
 8005c86:	701a      	strb	r2, [r3, #0]
	  fb_data[1] = (uint8_t)((fb_value >> 16) & 0x000000FF);
 8005c88:	4b1b      	ldr	r3, [pc, #108]	; (8005cf8 <USBD_AUDIO_SOF+0x1e0>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	0c1b      	lsrs	r3, r3, #16
 8005c8e:	b2da      	uxtb	r2, r3
 8005c90:	4b1a      	ldr	r3, [pc, #104]	; (8005cfc <USBD_AUDIO_SOF+0x1e4>)
 8005c92:	705a      	strb	r2, [r3, #1]
	  fb_data[2] = (uint8_t)((fb_value >> 24) & 0x000000FF);
 8005c94:	4b18      	ldr	r3, [pc, #96]	; (8005cf8 <USBD_AUDIO_SOF+0x1e0>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	0e1b      	lsrs	r3, r3, #24
 8005c9a:	b2da      	uxtb	r2, r3
 8005c9c:	4b17      	ldr	r3, [pc, #92]	; (8005cfc <USBD_AUDIO_SOF+0x1e4>)
 8005c9e:	709a      	strb	r2, [r3, #2]
	}
    /* Transmit feedback only when the last one is transmitted */
    if (tx_flag == 0U)
 8005ca0:	4b1a      	ldr	r3, [pc, #104]	; (8005d0c <USBD_AUDIO_SOF+0x1f4>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d11d      	bne.n	8005ce4 <USBD_AUDIO_SOF+0x1cc>
    {
      /* Get FNSOF. Use volatile for fnsof_new since its address is mapped to a hardware register. */
      USB_OTG_GlobalTypeDef* USBx = USB_OTG_FS;
 8005ca8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005cac:	617b      	str	r3, [r7, #20]
      uint32_t USBx_BASE = (uint32_t)USBx;
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	613b      	str	r3, [r7, #16]
      uint32_t volatile fnsof_new = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF) >> 8;
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	0a1b      	lsrs	r3, r3, #8
 8005cbc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8005cc0:	60fb      	str	r3, [r7, #12]

      if ((fnsof & 0x1) == (fnsof_new & 0x1))
 8005cc2:	4b13      	ldr	r3, [pc, #76]	; (8005d10 <USBD_AUDIO_SOF+0x1f8>)
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	4053      	eors	r3, r2
 8005cca:	f003 0301 	and.w	r3, r3, #1
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d108      	bne.n	8005ce4 <USBD_AUDIO_SOF+0x1cc>
//      if (fnsof_new & 0x1)
      {
        USBD_LL_Transmit(pdev, AUDIO_IN_EP, (uint8_t*)fb_data, 3U);
 8005cd2:	2303      	movs	r3, #3
 8005cd4:	4a09      	ldr	r2, [pc, #36]	; (8005cfc <USBD_AUDIO_SOF+0x1e4>)
 8005cd6:	2181      	movs	r1, #129	; 0x81
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f001 ff33 	bl	8007b44 <USBD_LL_Transmit>
        /* Block transmission until it's finished. */
        tx_flag = 1U;
 8005cde:	4b0b      	ldr	r3, [pc, #44]	; (8005d0c <USBD_AUDIO_SOF+0x1f4>)
 8005ce0:	2201      	movs	r2, #1
 8005ce2:	601a      	str	r2, [r3, #0]
      }
    }
  }

  return (uint8_t)USBD_OK;
 8005ce4:	2300      	movs	r3, #0
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3738      	adds	r7, #56	; 0x38
 8005cea:	46bd      	mov	sp, r7
 8005cec:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005cf0:	20000214 	.word	0x20000214
 8005cf4:	40026070 	.word	0x40026070
 8005cf8:	200000d0 	.word	0x200000d0
 8005cfc:	200000d8 	.word	0x200000d8
 8005d00:	2000021c 	.word	0x2000021c
 8005d04:	200000cc 	.word	0x200000cc
 8005d08:	200000d4 	.word	0x200000d4
 8005d0c:	200000c8 	.word	0x200000c8
 8005d10:	20000218 	.word	0x20000218

08005d14 <USBD_AUDIO_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_IsoINIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b084      	sub	sp, #16
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	460b      	mov	r3, r1
 8005d1e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef* USBx = USB_OTG_FS;
 8005d20:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005d24:	60fb      	str	r3, [r7, #12]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	60bb      	str	r3, [r7, #8]
  fnsof = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF) >> 8;
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	0a1b      	lsrs	r3, r3, #8
 8005d34:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8005d38:	4a08      	ldr	r2, [pc, #32]	; (8005d5c <USBD_AUDIO_IsoINIncomplete+0x48>)
 8005d3a:	6013      	str	r3, [r2, #0]

  if (tx_flag == 1U) {
 8005d3c:	4b08      	ldr	r3, [pc, #32]	; (8005d60 <USBD_AUDIO_IsoINIncomplete+0x4c>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d106      	bne.n	8005d52 <USBD_AUDIO_IsoINIncomplete+0x3e>
	tx_flag = 0U;
 8005d44:	4b06      	ldr	r3, [pc, #24]	; (8005d60 <USBD_AUDIO_IsoINIncomplete+0x4c>)
 8005d46:	2200      	movs	r2, #0
 8005d48:	601a      	str	r2, [r3, #0]
	USBD_LL_FlushEP(pdev, AUDIO_IN_EP);
 8005d4a:	2181      	movs	r1, #129	; 0x81
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f001 fe51 	bl	80079f4 <USBD_LL_FlushEP>
  }

  return (uint8_t)USBD_OK;
 8005d52:	2300      	movs	r3, #0
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	3710      	adds	r7, #16
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}
 8005d5c:	20000218 	.word	0x20000218
 8005d60:	200000c8 	.word	0x200000c8

08005d64 <USBD_AUDIO_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_IsoOutIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b084      	sub	sp, #16
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
 8005d6c:	460b      	mov	r3, r1
 8005d6e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef*)pdev->pClassData;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d76:	60fb      	str	r3, [r7, #12]

  USBD_LL_FlushEP(pdev, AUDIO_OUT_EP);
 8005d78:	2101      	movs	r1, #1
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f001 fe3a 	bl	80079f4 <USBD_LL_FlushEP>

  /* Prepare Out endpoint to receive next audio packet */
  (void)USBD_LL_PrepareReceive(pdev, AUDIO_OUT_EP, (uint8_t *)&haudio->buffer[haudio->wr_ptr], AUDIO_OUT_PACKET);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f8b3 3608 	ldrh.w	r3, [r3, #1544]	; 0x608
 8005d86:	461a      	mov	r2, r3
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	4413      	add	r3, r2
 8005d8c:	1d1a      	adds	r2, r3, #4
 8005d8e:	23c0      	movs	r3, #192	; 0xc0
 8005d90:	2101      	movs	r1, #1
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f001 fef7 	bl	8007b86 <USBD_LL_PrepareReceive>

  return (uint8_t)USBD_OK;
 8005d98:	2300      	movs	r3, #0
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3710      	adds	r7, #16
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}
	...

08005da4 <USBD_AUDIO_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b088      	sub	sp, #32
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
 8005dac:	460b      	mov	r3, r1
 8005dae:	70fb      	strb	r3, [r7, #3]
  uint16_t PacketSize;
  USBD_AUDIO_HandleTypeDef *haudio;

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005db6:	613b      	str	r3, [r7, #16]

  static uint8_t tmpbuf[1024];

  if (haudio == NULL)
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d101      	bne.n	8005dc2 <USBD_AUDIO_DataOut+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005dbe:	2303      	movs	r3, #3
 8005dc0:	e0a1      	b.n	8005f06 <USBD_AUDIO_DataOut+0x162>
  }

  if (epnum == AUDIO_OUT_EP && all_ready == 1U)
 8005dc2:	78fb      	ldrb	r3, [r7, #3]
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	f040 809d 	bne.w	8005f04 <USBD_AUDIO_DataOut+0x160>
 8005dca:	4b51      	ldr	r3, [pc, #324]	; (8005f10 <USBD_AUDIO_DataOut+0x16c>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	2b01      	cmp	r3, #1
 8005dd0:	f040 8098 	bne.w	8005f04 <USBD_AUDIO_DataOut+0x160>
  {
    /* Get received data packet length */
    PacketSize = (uint16_t)USBD_LL_GetRxDataSize(pdev, epnum);
 8005dd4:	78fb      	ldrb	r3, [r7, #3]
 8005dd6:	4619      	mov	r1, r3
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f001 fef5 	bl	8007bc8 <USBD_LL_GetRxDataSize>
 8005dde:	4603      	mov	r3, r0
 8005de0:	83fb      	strh	r3, [r7, #30]

	// Ignore strangely large packets
	if (PacketSize > AUDIO_OUT_PACKET)
 8005de2:	8bfb      	ldrh	r3, [r7, #30]
 8005de4:	2bc0      	cmp	r3, #192	; 0xc0
 8005de6:	d901      	bls.n	8005dec <USBD_AUDIO_DataOut+0x48>
	{
		PacketSize = 0U;
 8005de8:	2300      	movs	r3, #0
 8005dea:	83fb      	strh	r3, [r7, #30]
	}

	uint32_t tmpbuf_ptr = 0U;
 8005dec:	2300      	movs	r3, #0
 8005dee:	61bb      	str	r3, [r7, #24]
	uint32_t num_samples = PacketSize / 4; // 2bytes per sample
 8005df0:	8bfb      	ldrh	r3, [r7, #30]
 8005df2:	089b      	lsrs	r3, r3, #2
 8005df4:	b29b      	uxth	r3, r3
 8005df6:	60fb      	str	r3, [r7, #12]

	for (int i = 0; i < num_samples; i++)
 8005df8:	2300      	movs	r3, #0
 8005dfa:	617b      	str	r3, [r7, #20]
 8005dfc:	e04f      	b.n	8005e9e <USBD_AUDIO_DataOut+0xfa>
	{
		haudio->buffer[haudio->wr_ptr++] = tmpbuf[tmpbuf_ptr]; // lsb
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	f8b3 3608 	ldrh.w	r3, [r3, #1544]	; 0x608
 8005e04:	1c5a      	adds	r2, r3, #1
 8005e06:	b291      	uxth	r1, r2
 8005e08:	693a      	ldr	r2, [r7, #16]
 8005e0a:	f8a2 1608 	strh.w	r1, [r2, #1544]	; 0x608
 8005e0e:	4619      	mov	r1, r3
 8005e10:	4a40      	ldr	r2, [pc, #256]	; (8005f14 <USBD_AUDIO_DataOut+0x170>)
 8005e12:	69bb      	ldr	r3, [r7, #24]
 8005e14:	4413      	add	r3, r2
 8005e16:	781a      	ldrb	r2, [r3, #0]
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	440b      	add	r3, r1
 8005e1c:	711a      	strb	r2, [r3, #4]
		haudio->buffer[haudio->wr_ptr++] = tmpbuf[tmpbuf_ptr+1];
 8005e1e:	69bb      	ldr	r3, [r7, #24]
 8005e20:	1c5a      	adds	r2, r3, #1
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	f8b3 3608 	ldrh.w	r3, [r3, #1544]	; 0x608
 8005e28:	1c59      	adds	r1, r3, #1
 8005e2a:	b288      	uxth	r0, r1
 8005e2c:	6939      	ldr	r1, [r7, #16]
 8005e2e:	f8a1 0608 	strh.w	r0, [r1, #1544]	; 0x608
 8005e32:	4619      	mov	r1, r3
 8005e34:	4b37      	ldr	r3, [pc, #220]	; (8005f14 <USBD_AUDIO_DataOut+0x170>)
 8005e36:	5c9a      	ldrb	r2, [r3, r2]
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	440b      	add	r3, r1
 8005e3c:	711a      	strb	r2, [r3, #4]
		haudio->buffer[haudio->wr_ptr++] = tmpbuf[tmpbuf_ptr+2]; // msb
 8005e3e:	69bb      	ldr	r3, [r7, #24]
 8005e40:	1c9a      	adds	r2, r3, #2
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	f8b3 3608 	ldrh.w	r3, [r3, #1544]	; 0x608
 8005e48:	1c59      	adds	r1, r3, #1
 8005e4a:	b288      	uxth	r0, r1
 8005e4c:	6939      	ldr	r1, [r7, #16]
 8005e4e:	f8a1 0608 	strh.w	r0, [r1, #1544]	; 0x608
 8005e52:	4619      	mov	r1, r3
 8005e54:	4b2f      	ldr	r3, [pc, #188]	; (8005f14 <USBD_AUDIO_DataOut+0x170>)
 8005e56:	5c9a      	ldrb	r2, [r3, r2]
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	440b      	add	r3, r1
 8005e5c:	711a      	strb	r2, [r3, #4]
		haudio->buffer[haudio->wr_ptr++] = tmpbuf[tmpbuf_ptr+3];
 8005e5e:	69bb      	ldr	r3, [r7, #24]
 8005e60:	1cda      	adds	r2, r3, #3
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	f8b3 3608 	ldrh.w	r3, [r3, #1544]	; 0x608
 8005e68:	1c59      	adds	r1, r3, #1
 8005e6a:	b288      	uxth	r0, r1
 8005e6c:	6939      	ldr	r1, [r7, #16]
 8005e6e:	f8a1 0608 	strh.w	r0, [r1, #1544]	; 0x608
 8005e72:	4619      	mov	r1, r3
 8005e74:	4b27      	ldr	r3, [pc, #156]	; (8005f14 <USBD_AUDIO_DataOut+0x170>)
 8005e76:	5c9a      	ldrb	r2, [r3, r2]
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	440b      	add	r3, r1
 8005e7c:	711a      	strb	r2, [r3, #4]

		tmpbuf_ptr += 4;
 8005e7e:	69bb      	ldr	r3, [r7, #24]
 8005e80:	3304      	adds	r3, #4
 8005e82:	61bb      	str	r3, [r7, #24]

		if (haudio->wr_ptr >= AUDIO_TOTAL_BUF_SIZE) {
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	f8b3 3608 	ldrh.w	r3, [r3, #1544]	; 0x608
 8005e8a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005e8e:	d303      	bcc.n	8005e98 <USBD_AUDIO_DataOut+0xf4>
			haudio->wr_ptr = 0U;
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	2200      	movs	r2, #0
 8005e94:	f8a3 2608 	strh.w	r2, [r3, #1544]	; 0x608
	for (int i = 0; i < num_samples; i++)
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	3301      	adds	r3, #1
 8005e9c:	617b      	str	r3, [r7, #20]
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	68fa      	ldr	r2, [r7, #12]
 8005ea2:	429a      	cmp	r2, r3
 8005ea4:	d8ab      	bhi.n	8005dfe <USBD_AUDIO_DataOut+0x5a>
		}
	}

	if (haudio->offset == AUDIO_OFFSET_UNKNOWN && is_playing == 0U)
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	f893 3604 	ldrb.w	r3, [r3, #1540]	; 0x604
 8005eac:	2b03      	cmp	r3, #3
 8005eae:	d123      	bne.n	8005ef8 <USBD_AUDIO_DataOut+0x154>
 8005eb0:	4b19      	ldr	r3, [pc, #100]	; (8005f18 <USBD_AUDIO_DataOut+0x174>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d11f      	bne.n	8005ef8 <USBD_AUDIO_DataOut+0x154>
	{
		if (haudio->wr_ptr >= AUDIO_TOTAL_BUF_SIZE / 2U)
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	f8b3 3608 	ldrh.w	r3, [r3, #1544]	; 0x608
 8005ebe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ec2:	d319      	bcc.n	8005ef8 <USBD_AUDIO_DataOut+0x154>
		{
			haudio->offset = AUDIO_OFFSET_NONE;
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	f883 2604 	strb.w	r2, [r3, #1540]	; 0x604
			is_playing = 1U;
 8005ecc:	4b12      	ldr	r3, [pc, #72]	; (8005f18 <USBD_AUDIO_DataOut+0x174>)
 8005ece:	2201      	movs	r2, #1
 8005ed0:	601a      	str	r2, [r3, #0]

			if (haudio->rd_enable == 0U) {
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	f893 3605 	ldrb.w	r3, [r3, #1541]	; 0x605
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d10d      	bne.n	8005ef8 <USBD_AUDIO_DataOut+0x154>
				haudio->rd_enable = 1U;
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	f883 2605 	strb.w	r2, [r3, #1541]	; 0x605
				// Set last writable buffer size to actual value. Note that rd_ptr is 0 now.
//				audio_buf_writable_samples_last = (AUDIO_TOTAL_BUF_SIZE - haudio->wr_ptr)/4;
				((USBD_AUDIO_ItfTypeDef*)pdev->pUserData)->AudioCmd(&haudio->buffer[0],
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	693a      	ldr	r2, [r7, #16]
 8005eee:	1d10      	adds	r0, r2, #4
 8005ef0:	2201      	movs	r2, #1
 8005ef2:	f44f 7140 	mov.w	r1, #768	; 0x300
 8005ef6:	4798      	blx	r3
		}
	}


    /* Prepare Out endpoint to receive next audio packet */
    (void)USBD_LL_PrepareReceive(pdev, AUDIO_OUT_EP, tmpbuf, AUDIO_OUT_PACKET);
 8005ef8:	23c0      	movs	r3, #192	; 0xc0
 8005efa:	4a06      	ldr	r2, [pc, #24]	; (8005f14 <USBD_AUDIO_DataOut+0x170>)
 8005efc:	2101      	movs	r1, #1
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f001 fe41 	bl	8007b86 <USBD_LL_PrepareReceive>
  }

  return (uint8_t)USBD_OK;
 8005f04:	2300      	movs	r3, #0
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3720      	adds	r7, #32
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}
 8005f0e:	bf00      	nop
 8005f10:	20000214 	.word	0x20000214
 8005f14:	20000220 	.word	0x20000220
 8005f18:	20000210 	.word	0x20000210

08005f1c <AUDIO_REQ_GetCurrent>:
  * @param  pdev: instance
  * @param  req: setup class request
  * @retval status
  */
static void AUDIO_REQ_GetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b084      	sub	sp, #16
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
 8005f24:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f2c:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d011      	beq.n	8005f58 <AUDIO_REQ_GetCurrent+0x3c>
  {
    return;
  }

  (void)USBD_memset(haudio->control.data, 0, 64U);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f203 630b 	addw	r3, r3, #1547	; 0x60b
 8005f3a:	2240      	movs	r2, #64	; 0x40
 8005f3c:	2100      	movs	r1, #0
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f001 febe 	bl	8007cc0 <memset>

  /* Send the current mute state */
  (void)USBD_CtlSendData(pdev, haudio->control.data, req->wLength);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f203 610b 	addw	r1, r3, #1547	; 0x60b
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	88db      	ldrh	r3, [r3, #6]
 8005f4e:	461a      	mov	r2, r3
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f001 f942 	bl	80071da <USBD_CtlSendData>
 8005f56:	e000      	b.n	8005f5a <AUDIO_REQ_GetCurrent+0x3e>
    return;
 8005f58:	bf00      	nop
}
 8005f5a:	3710      	adds	r7, #16
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}

08005f60 <AUDIO_REQ_SetCurrent>:
  * @param  pdev: instance
  * @param  req: setup class request
  * @retval status
  */
static void AUDIO_REQ_SetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b084      	sub	sp, #16
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
 8005f68:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f70:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d01f      	beq.n	8005fb8 <AUDIO_REQ_SetCurrent+0x58>
  {
    return;
  }

  if (req->wLength != 0U)
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	88db      	ldrh	r3, [r3, #6]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d01c      	beq.n	8005fba <AUDIO_REQ_SetCurrent+0x5a>
  {
    /* Prepare the reception of the buffer over EP0 */
    (void)USBD_CtlPrepareRx(pdev, haudio->control.data, req->wLength);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f203 610b 	addw	r1, r3, #1547	; 0x60b
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	88db      	ldrh	r3, [r3, #6]
 8005f8a:	461a      	mov	r2, r3
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f001 f950 	bl	8007232 <USBD_CtlPrepareRx>

    haudio->control.cmd = AUDIO_REQ_SET_CUR;     /* Set the request value */
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2201      	movs	r2, #1
 8005f96:	f883 260a 	strb.w	r2, [r3, #1546]	; 0x60a
    haudio->control.len = (uint8_t)req->wLength; /* Set the request data length */
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	88db      	ldrh	r3, [r3, #6]
 8005f9e:	b2da      	uxtb	r2, r3
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f883 264b 	strb.w	r2, [r3, #1611]	; 0x64b
    haudio->control.unit = HIBYTE(req->wIndex);  /* Set the request target unit */
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	889b      	ldrh	r3, [r3, #4]
 8005faa:	0a1b      	lsrs	r3, r3, #8
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	b2da      	uxtb	r2, r3
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f883 264c 	strb.w	r2, [r3, #1612]	; 0x64c
 8005fb6:	e000      	b.n	8005fba <AUDIO_REQ_SetCurrent+0x5a>
    return;
 8005fb8:	bf00      	nop
  }
}
 8005fba:	3710      	adds	r7, #16
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}

08005fc0 <USBD_AUDIO_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_AUDIO_GetDeviceQualifierDesc(uint16_t *length)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b083      	sub	sp, #12
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_AUDIO_DeviceQualifierDesc);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	220a      	movs	r2, #10
 8005fcc:	801a      	strh	r2, [r3, #0]

  return USBD_AUDIO_DeviceQualifierDesc;
 8005fce:	4b03      	ldr	r3, [pc, #12]	; (8005fdc <USBD_AUDIO_GetDeviceQualifierDesc+0x1c>)
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	370c      	adds	r7, #12
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr
 8005fdc:	200000bc 	.word	0x200000bc

08005fe0 <USBD_AUDIO_RegisterInterface>:
  * @param  fops: Audio interface callback
  * @retval status
  */
uint8_t USBD_AUDIO_RegisterInterface(USBD_HandleTypeDef *pdev,
                                     USBD_AUDIO_ItfTypeDef *fops)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b083      	sub	sp, #12
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
 8005fe8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d101      	bne.n	8005ff4 <USBD_AUDIO_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005ff0:	2303      	movs	r3, #3
 8005ff2:	e004      	b.n	8005ffe <USBD_AUDIO_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	683a      	ldr	r2, [r7, #0]
 8005ff8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8005ffc:	2300      	movs	r3, #0
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	370c      	adds	r7, #12
 8006002:	46bd      	mov	sp, r7
 8006004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006008:	4770      	bx	lr

0800600a <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800600a:	b580      	push	{r7, lr}
 800600c:	b086      	sub	sp, #24
 800600e:	af00      	add	r7, sp, #0
 8006010:	60f8      	str	r0, [r7, #12]
 8006012:	60b9      	str	r1, [r7, #8]
 8006014:	4613      	mov	r3, r2
 8006016:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d101      	bne.n	8006022 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800601e:	2303      	movs	r3, #3
 8006020:	e01f      	b.n	8006062 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2200      	movs	r2, #0
 8006026:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2200      	movs	r2, #0
 800602e:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2200      	movs	r2, #0
 8006036:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d003      	beq.n	8006048 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	68ba      	ldr	r2, [r7, #8]
 8006044:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2201      	movs	r2, #1
 800604c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	79fa      	ldrb	r2, [r7, #7]
 8006054:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006056:	68f8      	ldr	r0, [r7, #12]
 8006058:	f001 fc1e 	bl	8007898 <USBD_LL_Init>
 800605c:	4603      	mov	r3, r0
 800605e:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006060:	7dfb      	ldrb	r3, [r7, #23]
}
 8006062:	4618      	mov	r0, r3
 8006064:	3718      	adds	r7, #24
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}

0800606a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800606a:	b580      	push	{r7, lr}
 800606c:	b084      	sub	sp, #16
 800606e:	af00      	add	r7, sp, #0
 8006070:	6078      	str	r0, [r7, #4]
 8006072:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006074:	2300      	movs	r3, #0
 8006076:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d101      	bne.n	8006082 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800607e:	2303      	movs	r3, #3
 8006080:	e016      	b.n	80060b0 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	683a      	ldr	r2, [r7, #0]
 8006086:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006092:	2b00      	cmp	r3, #0
 8006094:	d00b      	beq.n	80060ae <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800609c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800609e:	f107 020e 	add.w	r2, r7, #14
 80060a2:	4610      	mov	r0, r2
 80060a4:	4798      	blx	r3
 80060a6:	4602      	mov	r2, r0
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80060ae:	2300      	movs	r3, #0
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	3710      	adds	r7, #16
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}

080060b8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b082      	sub	sp, #8
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f001 fc37 	bl	8007934 <USBD_LL_Start>
 80060c6:	4603      	mov	r3, r0
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	3708      	adds	r7, #8
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}

080060d0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b083      	sub	sp, #12
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80060d8:	2300      	movs	r3, #0
}
 80060da:	4618      	mov	r0, r3
 80060dc:	370c      	adds	r7, #12
 80060de:	46bd      	mov	sp, r7
 80060e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e4:	4770      	bx	lr

080060e6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80060e6:	b580      	push	{r7, lr}
 80060e8:	b084      	sub	sp, #16
 80060ea:	af00      	add	r7, sp, #0
 80060ec:	6078      	str	r0, [r7, #4]
 80060ee:	460b      	mov	r3, r1
 80060f0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80060f2:	2303      	movs	r3, #3
 80060f4:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d009      	beq.n	8006114 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	78fa      	ldrb	r2, [r7, #3]
 800610a:	4611      	mov	r1, r2
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	4798      	blx	r3
 8006110:	4603      	mov	r3, r0
 8006112:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006114:	7bfb      	ldrb	r3, [r7, #15]
}
 8006116:	4618      	mov	r0, r3
 8006118:	3710      	adds	r7, #16
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}

0800611e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800611e:	b580      	push	{r7, lr}
 8006120:	b082      	sub	sp, #8
 8006122:	af00      	add	r7, sp, #0
 8006124:	6078      	str	r0, [r7, #4]
 8006126:	460b      	mov	r3, r1
 8006128:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006130:	2b00      	cmp	r3, #0
 8006132:	d007      	beq.n	8006144 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	78fa      	ldrb	r2, [r7, #3]
 800613e:	4611      	mov	r1, r2
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	4798      	blx	r3
  }

  return USBD_OK;
 8006144:	2300      	movs	r3, #0
}
 8006146:	4618      	mov	r0, r3
 8006148:	3708      	adds	r7, #8
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}

0800614e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800614e:	b580      	push	{r7, lr}
 8006150:	b084      	sub	sp, #16
 8006152:	af00      	add	r7, sp, #0
 8006154:	6078      	str	r0, [r7, #4]
 8006156:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800615e:	6839      	ldr	r1, [r7, #0]
 8006160:	4618      	mov	r0, r3
 8006162:	f000 ff8f 	bl	8007084 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2201      	movs	r2, #1
 800616a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006174:	461a      	mov	r2, r3
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006182:	f003 031f 	and.w	r3, r3, #31
 8006186:	2b02      	cmp	r3, #2
 8006188:	d01a      	beq.n	80061c0 <USBD_LL_SetupStage+0x72>
 800618a:	2b02      	cmp	r3, #2
 800618c:	d822      	bhi.n	80061d4 <USBD_LL_SetupStage+0x86>
 800618e:	2b00      	cmp	r3, #0
 8006190:	d002      	beq.n	8006198 <USBD_LL_SetupStage+0x4a>
 8006192:	2b01      	cmp	r3, #1
 8006194:	d00a      	beq.n	80061ac <USBD_LL_SetupStage+0x5e>
 8006196:	e01d      	b.n	80061d4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800619e:	4619      	mov	r1, r3
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f000 fa61 	bl	8006668 <USBD_StdDevReq>
 80061a6:	4603      	mov	r3, r0
 80061a8:	73fb      	strb	r3, [r7, #15]
      break;
 80061aa:	e020      	b.n	80061ee <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80061b2:	4619      	mov	r1, r3
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f000 fac5 	bl	8006744 <USBD_StdItfReq>
 80061ba:	4603      	mov	r3, r0
 80061bc:	73fb      	strb	r3, [r7, #15]
      break;
 80061be:	e016      	b.n	80061ee <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80061c6:	4619      	mov	r1, r3
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f000 fb04 	bl	80067d6 <USBD_StdEPReq>
 80061ce:	4603      	mov	r3, r0
 80061d0:	73fb      	strb	r3, [r7, #15]
      break;
 80061d2:	e00c      	b.n	80061ee <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80061da:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80061de:	b2db      	uxtb	r3, r3
 80061e0:	4619      	mov	r1, r3
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f001 fc25 	bl	8007a32 <USBD_LL_StallEP>
 80061e8:	4603      	mov	r3, r0
 80061ea:	73fb      	strb	r3, [r7, #15]
      break;
 80061ec:	bf00      	nop
  }

  return ret;
 80061ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3710      	adds	r7, #16
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}

080061f8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b086      	sub	sp, #24
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	60f8      	str	r0, [r7, #12]
 8006200:	460b      	mov	r3, r1
 8006202:	607a      	str	r2, [r7, #4]
 8006204:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006206:	7afb      	ldrb	r3, [r7, #11]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d138      	bne.n	800627e <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006212:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800621a:	2b03      	cmp	r3, #3
 800621c:	d14a      	bne.n	80062b4 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	689a      	ldr	r2, [r3, #8]
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	68db      	ldr	r3, [r3, #12]
 8006226:	429a      	cmp	r2, r3
 8006228:	d913      	bls.n	8006252 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	689a      	ldr	r2, [r3, #8]
 800622e:	693b      	ldr	r3, [r7, #16]
 8006230:	68db      	ldr	r3, [r3, #12]
 8006232:	1ad2      	subs	r2, r2, r3
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	68da      	ldr	r2, [r3, #12]
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	689b      	ldr	r3, [r3, #8]
 8006240:	4293      	cmp	r3, r2
 8006242:	bf28      	it	cs
 8006244:	4613      	movcs	r3, r2
 8006246:	461a      	mov	r2, r3
 8006248:	6879      	ldr	r1, [r7, #4]
 800624a:	68f8      	ldr	r0, [r7, #12]
 800624c:	f001 f80e 	bl	800726c <USBD_CtlContinueRx>
 8006250:	e030      	b.n	80062b4 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006258:	b2db      	uxtb	r3, r3
 800625a:	2b03      	cmp	r3, #3
 800625c:	d10b      	bne.n	8006276 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006264:	691b      	ldr	r3, [r3, #16]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d005      	beq.n	8006276 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006270:	691b      	ldr	r3, [r3, #16]
 8006272:	68f8      	ldr	r0, [r7, #12]
 8006274:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006276:	68f8      	ldr	r0, [r7, #12]
 8006278:	f001 f809 	bl	800728e <USBD_CtlSendStatus>
 800627c:	e01a      	b.n	80062b4 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006284:	b2db      	uxtb	r3, r3
 8006286:	2b03      	cmp	r3, #3
 8006288:	d114      	bne.n	80062b4 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006290:	699b      	ldr	r3, [r3, #24]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d00e      	beq.n	80062b4 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800629c:	699b      	ldr	r3, [r3, #24]
 800629e:	7afa      	ldrb	r2, [r7, #11]
 80062a0:	4611      	mov	r1, r2
 80062a2:	68f8      	ldr	r0, [r7, #12]
 80062a4:	4798      	blx	r3
 80062a6:	4603      	mov	r3, r0
 80062a8:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80062aa:	7dfb      	ldrb	r3, [r7, #23]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d001      	beq.n	80062b4 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80062b0:	7dfb      	ldrb	r3, [r7, #23]
 80062b2:	e000      	b.n	80062b6 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80062b4:	2300      	movs	r3, #0
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3718      	adds	r7, #24
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}

080062be <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80062be:	b580      	push	{r7, lr}
 80062c0:	b086      	sub	sp, #24
 80062c2:	af00      	add	r7, sp, #0
 80062c4:	60f8      	str	r0, [r7, #12]
 80062c6:	460b      	mov	r3, r1
 80062c8:	607a      	str	r2, [r7, #4]
 80062ca:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80062cc:	7afb      	ldrb	r3, [r7, #11]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d16b      	bne.n	80063aa <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	3314      	adds	r3, #20
 80062d6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80062de:	2b02      	cmp	r3, #2
 80062e0:	d156      	bne.n	8006390 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	689a      	ldr	r2, [r3, #8]
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	68db      	ldr	r3, [r3, #12]
 80062ea:	429a      	cmp	r2, r3
 80062ec:	d914      	bls.n	8006318 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	689a      	ldr	r2, [r3, #8]
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	68db      	ldr	r3, [r3, #12]
 80062f6:	1ad2      	subs	r2, r2, r3
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	461a      	mov	r2, r3
 8006302:	6879      	ldr	r1, [r7, #4]
 8006304:	68f8      	ldr	r0, [r7, #12]
 8006306:	f000 ff83 	bl	8007210 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800630a:	2300      	movs	r3, #0
 800630c:	2200      	movs	r2, #0
 800630e:	2100      	movs	r1, #0
 8006310:	68f8      	ldr	r0, [r7, #12]
 8006312:	f001 fc38 	bl	8007b86 <USBD_LL_PrepareReceive>
 8006316:	e03b      	b.n	8006390 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	68da      	ldr	r2, [r3, #12]
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	689b      	ldr	r3, [r3, #8]
 8006320:	429a      	cmp	r2, r3
 8006322:	d11c      	bne.n	800635e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	685a      	ldr	r2, [r3, #4]
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800632c:	429a      	cmp	r2, r3
 800632e:	d316      	bcc.n	800635e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	685a      	ldr	r2, [r3, #4]
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800633a:	429a      	cmp	r2, r3
 800633c:	d20f      	bcs.n	800635e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800633e:	2200      	movs	r2, #0
 8006340:	2100      	movs	r1, #0
 8006342:	68f8      	ldr	r0, [r7, #12]
 8006344:	f000 ff64 	bl	8007210 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	2200      	movs	r2, #0
 800634c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006350:	2300      	movs	r3, #0
 8006352:	2200      	movs	r2, #0
 8006354:	2100      	movs	r1, #0
 8006356:	68f8      	ldr	r0, [r7, #12]
 8006358:	f001 fc15 	bl	8007b86 <USBD_LL_PrepareReceive>
 800635c:	e018      	b.n	8006390 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006364:	b2db      	uxtb	r3, r3
 8006366:	2b03      	cmp	r3, #3
 8006368:	d10b      	bne.n	8006382 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006370:	68db      	ldr	r3, [r3, #12]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d005      	beq.n	8006382 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800637c:	68db      	ldr	r3, [r3, #12]
 800637e:	68f8      	ldr	r0, [r7, #12]
 8006380:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006382:	2180      	movs	r1, #128	; 0x80
 8006384:	68f8      	ldr	r0, [r7, #12]
 8006386:	f001 fb54 	bl	8007a32 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800638a:	68f8      	ldr	r0, [r7, #12]
 800638c:	f000 ff92 	bl	80072b4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006396:	2b01      	cmp	r3, #1
 8006398:	d122      	bne.n	80063e0 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800639a:	68f8      	ldr	r0, [r7, #12]
 800639c:	f7ff fe98 	bl	80060d0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2200      	movs	r2, #0
 80063a4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80063a8:	e01a      	b.n	80063e0 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063b0:	b2db      	uxtb	r3, r3
 80063b2:	2b03      	cmp	r3, #3
 80063b4:	d114      	bne.n	80063e0 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063bc:	695b      	ldr	r3, [r3, #20]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d00e      	beq.n	80063e0 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063c8:	695b      	ldr	r3, [r3, #20]
 80063ca:	7afa      	ldrb	r2, [r7, #11]
 80063cc:	4611      	mov	r1, r2
 80063ce:	68f8      	ldr	r0, [r7, #12]
 80063d0:	4798      	blx	r3
 80063d2:	4603      	mov	r3, r0
 80063d4:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80063d6:	7dfb      	ldrb	r3, [r7, #23]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d001      	beq.n	80063e0 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80063dc:	7dfb      	ldrb	r3, [r7, #23]
 80063de:	e000      	b.n	80063e2 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80063e0:	2300      	movs	r3, #0
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	3718      	adds	r7, #24
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}

080063ea <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80063ea:	b580      	push	{r7, lr}
 80063ec:	b082      	sub	sp, #8
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2201      	movs	r2, #1
 80063f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2200      	movs	r2, #0
 80063fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2200      	movs	r2, #0
 8006406:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2200      	movs	r2, #0
 800640c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006416:	2b00      	cmp	r3, #0
 8006418:	d101      	bne.n	800641e <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800641a:	2303      	movs	r3, #3
 800641c:	e02f      	b.n	800647e <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006424:	2b00      	cmp	r3, #0
 8006426:	d00f      	beq.n	8006448 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d009      	beq.n	8006448 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	687a      	ldr	r2, [r7, #4]
 800643e:	6852      	ldr	r2, [r2, #4]
 8006440:	b2d2      	uxtb	r2, r2
 8006442:	4611      	mov	r1, r2
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006448:	2340      	movs	r3, #64	; 0x40
 800644a:	2200      	movs	r2, #0
 800644c:	2100      	movs	r1, #0
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f001 fa8b 	bl	800796a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2201      	movs	r2, #1
 8006458:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2240      	movs	r2, #64	; 0x40
 8006460:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006464:	2340      	movs	r3, #64	; 0x40
 8006466:	2200      	movs	r2, #0
 8006468:	2180      	movs	r1, #128	; 0x80
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f001 fa7d 	bl	800796a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2201      	movs	r2, #1
 8006474:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2240      	movs	r2, #64	; 0x40
 800647a:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800647c:	2300      	movs	r3, #0
}
 800647e:	4618      	mov	r0, r3
 8006480:	3708      	adds	r7, #8
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}

08006486 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006486:	b480      	push	{r7}
 8006488:	b083      	sub	sp, #12
 800648a:	af00      	add	r7, sp, #0
 800648c:	6078      	str	r0, [r7, #4]
 800648e:	460b      	mov	r3, r1
 8006490:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	78fa      	ldrb	r2, [r7, #3]
 8006496:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006498:	2300      	movs	r3, #0
}
 800649a:	4618      	mov	r0, r3
 800649c:	370c      	adds	r7, #12
 800649e:	46bd      	mov	sp, r7
 80064a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a4:	4770      	bx	lr

080064a6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80064a6:	b480      	push	{r7}
 80064a8:	b083      	sub	sp, #12
 80064aa:	af00      	add	r7, sp, #0
 80064ac:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064b4:	b2da      	uxtb	r2, r3
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2204      	movs	r2, #4
 80064c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80064c4:	2300      	movs	r3, #0
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	370c      	adds	r7, #12
 80064ca:	46bd      	mov	sp, r7
 80064cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d0:	4770      	bx	lr

080064d2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80064d2:	b480      	push	{r7}
 80064d4:	b083      	sub	sp, #12
 80064d6:	af00      	add	r7, sp, #0
 80064d8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064e0:	b2db      	uxtb	r3, r3
 80064e2:	2b04      	cmp	r3, #4
 80064e4:	d106      	bne.n	80064f4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80064ec:	b2da      	uxtb	r2, r3
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80064f4:	2300      	movs	r3, #0
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	370c      	adds	r7, #12
 80064fa:	46bd      	mov	sp, r7
 80064fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006500:	4770      	bx	lr

08006502 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006502:	b580      	push	{r7, lr}
 8006504:	b082      	sub	sp, #8
 8006506:	af00      	add	r7, sp, #0
 8006508:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006510:	2b00      	cmp	r3, #0
 8006512:	d101      	bne.n	8006518 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8006514:	2303      	movs	r3, #3
 8006516:	e012      	b.n	800653e <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800651e:	b2db      	uxtb	r3, r3
 8006520:	2b03      	cmp	r3, #3
 8006522:	d10b      	bne.n	800653c <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800652a:	69db      	ldr	r3, [r3, #28]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d005      	beq.n	800653c <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006536:	69db      	ldr	r3, [r3, #28]
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800653c:	2300      	movs	r3, #0
}
 800653e:	4618      	mov	r0, r3
 8006540:	3708      	adds	r7, #8
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}

08006546 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006546:	b580      	push	{r7, lr}
 8006548:	b082      	sub	sp, #8
 800654a:	af00      	add	r7, sp, #0
 800654c:	6078      	str	r0, [r7, #4]
 800654e:	460b      	mov	r3, r1
 8006550:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006558:	2b00      	cmp	r3, #0
 800655a:	d101      	bne.n	8006560 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800655c:	2303      	movs	r3, #3
 800655e:	e014      	b.n	800658a <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006566:	b2db      	uxtb	r3, r3
 8006568:	2b03      	cmp	r3, #3
 800656a:	d10d      	bne.n	8006588 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006572:	6a1b      	ldr	r3, [r3, #32]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d007      	beq.n	8006588 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800657e:	6a1b      	ldr	r3, [r3, #32]
 8006580:	78fa      	ldrb	r2, [r7, #3]
 8006582:	4611      	mov	r1, r2
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006588:	2300      	movs	r3, #0
}
 800658a:	4618      	mov	r0, r3
 800658c:	3708      	adds	r7, #8
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}

08006592 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006592:	b580      	push	{r7, lr}
 8006594:	b082      	sub	sp, #8
 8006596:	af00      	add	r7, sp, #0
 8006598:	6078      	str	r0, [r7, #4]
 800659a:	460b      	mov	r3, r1
 800659c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d101      	bne.n	80065ac <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80065a8:	2303      	movs	r3, #3
 80065aa:	e014      	b.n	80065d6 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065b2:	b2db      	uxtb	r3, r3
 80065b4:	2b03      	cmp	r3, #3
 80065b6:	d10d      	bne.n	80065d4 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d007      	beq.n	80065d4 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065cc:	78fa      	ldrb	r2, [r7, #3]
 80065ce:	4611      	mov	r1, r2
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80065d4:	2300      	movs	r3, #0
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3708      	adds	r7, #8
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}

080065de <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80065de:	b480      	push	{r7}
 80065e0:	b083      	sub	sp, #12
 80065e2:	af00      	add	r7, sp, #0
 80065e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80065e6:	2300      	movs	r3, #0
}
 80065e8:	4618      	mov	r0, r3
 80065ea:	370c      	adds	r7, #12
 80065ec:	46bd      	mov	sp, r7
 80065ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f2:	4770      	bx	lr

080065f4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b082      	sub	sp, #8
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2201      	movs	r2, #1
 8006600:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800660a:	2b00      	cmp	r3, #0
 800660c:	d009      	beq.n	8006622 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006614:	685b      	ldr	r3, [r3, #4]
 8006616:	687a      	ldr	r2, [r7, #4]
 8006618:	6852      	ldr	r2, [r2, #4]
 800661a:	b2d2      	uxtb	r2, r2
 800661c:	4611      	mov	r1, r2
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	4798      	blx	r3
  }

  return USBD_OK;
 8006622:	2300      	movs	r3, #0
}
 8006624:	4618      	mov	r0, r3
 8006626:	3708      	adds	r7, #8
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}

0800662c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800662c:	b480      	push	{r7}
 800662e:	b087      	sub	sp, #28
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	781b      	ldrb	r3, [r3, #0]
 800663c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	3301      	adds	r3, #1
 8006642:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	781b      	ldrb	r3, [r3, #0]
 8006648:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800664a:	8a3b      	ldrh	r3, [r7, #16]
 800664c:	021b      	lsls	r3, r3, #8
 800664e:	b21a      	sxth	r2, r3
 8006650:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006654:	4313      	orrs	r3, r2
 8006656:	b21b      	sxth	r3, r3
 8006658:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800665a:	89fb      	ldrh	r3, [r7, #14]
}
 800665c:	4618      	mov	r0, r3
 800665e:	371c      	adds	r7, #28
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr

08006668 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b084      	sub	sp, #16
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
 8006670:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006672:	2300      	movs	r3, #0
 8006674:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	781b      	ldrb	r3, [r3, #0]
 800667a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800667e:	2b40      	cmp	r3, #64	; 0x40
 8006680:	d005      	beq.n	800668e <USBD_StdDevReq+0x26>
 8006682:	2b40      	cmp	r3, #64	; 0x40
 8006684:	d853      	bhi.n	800672e <USBD_StdDevReq+0xc6>
 8006686:	2b00      	cmp	r3, #0
 8006688:	d00b      	beq.n	80066a2 <USBD_StdDevReq+0x3a>
 800668a:	2b20      	cmp	r3, #32
 800668c:	d14f      	bne.n	800672e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006694:	689b      	ldr	r3, [r3, #8]
 8006696:	6839      	ldr	r1, [r7, #0]
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	4798      	blx	r3
 800669c:	4603      	mov	r3, r0
 800669e:	73fb      	strb	r3, [r7, #15]
      break;
 80066a0:	e04a      	b.n	8006738 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	785b      	ldrb	r3, [r3, #1]
 80066a6:	2b09      	cmp	r3, #9
 80066a8:	d83b      	bhi.n	8006722 <USBD_StdDevReq+0xba>
 80066aa:	a201      	add	r2, pc, #4	; (adr r2, 80066b0 <USBD_StdDevReq+0x48>)
 80066ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066b0:	08006705 	.word	0x08006705
 80066b4:	08006719 	.word	0x08006719
 80066b8:	08006723 	.word	0x08006723
 80066bc:	0800670f 	.word	0x0800670f
 80066c0:	08006723 	.word	0x08006723
 80066c4:	080066e3 	.word	0x080066e3
 80066c8:	080066d9 	.word	0x080066d9
 80066cc:	08006723 	.word	0x08006723
 80066d0:	080066fb 	.word	0x080066fb
 80066d4:	080066ed 	.word	0x080066ed
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80066d8:	6839      	ldr	r1, [r7, #0]
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f000 f9de 	bl	8006a9c <USBD_GetDescriptor>
          break;
 80066e0:	e024      	b.n	800672c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80066e2:	6839      	ldr	r1, [r7, #0]
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f000 fb43 	bl	8006d70 <USBD_SetAddress>
          break;
 80066ea:	e01f      	b.n	800672c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80066ec:	6839      	ldr	r1, [r7, #0]
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f000 fb82 	bl	8006df8 <USBD_SetConfig>
 80066f4:	4603      	mov	r3, r0
 80066f6:	73fb      	strb	r3, [r7, #15]
          break;
 80066f8:	e018      	b.n	800672c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80066fa:	6839      	ldr	r1, [r7, #0]
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f000 fc21 	bl	8006f44 <USBD_GetConfig>
          break;
 8006702:	e013      	b.n	800672c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006704:	6839      	ldr	r1, [r7, #0]
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f000 fc52 	bl	8006fb0 <USBD_GetStatus>
          break;
 800670c:	e00e      	b.n	800672c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800670e:	6839      	ldr	r1, [r7, #0]
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f000 fc81 	bl	8007018 <USBD_SetFeature>
          break;
 8006716:	e009      	b.n	800672c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006718:	6839      	ldr	r1, [r7, #0]
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f000 fc90 	bl	8007040 <USBD_ClrFeature>
          break;
 8006720:	e004      	b.n	800672c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8006722:	6839      	ldr	r1, [r7, #0]
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f000 fce7 	bl	80070f8 <USBD_CtlError>
          break;
 800672a:	bf00      	nop
      }
      break;
 800672c:	e004      	b.n	8006738 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800672e:	6839      	ldr	r1, [r7, #0]
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f000 fce1 	bl	80070f8 <USBD_CtlError>
      break;
 8006736:	bf00      	nop
  }

  return ret;
 8006738:	7bfb      	ldrb	r3, [r7, #15]
}
 800673a:	4618      	mov	r0, r3
 800673c:	3710      	adds	r7, #16
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}
 8006742:	bf00      	nop

08006744 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b084      	sub	sp, #16
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
 800674c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800674e:	2300      	movs	r3, #0
 8006750:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	781b      	ldrb	r3, [r3, #0]
 8006756:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800675a:	2b40      	cmp	r3, #64	; 0x40
 800675c:	d005      	beq.n	800676a <USBD_StdItfReq+0x26>
 800675e:	2b40      	cmp	r3, #64	; 0x40
 8006760:	d82f      	bhi.n	80067c2 <USBD_StdItfReq+0x7e>
 8006762:	2b00      	cmp	r3, #0
 8006764:	d001      	beq.n	800676a <USBD_StdItfReq+0x26>
 8006766:	2b20      	cmp	r3, #32
 8006768:	d12b      	bne.n	80067c2 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006770:	b2db      	uxtb	r3, r3
 8006772:	3b01      	subs	r3, #1
 8006774:	2b02      	cmp	r3, #2
 8006776:	d81d      	bhi.n	80067b4 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	889b      	ldrh	r3, [r3, #4]
 800677c:	b2db      	uxtb	r3, r3
 800677e:	2b01      	cmp	r3, #1
 8006780:	d813      	bhi.n	80067aa <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006788:	689b      	ldr	r3, [r3, #8]
 800678a:	6839      	ldr	r1, [r7, #0]
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	4798      	blx	r3
 8006790:	4603      	mov	r3, r0
 8006792:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	88db      	ldrh	r3, [r3, #6]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d110      	bne.n	80067be <USBD_StdItfReq+0x7a>
 800679c:	7bfb      	ldrb	r3, [r7, #15]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d10d      	bne.n	80067be <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f000 fd73 	bl	800728e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80067a8:	e009      	b.n	80067be <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80067aa:	6839      	ldr	r1, [r7, #0]
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f000 fca3 	bl	80070f8 <USBD_CtlError>
          break;
 80067b2:	e004      	b.n	80067be <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80067b4:	6839      	ldr	r1, [r7, #0]
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f000 fc9e 	bl	80070f8 <USBD_CtlError>
          break;
 80067bc:	e000      	b.n	80067c0 <USBD_StdItfReq+0x7c>
          break;
 80067be:	bf00      	nop
      }
      break;
 80067c0:	e004      	b.n	80067cc <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80067c2:	6839      	ldr	r1, [r7, #0]
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f000 fc97 	bl	80070f8 <USBD_CtlError>
      break;
 80067ca:	bf00      	nop
  }

  return ret;
 80067cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3710      	adds	r7, #16
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}

080067d6 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067d6:	b580      	push	{r7, lr}
 80067d8:	b084      	sub	sp, #16
 80067da:	af00      	add	r7, sp, #0
 80067dc:	6078      	str	r0, [r7, #4]
 80067de:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80067e0:	2300      	movs	r3, #0
 80067e2:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	889b      	ldrh	r3, [r3, #4]
 80067e8:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	781b      	ldrb	r3, [r3, #0]
 80067ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80067f2:	2b40      	cmp	r3, #64	; 0x40
 80067f4:	d007      	beq.n	8006806 <USBD_StdEPReq+0x30>
 80067f6:	2b40      	cmp	r3, #64	; 0x40
 80067f8:	f200 8145 	bhi.w	8006a86 <USBD_StdEPReq+0x2b0>
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d00c      	beq.n	800681a <USBD_StdEPReq+0x44>
 8006800:	2b20      	cmp	r3, #32
 8006802:	f040 8140 	bne.w	8006a86 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800680c:	689b      	ldr	r3, [r3, #8]
 800680e:	6839      	ldr	r1, [r7, #0]
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	4798      	blx	r3
 8006814:	4603      	mov	r3, r0
 8006816:	73fb      	strb	r3, [r7, #15]
      break;
 8006818:	e13a      	b.n	8006a90 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	785b      	ldrb	r3, [r3, #1]
 800681e:	2b03      	cmp	r3, #3
 8006820:	d007      	beq.n	8006832 <USBD_StdEPReq+0x5c>
 8006822:	2b03      	cmp	r3, #3
 8006824:	f300 8129 	bgt.w	8006a7a <USBD_StdEPReq+0x2a4>
 8006828:	2b00      	cmp	r3, #0
 800682a:	d07f      	beq.n	800692c <USBD_StdEPReq+0x156>
 800682c:	2b01      	cmp	r3, #1
 800682e:	d03c      	beq.n	80068aa <USBD_StdEPReq+0xd4>
 8006830:	e123      	b.n	8006a7a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006838:	b2db      	uxtb	r3, r3
 800683a:	2b02      	cmp	r3, #2
 800683c:	d002      	beq.n	8006844 <USBD_StdEPReq+0x6e>
 800683e:	2b03      	cmp	r3, #3
 8006840:	d016      	beq.n	8006870 <USBD_StdEPReq+0x9a>
 8006842:	e02c      	b.n	800689e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006844:	7bbb      	ldrb	r3, [r7, #14]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d00d      	beq.n	8006866 <USBD_StdEPReq+0x90>
 800684a:	7bbb      	ldrb	r3, [r7, #14]
 800684c:	2b80      	cmp	r3, #128	; 0x80
 800684e:	d00a      	beq.n	8006866 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006850:	7bbb      	ldrb	r3, [r7, #14]
 8006852:	4619      	mov	r1, r3
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f001 f8ec 	bl	8007a32 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800685a:	2180      	movs	r1, #128	; 0x80
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f001 f8e8 	bl	8007a32 <USBD_LL_StallEP>
 8006862:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006864:	e020      	b.n	80068a8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8006866:	6839      	ldr	r1, [r7, #0]
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f000 fc45 	bl	80070f8 <USBD_CtlError>
              break;
 800686e:	e01b      	b.n	80068a8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	885b      	ldrh	r3, [r3, #2]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d10e      	bne.n	8006896 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006878:	7bbb      	ldrb	r3, [r7, #14]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d00b      	beq.n	8006896 <USBD_StdEPReq+0xc0>
 800687e:	7bbb      	ldrb	r3, [r7, #14]
 8006880:	2b80      	cmp	r3, #128	; 0x80
 8006882:	d008      	beq.n	8006896 <USBD_StdEPReq+0xc0>
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	88db      	ldrh	r3, [r3, #6]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d104      	bne.n	8006896 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800688c:	7bbb      	ldrb	r3, [r7, #14]
 800688e:	4619      	mov	r1, r3
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f001 f8ce 	bl	8007a32 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f000 fcf9 	bl	800728e <USBD_CtlSendStatus>

              break;
 800689c:	e004      	b.n	80068a8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800689e:	6839      	ldr	r1, [r7, #0]
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f000 fc29 	bl	80070f8 <USBD_CtlError>
              break;
 80068a6:	bf00      	nop
          }
          break;
 80068a8:	e0ec      	b.n	8006a84 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068b0:	b2db      	uxtb	r3, r3
 80068b2:	2b02      	cmp	r3, #2
 80068b4:	d002      	beq.n	80068bc <USBD_StdEPReq+0xe6>
 80068b6:	2b03      	cmp	r3, #3
 80068b8:	d016      	beq.n	80068e8 <USBD_StdEPReq+0x112>
 80068ba:	e030      	b.n	800691e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80068bc:	7bbb      	ldrb	r3, [r7, #14]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d00d      	beq.n	80068de <USBD_StdEPReq+0x108>
 80068c2:	7bbb      	ldrb	r3, [r7, #14]
 80068c4:	2b80      	cmp	r3, #128	; 0x80
 80068c6:	d00a      	beq.n	80068de <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80068c8:	7bbb      	ldrb	r3, [r7, #14]
 80068ca:	4619      	mov	r1, r3
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f001 f8b0 	bl	8007a32 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80068d2:	2180      	movs	r1, #128	; 0x80
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f001 f8ac 	bl	8007a32 <USBD_LL_StallEP>
 80068da:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80068dc:	e025      	b.n	800692a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80068de:	6839      	ldr	r1, [r7, #0]
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f000 fc09 	bl	80070f8 <USBD_CtlError>
              break;
 80068e6:	e020      	b.n	800692a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	885b      	ldrh	r3, [r3, #2]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d11b      	bne.n	8006928 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80068f0:	7bbb      	ldrb	r3, [r7, #14]
 80068f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d004      	beq.n	8006904 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80068fa:	7bbb      	ldrb	r3, [r7, #14]
 80068fc:	4619      	mov	r1, r3
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f001 f8b6 	bl	8007a70 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f000 fcc2 	bl	800728e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006910:	689b      	ldr	r3, [r3, #8]
 8006912:	6839      	ldr	r1, [r7, #0]
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	4798      	blx	r3
 8006918:	4603      	mov	r3, r0
 800691a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800691c:	e004      	b.n	8006928 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800691e:	6839      	ldr	r1, [r7, #0]
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f000 fbe9 	bl	80070f8 <USBD_CtlError>
              break;
 8006926:	e000      	b.n	800692a <USBD_StdEPReq+0x154>
              break;
 8006928:	bf00      	nop
          }
          break;
 800692a:	e0ab      	b.n	8006a84 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006932:	b2db      	uxtb	r3, r3
 8006934:	2b02      	cmp	r3, #2
 8006936:	d002      	beq.n	800693e <USBD_StdEPReq+0x168>
 8006938:	2b03      	cmp	r3, #3
 800693a:	d032      	beq.n	80069a2 <USBD_StdEPReq+0x1cc>
 800693c:	e097      	b.n	8006a6e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800693e:	7bbb      	ldrb	r3, [r7, #14]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d007      	beq.n	8006954 <USBD_StdEPReq+0x17e>
 8006944:	7bbb      	ldrb	r3, [r7, #14]
 8006946:	2b80      	cmp	r3, #128	; 0x80
 8006948:	d004      	beq.n	8006954 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800694a:	6839      	ldr	r1, [r7, #0]
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f000 fbd3 	bl	80070f8 <USBD_CtlError>
                break;
 8006952:	e091      	b.n	8006a78 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006954:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006958:	2b00      	cmp	r3, #0
 800695a:	da0b      	bge.n	8006974 <USBD_StdEPReq+0x19e>
 800695c:	7bbb      	ldrb	r3, [r7, #14]
 800695e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006962:	4613      	mov	r3, r2
 8006964:	009b      	lsls	r3, r3, #2
 8006966:	4413      	add	r3, r2
 8006968:	009b      	lsls	r3, r3, #2
 800696a:	3310      	adds	r3, #16
 800696c:	687a      	ldr	r2, [r7, #4]
 800696e:	4413      	add	r3, r2
 8006970:	3304      	adds	r3, #4
 8006972:	e00b      	b.n	800698c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006974:	7bbb      	ldrb	r3, [r7, #14]
 8006976:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800697a:	4613      	mov	r3, r2
 800697c:	009b      	lsls	r3, r3, #2
 800697e:	4413      	add	r3, r2
 8006980:	009b      	lsls	r3, r3, #2
 8006982:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006986:	687a      	ldr	r2, [r7, #4]
 8006988:	4413      	add	r3, r2
 800698a:	3304      	adds	r3, #4
 800698c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	2200      	movs	r2, #0
 8006992:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	2202      	movs	r2, #2
 8006998:	4619      	mov	r1, r3
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f000 fc1d 	bl	80071da <USBD_CtlSendData>
              break;
 80069a0:	e06a      	b.n	8006a78 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80069a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	da11      	bge.n	80069ce <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80069aa:	7bbb      	ldrb	r3, [r7, #14]
 80069ac:	f003 020f 	and.w	r2, r3, #15
 80069b0:	6879      	ldr	r1, [r7, #4]
 80069b2:	4613      	mov	r3, r2
 80069b4:	009b      	lsls	r3, r3, #2
 80069b6:	4413      	add	r3, r2
 80069b8:	009b      	lsls	r3, r3, #2
 80069ba:	440b      	add	r3, r1
 80069bc:	3324      	adds	r3, #36	; 0x24
 80069be:	881b      	ldrh	r3, [r3, #0]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d117      	bne.n	80069f4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80069c4:	6839      	ldr	r1, [r7, #0]
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f000 fb96 	bl	80070f8 <USBD_CtlError>
                  break;
 80069cc:	e054      	b.n	8006a78 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80069ce:	7bbb      	ldrb	r3, [r7, #14]
 80069d0:	f003 020f 	and.w	r2, r3, #15
 80069d4:	6879      	ldr	r1, [r7, #4]
 80069d6:	4613      	mov	r3, r2
 80069d8:	009b      	lsls	r3, r3, #2
 80069da:	4413      	add	r3, r2
 80069dc:	009b      	lsls	r3, r3, #2
 80069de:	440b      	add	r3, r1
 80069e0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80069e4:	881b      	ldrh	r3, [r3, #0]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d104      	bne.n	80069f4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80069ea:	6839      	ldr	r1, [r7, #0]
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f000 fb83 	bl	80070f8 <USBD_CtlError>
                  break;
 80069f2:	e041      	b.n	8006a78 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80069f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	da0b      	bge.n	8006a14 <USBD_StdEPReq+0x23e>
 80069fc:	7bbb      	ldrb	r3, [r7, #14]
 80069fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006a02:	4613      	mov	r3, r2
 8006a04:	009b      	lsls	r3, r3, #2
 8006a06:	4413      	add	r3, r2
 8006a08:	009b      	lsls	r3, r3, #2
 8006a0a:	3310      	adds	r3, #16
 8006a0c:	687a      	ldr	r2, [r7, #4]
 8006a0e:	4413      	add	r3, r2
 8006a10:	3304      	adds	r3, #4
 8006a12:	e00b      	b.n	8006a2c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006a14:	7bbb      	ldrb	r3, [r7, #14]
 8006a16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a1a:	4613      	mov	r3, r2
 8006a1c:	009b      	lsls	r3, r3, #2
 8006a1e:	4413      	add	r3, r2
 8006a20:	009b      	lsls	r3, r3, #2
 8006a22:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006a26:	687a      	ldr	r2, [r7, #4]
 8006a28:	4413      	add	r3, r2
 8006a2a:	3304      	adds	r3, #4
 8006a2c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006a2e:	7bbb      	ldrb	r3, [r7, #14]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d002      	beq.n	8006a3a <USBD_StdEPReq+0x264>
 8006a34:	7bbb      	ldrb	r3, [r7, #14]
 8006a36:	2b80      	cmp	r3, #128	; 0x80
 8006a38:	d103      	bne.n	8006a42 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	601a      	str	r2, [r3, #0]
 8006a40:	e00e      	b.n	8006a60 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006a42:	7bbb      	ldrb	r3, [r7, #14]
 8006a44:	4619      	mov	r1, r3
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f001 f831 	bl	8007aae <USBD_LL_IsStallEP>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d003      	beq.n	8006a5a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	2201      	movs	r2, #1
 8006a56:	601a      	str	r2, [r3, #0]
 8006a58:	e002      	b.n	8006a60 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	2202      	movs	r2, #2
 8006a64:	4619      	mov	r1, r3
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f000 fbb7 	bl	80071da <USBD_CtlSendData>
              break;
 8006a6c:	e004      	b.n	8006a78 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8006a6e:	6839      	ldr	r1, [r7, #0]
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f000 fb41 	bl	80070f8 <USBD_CtlError>
              break;
 8006a76:	bf00      	nop
          }
          break;
 8006a78:	e004      	b.n	8006a84 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8006a7a:	6839      	ldr	r1, [r7, #0]
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f000 fb3b 	bl	80070f8 <USBD_CtlError>
          break;
 8006a82:	bf00      	nop
      }
      break;
 8006a84:	e004      	b.n	8006a90 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8006a86:	6839      	ldr	r1, [r7, #0]
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f000 fb35 	bl	80070f8 <USBD_CtlError>
      break;
 8006a8e:	bf00      	nop
  }

  return ret;
 8006a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3710      	adds	r7, #16
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}
	...

08006a9c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b084      	sub	sp, #16
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
 8006aa4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	885b      	ldrh	r3, [r3, #2]
 8006ab6:	0a1b      	lsrs	r3, r3, #8
 8006ab8:	b29b      	uxth	r3, r3
 8006aba:	3b01      	subs	r3, #1
 8006abc:	2b06      	cmp	r3, #6
 8006abe:	f200 8128 	bhi.w	8006d12 <USBD_GetDescriptor+0x276>
 8006ac2:	a201      	add	r2, pc, #4	; (adr r2, 8006ac8 <USBD_GetDescriptor+0x2c>)
 8006ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ac8:	08006ae5 	.word	0x08006ae5
 8006acc:	08006afd 	.word	0x08006afd
 8006ad0:	08006b3d 	.word	0x08006b3d
 8006ad4:	08006d13 	.word	0x08006d13
 8006ad8:	08006d13 	.word	0x08006d13
 8006adc:	08006cb3 	.word	0x08006cb3
 8006ae0:	08006cdf 	.word	0x08006cdf
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	687a      	ldr	r2, [r7, #4]
 8006aee:	7c12      	ldrb	r2, [r2, #16]
 8006af0:	f107 0108 	add.w	r1, r7, #8
 8006af4:	4610      	mov	r0, r2
 8006af6:	4798      	blx	r3
 8006af8:	60f8      	str	r0, [r7, #12]
      break;
 8006afa:	e112      	b.n	8006d22 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	7c1b      	ldrb	r3, [r3, #16]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d10d      	bne.n	8006b20 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b0c:	f107 0208 	add.w	r2, r7, #8
 8006b10:	4610      	mov	r0, r2
 8006b12:	4798      	blx	r3
 8006b14:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	3301      	adds	r3, #1
 8006b1a:	2202      	movs	r2, #2
 8006b1c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006b1e:	e100      	b.n	8006d22 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b28:	f107 0208 	add.w	r2, r7, #8
 8006b2c:	4610      	mov	r0, r2
 8006b2e:	4798      	blx	r3
 8006b30:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	3301      	adds	r3, #1
 8006b36:	2202      	movs	r2, #2
 8006b38:	701a      	strb	r2, [r3, #0]
      break;
 8006b3a:	e0f2      	b.n	8006d22 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	885b      	ldrh	r3, [r3, #2]
 8006b40:	b2db      	uxtb	r3, r3
 8006b42:	2b05      	cmp	r3, #5
 8006b44:	f200 80ac 	bhi.w	8006ca0 <USBD_GetDescriptor+0x204>
 8006b48:	a201      	add	r2, pc, #4	; (adr r2, 8006b50 <USBD_GetDescriptor+0xb4>)
 8006b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b4e:	bf00      	nop
 8006b50:	08006b69 	.word	0x08006b69
 8006b54:	08006b9d 	.word	0x08006b9d
 8006b58:	08006bd1 	.word	0x08006bd1
 8006b5c:	08006c05 	.word	0x08006c05
 8006b60:	08006c39 	.word	0x08006c39
 8006b64:	08006c6d 	.word	0x08006c6d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d00b      	beq.n	8006b8c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	687a      	ldr	r2, [r7, #4]
 8006b7e:	7c12      	ldrb	r2, [r2, #16]
 8006b80:	f107 0108 	add.w	r1, r7, #8
 8006b84:	4610      	mov	r0, r2
 8006b86:	4798      	blx	r3
 8006b88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b8a:	e091      	b.n	8006cb0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006b8c:	6839      	ldr	r1, [r7, #0]
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f000 fab2 	bl	80070f8 <USBD_CtlError>
            err++;
 8006b94:	7afb      	ldrb	r3, [r7, #11]
 8006b96:	3301      	adds	r3, #1
 8006b98:	72fb      	strb	r3, [r7, #11]
          break;
 8006b9a:	e089      	b.n	8006cb0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ba2:	689b      	ldr	r3, [r3, #8]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d00b      	beq.n	8006bc0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bae:	689b      	ldr	r3, [r3, #8]
 8006bb0:	687a      	ldr	r2, [r7, #4]
 8006bb2:	7c12      	ldrb	r2, [r2, #16]
 8006bb4:	f107 0108 	add.w	r1, r7, #8
 8006bb8:	4610      	mov	r0, r2
 8006bba:	4798      	blx	r3
 8006bbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006bbe:	e077      	b.n	8006cb0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006bc0:	6839      	ldr	r1, [r7, #0]
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f000 fa98 	bl	80070f8 <USBD_CtlError>
            err++;
 8006bc8:	7afb      	ldrb	r3, [r7, #11]
 8006bca:	3301      	adds	r3, #1
 8006bcc:	72fb      	strb	r3, [r7, #11]
          break;
 8006bce:	e06f      	b.n	8006cb0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bd6:	68db      	ldr	r3, [r3, #12]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d00b      	beq.n	8006bf4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006be2:	68db      	ldr	r3, [r3, #12]
 8006be4:	687a      	ldr	r2, [r7, #4]
 8006be6:	7c12      	ldrb	r2, [r2, #16]
 8006be8:	f107 0108 	add.w	r1, r7, #8
 8006bec:	4610      	mov	r0, r2
 8006bee:	4798      	blx	r3
 8006bf0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006bf2:	e05d      	b.n	8006cb0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006bf4:	6839      	ldr	r1, [r7, #0]
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f000 fa7e 	bl	80070f8 <USBD_CtlError>
            err++;
 8006bfc:	7afb      	ldrb	r3, [r7, #11]
 8006bfe:	3301      	adds	r3, #1
 8006c00:	72fb      	strb	r3, [r7, #11]
          break;
 8006c02:	e055      	b.n	8006cb0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c0a:	691b      	ldr	r3, [r3, #16]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d00b      	beq.n	8006c28 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c16:	691b      	ldr	r3, [r3, #16]
 8006c18:	687a      	ldr	r2, [r7, #4]
 8006c1a:	7c12      	ldrb	r2, [r2, #16]
 8006c1c:	f107 0108 	add.w	r1, r7, #8
 8006c20:	4610      	mov	r0, r2
 8006c22:	4798      	blx	r3
 8006c24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c26:	e043      	b.n	8006cb0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006c28:	6839      	ldr	r1, [r7, #0]
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f000 fa64 	bl	80070f8 <USBD_CtlError>
            err++;
 8006c30:	7afb      	ldrb	r3, [r7, #11]
 8006c32:	3301      	adds	r3, #1
 8006c34:	72fb      	strb	r3, [r7, #11]
          break;
 8006c36:	e03b      	b.n	8006cb0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c3e:	695b      	ldr	r3, [r3, #20]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d00b      	beq.n	8006c5c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c4a:	695b      	ldr	r3, [r3, #20]
 8006c4c:	687a      	ldr	r2, [r7, #4]
 8006c4e:	7c12      	ldrb	r2, [r2, #16]
 8006c50:	f107 0108 	add.w	r1, r7, #8
 8006c54:	4610      	mov	r0, r2
 8006c56:	4798      	blx	r3
 8006c58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c5a:	e029      	b.n	8006cb0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006c5c:	6839      	ldr	r1, [r7, #0]
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f000 fa4a 	bl	80070f8 <USBD_CtlError>
            err++;
 8006c64:	7afb      	ldrb	r3, [r7, #11]
 8006c66:	3301      	adds	r3, #1
 8006c68:	72fb      	strb	r3, [r7, #11]
          break;
 8006c6a:	e021      	b.n	8006cb0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c72:	699b      	ldr	r3, [r3, #24]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d00b      	beq.n	8006c90 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c7e:	699b      	ldr	r3, [r3, #24]
 8006c80:	687a      	ldr	r2, [r7, #4]
 8006c82:	7c12      	ldrb	r2, [r2, #16]
 8006c84:	f107 0108 	add.w	r1, r7, #8
 8006c88:	4610      	mov	r0, r2
 8006c8a:	4798      	blx	r3
 8006c8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c8e:	e00f      	b.n	8006cb0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006c90:	6839      	ldr	r1, [r7, #0]
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f000 fa30 	bl	80070f8 <USBD_CtlError>
            err++;
 8006c98:	7afb      	ldrb	r3, [r7, #11]
 8006c9a:	3301      	adds	r3, #1
 8006c9c:	72fb      	strb	r3, [r7, #11]
          break;
 8006c9e:	e007      	b.n	8006cb0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006ca0:	6839      	ldr	r1, [r7, #0]
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f000 fa28 	bl	80070f8 <USBD_CtlError>
          err++;
 8006ca8:	7afb      	ldrb	r3, [r7, #11]
 8006caa:	3301      	adds	r3, #1
 8006cac:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8006cae:	bf00      	nop
      }
      break;
 8006cb0:	e037      	b.n	8006d22 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	7c1b      	ldrb	r3, [r3, #16]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d109      	bne.n	8006cce <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cc2:	f107 0208 	add.w	r2, r7, #8
 8006cc6:	4610      	mov	r0, r2
 8006cc8:	4798      	blx	r3
 8006cca:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006ccc:	e029      	b.n	8006d22 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006cce:	6839      	ldr	r1, [r7, #0]
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f000 fa11 	bl	80070f8 <USBD_CtlError>
        err++;
 8006cd6:	7afb      	ldrb	r3, [r7, #11]
 8006cd8:	3301      	adds	r3, #1
 8006cda:	72fb      	strb	r3, [r7, #11]
      break;
 8006cdc:	e021      	b.n	8006d22 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	7c1b      	ldrb	r3, [r3, #16]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d10d      	bne.n	8006d02 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cee:	f107 0208 	add.w	r2, r7, #8
 8006cf2:	4610      	mov	r0, r2
 8006cf4:	4798      	blx	r3
 8006cf6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	3301      	adds	r3, #1
 8006cfc:	2207      	movs	r2, #7
 8006cfe:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006d00:	e00f      	b.n	8006d22 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006d02:	6839      	ldr	r1, [r7, #0]
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f000 f9f7 	bl	80070f8 <USBD_CtlError>
        err++;
 8006d0a:	7afb      	ldrb	r3, [r7, #11]
 8006d0c:	3301      	adds	r3, #1
 8006d0e:	72fb      	strb	r3, [r7, #11]
      break;
 8006d10:	e007      	b.n	8006d22 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006d12:	6839      	ldr	r1, [r7, #0]
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f000 f9ef 	bl	80070f8 <USBD_CtlError>
      err++;
 8006d1a:	7afb      	ldrb	r3, [r7, #11]
 8006d1c:	3301      	adds	r3, #1
 8006d1e:	72fb      	strb	r3, [r7, #11]
      break;
 8006d20:	bf00      	nop
  }

  if (err != 0U)
 8006d22:	7afb      	ldrb	r3, [r7, #11]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d11e      	bne.n	8006d66 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	88db      	ldrh	r3, [r3, #6]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d016      	beq.n	8006d5e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006d30:	893b      	ldrh	r3, [r7, #8]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d00e      	beq.n	8006d54 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	88da      	ldrh	r2, [r3, #6]
 8006d3a:	893b      	ldrh	r3, [r7, #8]
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	bf28      	it	cs
 8006d40:	4613      	movcs	r3, r2
 8006d42:	b29b      	uxth	r3, r3
 8006d44:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006d46:	893b      	ldrh	r3, [r7, #8]
 8006d48:	461a      	mov	r2, r3
 8006d4a:	68f9      	ldr	r1, [r7, #12]
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f000 fa44 	bl	80071da <USBD_CtlSendData>
 8006d52:	e009      	b.n	8006d68 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006d54:	6839      	ldr	r1, [r7, #0]
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f000 f9ce 	bl	80070f8 <USBD_CtlError>
 8006d5c:	e004      	b.n	8006d68 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f000 fa95 	bl	800728e <USBD_CtlSendStatus>
 8006d64:	e000      	b.n	8006d68 <USBD_GetDescriptor+0x2cc>
    return;
 8006d66:	bf00      	nop
  }
}
 8006d68:	3710      	adds	r7, #16
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}
 8006d6e:	bf00      	nop

08006d70 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b084      	sub	sp, #16
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
 8006d78:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	889b      	ldrh	r3, [r3, #4]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d131      	bne.n	8006de6 <USBD_SetAddress+0x76>
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	88db      	ldrh	r3, [r3, #6]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d12d      	bne.n	8006de6 <USBD_SetAddress+0x76>
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	885b      	ldrh	r3, [r3, #2]
 8006d8e:	2b7f      	cmp	r3, #127	; 0x7f
 8006d90:	d829      	bhi.n	8006de6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	885b      	ldrh	r3, [r3, #2]
 8006d96:	b2db      	uxtb	r3, r3
 8006d98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d9c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006da4:	b2db      	uxtb	r3, r3
 8006da6:	2b03      	cmp	r3, #3
 8006da8:	d104      	bne.n	8006db4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006daa:	6839      	ldr	r1, [r7, #0]
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f000 f9a3 	bl	80070f8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006db2:	e01d      	b.n	8006df0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	7bfa      	ldrb	r2, [r7, #15]
 8006db8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006dbc:	7bfb      	ldrb	r3, [r7, #15]
 8006dbe:	4619      	mov	r1, r3
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f000 fea0 	bl	8007b06 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f000 fa61 	bl	800728e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006dcc:	7bfb      	ldrb	r3, [r7, #15]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d004      	beq.n	8006ddc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2202      	movs	r2, #2
 8006dd6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006dda:	e009      	b.n	8006df0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2201      	movs	r2, #1
 8006de0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006de4:	e004      	b.n	8006df0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006de6:	6839      	ldr	r1, [r7, #0]
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f000 f985 	bl	80070f8 <USBD_CtlError>
  }
}
 8006dee:	bf00      	nop
 8006df0:	bf00      	nop
 8006df2:	3710      	adds	r7, #16
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}

08006df8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b084      	sub	sp, #16
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
 8006e00:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e02:	2300      	movs	r3, #0
 8006e04:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	885b      	ldrh	r3, [r3, #2]
 8006e0a:	b2da      	uxtb	r2, r3
 8006e0c:	4b4c      	ldr	r3, [pc, #304]	; (8006f40 <USBD_SetConfig+0x148>)
 8006e0e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006e10:	4b4b      	ldr	r3, [pc, #300]	; (8006f40 <USBD_SetConfig+0x148>)
 8006e12:	781b      	ldrb	r3, [r3, #0]
 8006e14:	2b01      	cmp	r3, #1
 8006e16:	d905      	bls.n	8006e24 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006e18:	6839      	ldr	r1, [r7, #0]
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f000 f96c 	bl	80070f8 <USBD_CtlError>
    return USBD_FAIL;
 8006e20:	2303      	movs	r3, #3
 8006e22:	e088      	b.n	8006f36 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e2a:	b2db      	uxtb	r3, r3
 8006e2c:	2b02      	cmp	r3, #2
 8006e2e:	d002      	beq.n	8006e36 <USBD_SetConfig+0x3e>
 8006e30:	2b03      	cmp	r3, #3
 8006e32:	d025      	beq.n	8006e80 <USBD_SetConfig+0x88>
 8006e34:	e071      	b.n	8006f1a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006e36:	4b42      	ldr	r3, [pc, #264]	; (8006f40 <USBD_SetConfig+0x148>)
 8006e38:	781b      	ldrb	r3, [r3, #0]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d01c      	beq.n	8006e78 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8006e3e:	4b40      	ldr	r3, [pc, #256]	; (8006f40 <USBD_SetConfig+0x148>)
 8006e40:	781b      	ldrb	r3, [r3, #0]
 8006e42:	461a      	mov	r2, r3
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006e48:	4b3d      	ldr	r3, [pc, #244]	; (8006f40 <USBD_SetConfig+0x148>)
 8006e4a:	781b      	ldrb	r3, [r3, #0]
 8006e4c:	4619      	mov	r1, r3
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f7ff f949 	bl	80060e6 <USBD_SetClassConfig>
 8006e54:	4603      	mov	r3, r0
 8006e56:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006e58:	7bfb      	ldrb	r3, [r7, #15]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d004      	beq.n	8006e68 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8006e5e:	6839      	ldr	r1, [r7, #0]
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f000 f949 	bl	80070f8 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006e66:	e065      	b.n	8006f34 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	f000 fa10 	bl	800728e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2203      	movs	r2, #3
 8006e72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006e76:	e05d      	b.n	8006f34 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	f000 fa08 	bl	800728e <USBD_CtlSendStatus>
      break;
 8006e7e:	e059      	b.n	8006f34 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006e80:	4b2f      	ldr	r3, [pc, #188]	; (8006f40 <USBD_SetConfig+0x148>)
 8006e82:	781b      	ldrb	r3, [r3, #0]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d112      	bne.n	8006eae <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2202      	movs	r2, #2
 8006e8c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006e90:	4b2b      	ldr	r3, [pc, #172]	; (8006f40 <USBD_SetConfig+0x148>)
 8006e92:	781b      	ldrb	r3, [r3, #0]
 8006e94:	461a      	mov	r2, r3
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006e9a:	4b29      	ldr	r3, [pc, #164]	; (8006f40 <USBD_SetConfig+0x148>)
 8006e9c:	781b      	ldrb	r3, [r3, #0]
 8006e9e:	4619      	mov	r1, r3
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	f7ff f93c 	bl	800611e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f000 f9f1 	bl	800728e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006eac:	e042      	b.n	8006f34 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8006eae:	4b24      	ldr	r3, [pc, #144]	; (8006f40 <USBD_SetConfig+0x148>)
 8006eb0:	781b      	ldrb	r3, [r3, #0]
 8006eb2:	461a      	mov	r2, r3
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	685b      	ldr	r3, [r3, #4]
 8006eb8:	429a      	cmp	r2, r3
 8006eba:	d02a      	beq.n	8006f12 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	b2db      	uxtb	r3, r3
 8006ec2:	4619      	mov	r1, r3
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f7ff f92a 	bl	800611e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006eca:	4b1d      	ldr	r3, [pc, #116]	; (8006f40 <USBD_SetConfig+0x148>)
 8006ecc:	781b      	ldrb	r3, [r3, #0]
 8006ece:	461a      	mov	r2, r3
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006ed4:	4b1a      	ldr	r3, [pc, #104]	; (8006f40 <USBD_SetConfig+0x148>)
 8006ed6:	781b      	ldrb	r3, [r3, #0]
 8006ed8:	4619      	mov	r1, r3
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f7ff f903 	bl	80060e6 <USBD_SetClassConfig>
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006ee4:	7bfb      	ldrb	r3, [r7, #15]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d00f      	beq.n	8006f0a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8006eea:	6839      	ldr	r1, [r7, #0]
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f000 f903 	bl	80070f8 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	685b      	ldr	r3, [r3, #4]
 8006ef6:	b2db      	uxtb	r3, r3
 8006ef8:	4619      	mov	r1, r3
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f7ff f90f 	bl	800611e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2202      	movs	r2, #2
 8006f04:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006f08:	e014      	b.n	8006f34 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f000 f9bf 	bl	800728e <USBD_CtlSendStatus>
      break;
 8006f10:	e010      	b.n	8006f34 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f000 f9bb 	bl	800728e <USBD_CtlSendStatus>
      break;
 8006f18:	e00c      	b.n	8006f34 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006f1a:	6839      	ldr	r1, [r7, #0]
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f000 f8eb 	bl	80070f8 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006f22:	4b07      	ldr	r3, [pc, #28]	; (8006f40 <USBD_SetConfig+0x148>)
 8006f24:	781b      	ldrb	r3, [r3, #0]
 8006f26:	4619      	mov	r1, r3
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f7ff f8f8 	bl	800611e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006f2e:	2303      	movs	r3, #3
 8006f30:	73fb      	strb	r3, [r7, #15]
      break;
 8006f32:	bf00      	nop
  }

  return ret;
 8006f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	3710      	adds	r7, #16
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}
 8006f3e:	bf00      	nop
 8006f40:	20000620 	.word	0x20000620

08006f44 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b082      	sub	sp, #8
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
 8006f4c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	88db      	ldrh	r3, [r3, #6]
 8006f52:	2b01      	cmp	r3, #1
 8006f54:	d004      	beq.n	8006f60 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006f56:	6839      	ldr	r1, [r7, #0]
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	f000 f8cd 	bl	80070f8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006f5e:	e023      	b.n	8006fa8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f66:	b2db      	uxtb	r3, r3
 8006f68:	2b02      	cmp	r3, #2
 8006f6a:	dc02      	bgt.n	8006f72 <USBD_GetConfig+0x2e>
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	dc03      	bgt.n	8006f78 <USBD_GetConfig+0x34>
 8006f70:	e015      	b.n	8006f9e <USBD_GetConfig+0x5a>
 8006f72:	2b03      	cmp	r3, #3
 8006f74:	d00b      	beq.n	8006f8e <USBD_GetConfig+0x4a>
 8006f76:	e012      	b.n	8006f9e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	3308      	adds	r3, #8
 8006f82:	2201      	movs	r2, #1
 8006f84:	4619      	mov	r1, r3
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f000 f927 	bl	80071da <USBD_CtlSendData>
        break;
 8006f8c:	e00c      	b.n	8006fa8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	3304      	adds	r3, #4
 8006f92:	2201      	movs	r2, #1
 8006f94:	4619      	mov	r1, r3
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f000 f91f 	bl	80071da <USBD_CtlSendData>
        break;
 8006f9c:	e004      	b.n	8006fa8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006f9e:	6839      	ldr	r1, [r7, #0]
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f000 f8a9 	bl	80070f8 <USBD_CtlError>
        break;
 8006fa6:	bf00      	nop
}
 8006fa8:	bf00      	nop
 8006faa:	3708      	adds	r7, #8
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}

08006fb0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b082      	sub	sp, #8
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
 8006fb8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fc0:	b2db      	uxtb	r3, r3
 8006fc2:	3b01      	subs	r3, #1
 8006fc4:	2b02      	cmp	r3, #2
 8006fc6:	d81e      	bhi.n	8007006 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	88db      	ldrh	r3, [r3, #6]
 8006fcc:	2b02      	cmp	r3, #2
 8006fce:	d004      	beq.n	8006fda <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006fd0:	6839      	ldr	r1, [r7, #0]
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f000 f890 	bl	80070f8 <USBD_CtlError>
        break;
 8006fd8:	e01a      	b.n	8007010 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2201      	movs	r2, #1
 8006fde:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d005      	beq.n	8006ff6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	68db      	ldr	r3, [r3, #12]
 8006fee:	f043 0202 	orr.w	r2, r3, #2
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	330c      	adds	r3, #12
 8006ffa:	2202      	movs	r2, #2
 8006ffc:	4619      	mov	r1, r3
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f000 f8eb 	bl	80071da <USBD_CtlSendData>
      break;
 8007004:	e004      	b.n	8007010 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007006:	6839      	ldr	r1, [r7, #0]
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f000 f875 	bl	80070f8 <USBD_CtlError>
      break;
 800700e:	bf00      	nop
  }
}
 8007010:	bf00      	nop
 8007012:	3708      	adds	r7, #8
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}

08007018 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b082      	sub	sp, #8
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
 8007020:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	885b      	ldrh	r3, [r3, #2]
 8007026:	2b01      	cmp	r3, #1
 8007028:	d106      	bne.n	8007038 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2201      	movs	r2, #1
 800702e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f000 f92b 	bl	800728e <USBD_CtlSendStatus>
  }
}
 8007038:	bf00      	nop
 800703a:	3708      	adds	r7, #8
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}

08007040 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b082      	sub	sp, #8
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
 8007048:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007050:	b2db      	uxtb	r3, r3
 8007052:	3b01      	subs	r3, #1
 8007054:	2b02      	cmp	r3, #2
 8007056:	d80b      	bhi.n	8007070 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	885b      	ldrh	r3, [r3, #2]
 800705c:	2b01      	cmp	r3, #1
 800705e:	d10c      	bne.n	800707a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2200      	movs	r2, #0
 8007064:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f000 f910 	bl	800728e <USBD_CtlSendStatus>
      }
      break;
 800706e:	e004      	b.n	800707a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007070:	6839      	ldr	r1, [r7, #0]
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f000 f840 	bl	80070f8 <USBD_CtlError>
      break;
 8007078:	e000      	b.n	800707c <USBD_ClrFeature+0x3c>
      break;
 800707a:	bf00      	nop
  }
}
 800707c:	bf00      	nop
 800707e:	3708      	adds	r7, #8
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}

08007084 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b084      	sub	sp, #16
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
 800708c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	781a      	ldrb	r2, [r3, #0]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	3301      	adds	r3, #1
 800709e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	781a      	ldrb	r2, [r3, #0]
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	3301      	adds	r3, #1
 80070ac:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80070ae:	68f8      	ldr	r0, [r7, #12]
 80070b0:	f7ff fabc 	bl	800662c <SWAPBYTE>
 80070b4:	4603      	mov	r3, r0
 80070b6:	461a      	mov	r2, r3
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	3301      	adds	r3, #1
 80070c0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	3301      	adds	r3, #1
 80070c6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80070c8:	68f8      	ldr	r0, [r7, #12]
 80070ca:	f7ff faaf 	bl	800662c <SWAPBYTE>
 80070ce:	4603      	mov	r3, r0
 80070d0:	461a      	mov	r2, r3
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	3301      	adds	r3, #1
 80070da:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	3301      	adds	r3, #1
 80070e0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80070e2:	68f8      	ldr	r0, [r7, #12]
 80070e4:	f7ff faa2 	bl	800662c <SWAPBYTE>
 80070e8:	4603      	mov	r3, r0
 80070ea:	461a      	mov	r2, r3
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	80da      	strh	r2, [r3, #6]
}
 80070f0:	bf00      	nop
 80070f2:	3710      	adds	r7, #16
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}

080070f8 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b082      	sub	sp, #8
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007102:	2180      	movs	r1, #128	; 0x80
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f000 fc94 	bl	8007a32 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800710a:	2100      	movs	r1, #0
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	f000 fc90 	bl	8007a32 <USBD_LL_StallEP>
}
 8007112:	bf00      	nop
 8007114:	3708      	adds	r7, #8
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}

0800711a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800711a:	b580      	push	{r7, lr}
 800711c:	b086      	sub	sp, #24
 800711e:	af00      	add	r7, sp, #0
 8007120:	60f8      	str	r0, [r7, #12]
 8007122:	60b9      	str	r1, [r7, #8]
 8007124:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007126:	2300      	movs	r3, #0
 8007128:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d036      	beq.n	800719e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007134:	6938      	ldr	r0, [r7, #16]
 8007136:	f000 f836 	bl	80071a6 <USBD_GetLen>
 800713a:	4603      	mov	r3, r0
 800713c:	3301      	adds	r3, #1
 800713e:	b29b      	uxth	r3, r3
 8007140:	005b      	lsls	r3, r3, #1
 8007142:	b29a      	uxth	r2, r3
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007148:	7dfb      	ldrb	r3, [r7, #23]
 800714a:	68ba      	ldr	r2, [r7, #8]
 800714c:	4413      	add	r3, r2
 800714e:	687a      	ldr	r2, [r7, #4]
 8007150:	7812      	ldrb	r2, [r2, #0]
 8007152:	701a      	strb	r2, [r3, #0]
  idx++;
 8007154:	7dfb      	ldrb	r3, [r7, #23]
 8007156:	3301      	adds	r3, #1
 8007158:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800715a:	7dfb      	ldrb	r3, [r7, #23]
 800715c:	68ba      	ldr	r2, [r7, #8]
 800715e:	4413      	add	r3, r2
 8007160:	2203      	movs	r2, #3
 8007162:	701a      	strb	r2, [r3, #0]
  idx++;
 8007164:	7dfb      	ldrb	r3, [r7, #23]
 8007166:	3301      	adds	r3, #1
 8007168:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800716a:	e013      	b.n	8007194 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800716c:	7dfb      	ldrb	r3, [r7, #23]
 800716e:	68ba      	ldr	r2, [r7, #8]
 8007170:	4413      	add	r3, r2
 8007172:	693a      	ldr	r2, [r7, #16]
 8007174:	7812      	ldrb	r2, [r2, #0]
 8007176:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	3301      	adds	r3, #1
 800717c:	613b      	str	r3, [r7, #16]
    idx++;
 800717e:	7dfb      	ldrb	r3, [r7, #23]
 8007180:	3301      	adds	r3, #1
 8007182:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007184:	7dfb      	ldrb	r3, [r7, #23]
 8007186:	68ba      	ldr	r2, [r7, #8]
 8007188:	4413      	add	r3, r2
 800718a:	2200      	movs	r2, #0
 800718c:	701a      	strb	r2, [r3, #0]
    idx++;
 800718e:	7dfb      	ldrb	r3, [r7, #23]
 8007190:	3301      	adds	r3, #1
 8007192:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007194:	693b      	ldr	r3, [r7, #16]
 8007196:	781b      	ldrb	r3, [r3, #0]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d1e7      	bne.n	800716c <USBD_GetString+0x52>
 800719c:	e000      	b.n	80071a0 <USBD_GetString+0x86>
    return;
 800719e:	bf00      	nop
  }
}
 80071a0:	3718      	adds	r7, #24
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}

080071a6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80071a6:	b480      	push	{r7}
 80071a8:	b085      	sub	sp, #20
 80071aa:	af00      	add	r7, sp, #0
 80071ac:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80071ae:	2300      	movs	r3, #0
 80071b0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80071b6:	e005      	b.n	80071c4 <USBD_GetLen+0x1e>
  {
    len++;
 80071b8:	7bfb      	ldrb	r3, [r7, #15]
 80071ba:	3301      	adds	r3, #1
 80071bc:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	3301      	adds	r3, #1
 80071c2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	781b      	ldrb	r3, [r3, #0]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d1f5      	bne.n	80071b8 <USBD_GetLen+0x12>
  }

  return len;
 80071cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	3714      	adds	r7, #20
 80071d2:	46bd      	mov	sp, r7
 80071d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d8:	4770      	bx	lr

080071da <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80071da:	b580      	push	{r7, lr}
 80071dc:	b084      	sub	sp, #16
 80071de:	af00      	add	r7, sp, #0
 80071e0:	60f8      	str	r0, [r7, #12]
 80071e2:	60b9      	str	r1, [r7, #8]
 80071e4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2202      	movs	r2, #2
 80071ea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	687a      	ldr	r2, [r7, #4]
 80071f2:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	687a      	ldr	r2, [r7, #4]
 80071f8:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	68ba      	ldr	r2, [r7, #8]
 80071fe:	2100      	movs	r1, #0
 8007200:	68f8      	ldr	r0, [r7, #12]
 8007202:	f000 fc9f 	bl	8007b44 <USBD_LL_Transmit>

  return USBD_OK;
 8007206:	2300      	movs	r3, #0
}
 8007208:	4618      	mov	r0, r3
 800720a:	3710      	adds	r7, #16
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}

08007210 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b084      	sub	sp, #16
 8007214:	af00      	add	r7, sp, #0
 8007216:	60f8      	str	r0, [r7, #12]
 8007218:	60b9      	str	r1, [r7, #8]
 800721a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	68ba      	ldr	r2, [r7, #8]
 8007220:	2100      	movs	r1, #0
 8007222:	68f8      	ldr	r0, [r7, #12]
 8007224:	f000 fc8e 	bl	8007b44 <USBD_LL_Transmit>

  return USBD_OK;
 8007228:	2300      	movs	r3, #0
}
 800722a:	4618      	mov	r0, r3
 800722c:	3710      	adds	r7, #16
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}

08007232 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007232:	b580      	push	{r7, lr}
 8007234:	b084      	sub	sp, #16
 8007236:	af00      	add	r7, sp, #0
 8007238:	60f8      	str	r0, [r7, #12]
 800723a:	60b9      	str	r1, [r7, #8]
 800723c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	2203      	movs	r2, #3
 8007242:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	687a      	ldr	r2, [r7, #4]
 800724a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	687a      	ldr	r2, [r7, #4]
 8007252:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	68ba      	ldr	r2, [r7, #8]
 800725a:	2100      	movs	r1, #0
 800725c:	68f8      	ldr	r0, [r7, #12]
 800725e:	f000 fc92 	bl	8007b86 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007262:	2300      	movs	r3, #0
}
 8007264:	4618      	mov	r0, r3
 8007266:	3710      	adds	r7, #16
 8007268:	46bd      	mov	sp, r7
 800726a:	bd80      	pop	{r7, pc}

0800726c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b084      	sub	sp, #16
 8007270:	af00      	add	r7, sp, #0
 8007272:	60f8      	str	r0, [r7, #12]
 8007274:	60b9      	str	r1, [r7, #8]
 8007276:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	68ba      	ldr	r2, [r7, #8]
 800727c:	2100      	movs	r1, #0
 800727e:	68f8      	ldr	r0, [r7, #12]
 8007280:	f000 fc81 	bl	8007b86 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007284:	2300      	movs	r3, #0
}
 8007286:	4618      	mov	r0, r3
 8007288:	3710      	adds	r7, #16
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}

0800728e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800728e:	b580      	push	{r7, lr}
 8007290:	b082      	sub	sp, #8
 8007292:	af00      	add	r7, sp, #0
 8007294:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2204      	movs	r2, #4
 800729a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800729e:	2300      	movs	r3, #0
 80072a0:	2200      	movs	r2, #0
 80072a2:	2100      	movs	r1, #0
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f000 fc4d 	bl	8007b44 <USBD_LL_Transmit>

  return USBD_OK;
 80072aa:	2300      	movs	r3, #0
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	3708      	adds	r7, #8
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}

080072b4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b082      	sub	sp, #8
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2205      	movs	r2, #5
 80072c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80072c4:	2300      	movs	r3, #0
 80072c6:	2200      	movs	r2, #0
 80072c8:	2100      	movs	r1, #0
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f000 fc5b 	bl	8007b86 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80072d0:	2300      	movs	r3, #0
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	3708      	adds	r7, #8
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}
	...

080072dc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80072e0:	2200      	movs	r2, #0
 80072e2:	4912      	ldr	r1, [pc, #72]	; (800732c <MX_USB_DEVICE_Init+0x50>)
 80072e4:	4812      	ldr	r0, [pc, #72]	; (8007330 <MX_USB_DEVICE_Init+0x54>)
 80072e6:	f7fe fe90 	bl	800600a <USBD_Init>
 80072ea:	4603      	mov	r3, r0
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d001      	beq.n	80072f4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80072f0:	f7f9 f9f2 	bl	80006d8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_AUDIO) != USBD_OK)
 80072f4:	490f      	ldr	r1, [pc, #60]	; (8007334 <MX_USB_DEVICE_Init+0x58>)
 80072f6:	480e      	ldr	r0, [pc, #56]	; (8007330 <MX_USB_DEVICE_Init+0x54>)
 80072f8:	f7fe feb7 	bl	800606a <USBD_RegisterClass>
 80072fc:	4603      	mov	r3, r0
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d001      	beq.n	8007306 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007302:	f7f9 f9e9 	bl	80006d8 <Error_Handler>
  }
  if (USBD_AUDIO_RegisterInterface(&hUsbDeviceFS, &USBD_AUDIO_fops_FS) != USBD_OK)
 8007306:	490c      	ldr	r1, [pc, #48]	; (8007338 <MX_USB_DEVICE_Init+0x5c>)
 8007308:	4809      	ldr	r0, [pc, #36]	; (8007330 <MX_USB_DEVICE_Init+0x54>)
 800730a:	f7fe fe69 	bl	8005fe0 <USBD_AUDIO_RegisterInterface>
 800730e:	4603      	mov	r3, r0
 8007310:	2b00      	cmp	r3, #0
 8007312:	d001      	beq.n	8007318 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007314:	f7f9 f9e0 	bl	80006d8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007318:	4805      	ldr	r0, [pc, #20]	; (8007330 <MX_USB_DEVICE_Init+0x54>)
 800731a:	f7fe fecd 	bl	80060b8 <USBD_Start>
 800731e:	4603      	mov	r3, r0
 8007320:	2b00      	cmp	r3, #0
 8007322:	d001      	beq.n	8007328 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007324:	f7f9 f9d8 	bl	80006d8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007328:	bf00      	nop
 800732a:	bd80      	pop	{r7, pc}
 800732c:	200000f8 	.word	0x200000f8
 8007330:	20000624 	.word	0x20000624
 8007334:	2000000c 	.word	0x2000000c
 8007338:	200000dc 	.word	0x200000dc

0800733c <AUDIO_Init_FS>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  options: Reserved for future use
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_Init_FS(uint32_t AudioFreq, uint32_t Volume, uint32_t options)
{
 800733c:	b480      	push	{r7}
 800733e:	b085      	sub	sp, #20
 8007340:	af00      	add	r7, sp, #0
 8007342:	60f8      	str	r0, [r7, #12]
 8007344:	60b9      	str	r1, [r7, #8]
 8007346:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 0 */
  UNUSED(AudioFreq);
  UNUSED(Volume);
  UNUSED(options);
  return (USBD_OK);
 8007348:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 800734a:	4618      	mov	r0, r3
 800734c:	3714      	adds	r7, #20
 800734e:	46bd      	mov	sp, r7
 8007350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007354:	4770      	bx	lr

08007356 <AUDIO_DeInit_FS>:
  * @brief  De-Initializes the AUDIO media low layer
  * @param  options: Reserved for future use
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_DeInit_FS(uint32_t options)
{
 8007356:	b480      	push	{r7}
 8007358:	b083      	sub	sp, #12
 800735a:	af00      	add	r7, sp, #0
 800735c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 1 */
  UNUSED(options);
  return (USBD_OK);
 800735e:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 8007360:	4618      	mov	r0, r3
 8007362:	370c      	adds	r7, #12
 8007364:	46bd      	mov	sp, r7
 8007366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736a:	4770      	bx	lr

0800736c <AUDIO_AudioCmd_FS>:
  * @param  size: Number of data to be sent (in bytes)
  * @param  cmd: Command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_AudioCmd_FS(uint8_t* pbuf, uint32_t size, uint8_t cmd)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b084      	sub	sp, #16
 8007370:	af00      	add	r7, sp, #0
 8007372:	60f8      	str	r0, [r7, #12]
 8007374:	60b9      	str	r1, [r7, #8]
 8007376:	4613      	mov	r3, r2
 8007378:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  switch(cmd)
 800737a:	79fb      	ldrb	r3, [r7, #7]
 800737c:	2b01      	cmp	r3, #1
 800737e:	d001      	beq.n	8007384 <AUDIO_AudioCmd_FS+0x18>
 8007380:	2b02      	cmp	r3, #2
    case AUDIO_CMD_START:
    	HAL_I2S_Transmit_DMA(&hi2s2, pbuf, size);
    break;

    case AUDIO_CMD_PLAY:
    break;
 8007382:	e007      	b.n	8007394 <AUDIO_AudioCmd_FS+0x28>
    	HAL_I2S_Transmit_DMA(&hi2s2, pbuf, size);
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	b29b      	uxth	r3, r3
 8007388:	461a      	mov	r2, r3
 800738a:	68f9      	ldr	r1, [r7, #12]
 800738c:	4804      	ldr	r0, [pc, #16]	; (80073a0 <AUDIO_AudioCmd_FS+0x34>)
 800738e:	f7fa fac5 	bl	800191c <HAL_I2S_Transmit_DMA>
    break;
 8007392:	bf00      	nop
  }
  UNUSED(pbuf);
  UNUSED(size);
  UNUSED(cmd);
  return (USBD_OK);
 8007394:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8007396:	4618      	mov	r0, r3
 8007398:	3710      	adds	r7, #16
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}
 800739e:	bf00      	nop
 80073a0:	20000164 	.word	0x20000164

080073a4 <AUDIO_VolumeCtl_FS>:
  * @brief  Controls AUDIO Volume.
  * @param  vol: volume level (0..100)
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_VolumeCtl_FS(uint8_t vol)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b083      	sub	sp, #12
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	4603      	mov	r3, r0
 80073ac:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 3 */
  UNUSED(vol);
  return (USBD_OK);
 80073ae:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	370c      	adds	r7, #12
 80073b4:	46bd      	mov	sp, r7
 80073b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ba:	4770      	bx	lr

080073bc <AUDIO_MuteCtl_FS>:
  * @brief  Controls AUDIO Mute.
  * @param  cmd: command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_MuteCtl_FS(uint8_t cmd)
{
 80073bc:	b480      	push	{r7}
 80073be:	b083      	sub	sp, #12
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	4603      	mov	r3, r0
 80073c4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  UNUSED(cmd);
  return (USBD_OK);
 80073c6:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	370c      	adds	r7, #12
 80073cc:	46bd      	mov	sp, r7
 80073ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d2:	4770      	bx	lr

080073d4 <AUDIO_PeriodicTC_FS>:
  * @brief  AUDIO_PeriodicT_FS
  * @param  cmd: Command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_PeriodicTC_FS(uint8_t *pbuf, uint32_t size, uint8_t cmd)
{
 80073d4:	b480      	push	{r7}
 80073d6:	b085      	sub	sp, #20
 80073d8:	af00      	add	r7, sp, #0
 80073da:	60f8      	str	r0, [r7, #12]
 80073dc:	60b9      	str	r1, [r7, #8]
 80073de:	4613      	mov	r3, r2
 80073e0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  UNUSED(pbuf);
  UNUSED(size);
  UNUSED(cmd);
  return (USBD_OK);
 80073e2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	3714      	adds	r7, #20
 80073e8:	46bd      	mov	sp, r7
 80073ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ee:	4770      	bx	lr

080073f0 <AUDIO_GetState_FS>:
/**
  * @brief  Gets AUDIO State.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_GetState_FS(void)
{
 80073f0:	b480      	push	{r7}
 80073f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 80073f4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	46bd      	mov	sp, r7
 80073fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fe:	4770      	bx	lr

08007400 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007400:	b480      	push	{r7}
 8007402:	b083      	sub	sp, #12
 8007404:	af00      	add	r7, sp, #0
 8007406:	4603      	mov	r3, r0
 8007408:	6039      	str	r1, [r7, #0]
 800740a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	2212      	movs	r2, #18
 8007410:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007412:	4b03      	ldr	r3, [pc, #12]	; (8007420 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007414:	4618      	mov	r0, r3
 8007416:	370c      	adds	r7, #12
 8007418:	46bd      	mov	sp, r7
 800741a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741e:	4770      	bx	lr
 8007420:	20000114 	.word	0x20000114

08007424 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007424:	b480      	push	{r7}
 8007426:	b083      	sub	sp, #12
 8007428:	af00      	add	r7, sp, #0
 800742a:	4603      	mov	r3, r0
 800742c:	6039      	str	r1, [r7, #0]
 800742e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	2204      	movs	r2, #4
 8007434:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007436:	4b03      	ldr	r3, [pc, #12]	; (8007444 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007438:	4618      	mov	r0, r3
 800743a:	370c      	adds	r7, #12
 800743c:	46bd      	mov	sp, r7
 800743e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007442:	4770      	bx	lr
 8007444:	20000128 	.word	0x20000128

08007448 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b082      	sub	sp, #8
 800744c:	af00      	add	r7, sp, #0
 800744e:	4603      	mov	r3, r0
 8007450:	6039      	str	r1, [r7, #0]
 8007452:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007454:	79fb      	ldrb	r3, [r7, #7]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d105      	bne.n	8007466 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800745a:	683a      	ldr	r2, [r7, #0]
 800745c:	4907      	ldr	r1, [pc, #28]	; (800747c <USBD_FS_ProductStrDescriptor+0x34>)
 800745e:	4808      	ldr	r0, [pc, #32]	; (8007480 <USBD_FS_ProductStrDescriptor+0x38>)
 8007460:	f7ff fe5b 	bl	800711a <USBD_GetString>
 8007464:	e004      	b.n	8007470 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007466:	683a      	ldr	r2, [r7, #0]
 8007468:	4904      	ldr	r1, [pc, #16]	; (800747c <USBD_FS_ProductStrDescriptor+0x34>)
 800746a:	4805      	ldr	r0, [pc, #20]	; (8007480 <USBD_FS_ProductStrDescriptor+0x38>)
 800746c:	f7ff fe55 	bl	800711a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007470:	4b02      	ldr	r3, [pc, #8]	; (800747c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007472:	4618      	mov	r0, r3
 8007474:	3708      	adds	r7, #8
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}
 800747a:	bf00      	nop
 800747c:	200008f4 	.word	0x200008f4
 8007480:	08007ce8 	.word	0x08007ce8

08007484 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b082      	sub	sp, #8
 8007488:	af00      	add	r7, sp, #0
 800748a:	4603      	mov	r3, r0
 800748c:	6039      	str	r1, [r7, #0]
 800748e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007490:	683a      	ldr	r2, [r7, #0]
 8007492:	4904      	ldr	r1, [pc, #16]	; (80074a4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007494:	4804      	ldr	r0, [pc, #16]	; (80074a8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007496:	f7ff fe40 	bl	800711a <USBD_GetString>
  return USBD_StrDesc;
 800749a:	4b02      	ldr	r3, [pc, #8]	; (80074a4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800749c:	4618      	mov	r0, r3
 800749e:	3708      	adds	r7, #8
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}
 80074a4:	200008f4 	.word	0x200008f4
 80074a8:	08007cfc 	.word	0x08007cfc

080074ac <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b082      	sub	sp, #8
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	4603      	mov	r3, r0
 80074b4:	6039      	str	r1, [r7, #0]
 80074b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	221a      	movs	r2, #26
 80074bc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80074be:	f000 f843 	bl	8007548 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80074c2:	4b02      	ldr	r3, [pc, #8]	; (80074cc <USBD_FS_SerialStrDescriptor+0x20>)
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	3708      	adds	r7, #8
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}
 80074cc:	2000012c 	.word	0x2000012c

080074d0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b082      	sub	sp, #8
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	4603      	mov	r3, r0
 80074d8:	6039      	str	r1, [r7, #0]
 80074da:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80074dc:	79fb      	ldrb	r3, [r7, #7]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d105      	bne.n	80074ee <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80074e2:	683a      	ldr	r2, [r7, #0]
 80074e4:	4907      	ldr	r1, [pc, #28]	; (8007504 <USBD_FS_ConfigStrDescriptor+0x34>)
 80074e6:	4808      	ldr	r0, [pc, #32]	; (8007508 <USBD_FS_ConfigStrDescriptor+0x38>)
 80074e8:	f7ff fe17 	bl	800711a <USBD_GetString>
 80074ec:	e004      	b.n	80074f8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80074ee:	683a      	ldr	r2, [r7, #0]
 80074f0:	4904      	ldr	r1, [pc, #16]	; (8007504 <USBD_FS_ConfigStrDescriptor+0x34>)
 80074f2:	4805      	ldr	r0, [pc, #20]	; (8007508 <USBD_FS_ConfigStrDescriptor+0x38>)
 80074f4:	f7ff fe11 	bl	800711a <USBD_GetString>
  }
  return USBD_StrDesc;
 80074f8:	4b02      	ldr	r3, [pc, #8]	; (8007504 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	3708      	adds	r7, #8
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}
 8007502:	bf00      	nop
 8007504:	200008f4 	.word	0x200008f4
 8007508:	08007d10 	.word	0x08007d10

0800750c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b082      	sub	sp, #8
 8007510:	af00      	add	r7, sp, #0
 8007512:	4603      	mov	r3, r0
 8007514:	6039      	str	r1, [r7, #0]
 8007516:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007518:	79fb      	ldrb	r3, [r7, #7]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d105      	bne.n	800752a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800751e:	683a      	ldr	r2, [r7, #0]
 8007520:	4907      	ldr	r1, [pc, #28]	; (8007540 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007522:	4808      	ldr	r0, [pc, #32]	; (8007544 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007524:	f7ff fdf9 	bl	800711a <USBD_GetString>
 8007528:	e004      	b.n	8007534 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800752a:	683a      	ldr	r2, [r7, #0]
 800752c:	4904      	ldr	r1, [pc, #16]	; (8007540 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800752e:	4805      	ldr	r0, [pc, #20]	; (8007544 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007530:	f7ff fdf3 	bl	800711a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007534:	4b02      	ldr	r3, [pc, #8]	; (8007540 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007536:	4618      	mov	r0, r3
 8007538:	3708      	adds	r7, #8
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}
 800753e:	bf00      	nop
 8007540:	200008f4 	.word	0x200008f4
 8007544:	08007d20 	.word	0x08007d20

08007548 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b084      	sub	sp, #16
 800754c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800754e:	4b0f      	ldr	r3, [pc, #60]	; (800758c <Get_SerialNum+0x44>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007554:	4b0e      	ldr	r3, [pc, #56]	; (8007590 <Get_SerialNum+0x48>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800755a:	4b0e      	ldr	r3, [pc, #56]	; (8007594 <Get_SerialNum+0x4c>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007560:	68fa      	ldr	r2, [r7, #12]
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	4413      	add	r3, r2
 8007566:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d009      	beq.n	8007582 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800756e:	2208      	movs	r2, #8
 8007570:	4909      	ldr	r1, [pc, #36]	; (8007598 <Get_SerialNum+0x50>)
 8007572:	68f8      	ldr	r0, [r7, #12]
 8007574:	f000 f814 	bl	80075a0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007578:	2204      	movs	r2, #4
 800757a:	4908      	ldr	r1, [pc, #32]	; (800759c <Get_SerialNum+0x54>)
 800757c:	68b8      	ldr	r0, [r7, #8]
 800757e:	f000 f80f 	bl	80075a0 <IntToUnicode>
  }
}
 8007582:	bf00      	nop
 8007584:	3710      	adds	r7, #16
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}
 800758a:	bf00      	nop
 800758c:	1fff7a10 	.word	0x1fff7a10
 8007590:	1fff7a14 	.word	0x1fff7a14
 8007594:	1fff7a18 	.word	0x1fff7a18
 8007598:	2000012e 	.word	0x2000012e
 800759c:	2000013e 	.word	0x2000013e

080075a0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80075a0:	b480      	push	{r7}
 80075a2:	b087      	sub	sp, #28
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	60f8      	str	r0, [r7, #12]
 80075a8:	60b9      	str	r1, [r7, #8]
 80075aa:	4613      	mov	r3, r2
 80075ac:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80075ae:	2300      	movs	r3, #0
 80075b0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80075b2:	2300      	movs	r3, #0
 80075b4:	75fb      	strb	r3, [r7, #23]
 80075b6:	e027      	b.n	8007608 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	0f1b      	lsrs	r3, r3, #28
 80075bc:	2b09      	cmp	r3, #9
 80075be:	d80b      	bhi.n	80075d8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	0f1b      	lsrs	r3, r3, #28
 80075c4:	b2da      	uxtb	r2, r3
 80075c6:	7dfb      	ldrb	r3, [r7, #23]
 80075c8:	005b      	lsls	r3, r3, #1
 80075ca:	4619      	mov	r1, r3
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	440b      	add	r3, r1
 80075d0:	3230      	adds	r2, #48	; 0x30
 80075d2:	b2d2      	uxtb	r2, r2
 80075d4:	701a      	strb	r2, [r3, #0]
 80075d6:	e00a      	b.n	80075ee <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	0f1b      	lsrs	r3, r3, #28
 80075dc:	b2da      	uxtb	r2, r3
 80075de:	7dfb      	ldrb	r3, [r7, #23]
 80075e0:	005b      	lsls	r3, r3, #1
 80075e2:	4619      	mov	r1, r3
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	440b      	add	r3, r1
 80075e8:	3237      	adds	r2, #55	; 0x37
 80075ea:	b2d2      	uxtb	r2, r2
 80075ec:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	011b      	lsls	r3, r3, #4
 80075f2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80075f4:	7dfb      	ldrb	r3, [r7, #23]
 80075f6:	005b      	lsls	r3, r3, #1
 80075f8:	3301      	adds	r3, #1
 80075fa:	68ba      	ldr	r2, [r7, #8]
 80075fc:	4413      	add	r3, r2
 80075fe:	2200      	movs	r2, #0
 8007600:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007602:	7dfb      	ldrb	r3, [r7, #23]
 8007604:	3301      	adds	r3, #1
 8007606:	75fb      	strb	r3, [r7, #23]
 8007608:	7dfa      	ldrb	r2, [r7, #23]
 800760a:	79fb      	ldrb	r3, [r7, #7]
 800760c:	429a      	cmp	r2, r3
 800760e:	d3d3      	bcc.n	80075b8 <IntToUnicode+0x18>
  }
}
 8007610:	bf00      	nop
 8007612:	bf00      	nop
 8007614:	371c      	adds	r7, #28
 8007616:	46bd      	mov	sp, r7
 8007618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761c:	4770      	bx	lr
	...

08007620 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b08a      	sub	sp, #40	; 0x28
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007628:	f107 0314 	add.w	r3, r7, #20
 800762c:	2200      	movs	r2, #0
 800762e:	601a      	str	r2, [r3, #0]
 8007630:	605a      	str	r2, [r3, #4]
 8007632:	609a      	str	r2, [r3, #8]
 8007634:	60da      	str	r2, [r3, #12]
 8007636:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007640:	d13a      	bne.n	80076b8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007642:	2300      	movs	r3, #0
 8007644:	613b      	str	r3, [r7, #16]
 8007646:	4b1e      	ldr	r3, [pc, #120]	; (80076c0 <HAL_PCD_MspInit+0xa0>)
 8007648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800764a:	4a1d      	ldr	r2, [pc, #116]	; (80076c0 <HAL_PCD_MspInit+0xa0>)
 800764c:	f043 0301 	orr.w	r3, r3, #1
 8007650:	6313      	str	r3, [r2, #48]	; 0x30
 8007652:	4b1b      	ldr	r3, [pc, #108]	; (80076c0 <HAL_PCD_MspInit+0xa0>)
 8007654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007656:	f003 0301 	and.w	r3, r3, #1
 800765a:	613b      	str	r3, [r7, #16]
 800765c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_8;
 800765e:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8007662:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007664:	2302      	movs	r3, #2
 8007666:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007668:	2300      	movs	r3, #0
 800766a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800766c:	2303      	movs	r3, #3
 800766e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007670:	230a      	movs	r3, #10
 8007672:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007674:	f107 0314 	add.w	r3, r7, #20
 8007678:	4619      	mov	r1, r3
 800767a:	4812      	ldr	r0, [pc, #72]	; (80076c4 <HAL_PCD_MspInit+0xa4>)
 800767c:	f7f9 fe8a 	bl	8001394 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007680:	4b0f      	ldr	r3, [pc, #60]	; (80076c0 <HAL_PCD_MspInit+0xa0>)
 8007682:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007684:	4a0e      	ldr	r2, [pc, #56]	; (80076c0 <HAL_PCD_MspInit+0xa0>)
 8007686:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800768a:	6353      	str	r3, [r2, #52]	; 0x34
 800768c:	2300      	movs	r3, #0
 800768e:	60fb      	str	r3, [r7, #12]
 8007690:	4b0b      	ldr	r3, [pc, #44]	; (80076c0 <HAL_PCD_MspInit+0xa0>)
 8007692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007694:	4a0a      	ldr	r2, [pc, #40]	; (80076c0 <HAL_PCD_MspInit+0xa0>)
 8007696:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800769a:	6453      	str	r3, [r2, #68]	; 0x44
 800769c:	4b08      	ldr	r3, [pc, #32]	; (80076c0 <HAL_PCD_MspInit+0xa0>)
 800769e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80076a4:	60fb      	str	r3, [r7, #12]
 80076a6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80076a8:	2200      	movs	r2, #0
 80076aa:	2100      	movs	r1, #0
 80076ac:	2043      	movs	r0, #67	; 0x43
 80076ae:	f7f9 faca 	bl	8000c46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80076b2:	2043      	movs	r0, #67	; 0x43
 80076b4:	f7f9 fae3 	bl	8000c7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80076b8:	bf00      	nop
 80076ba:	3728      	adds	r7, #40	; 0x28
 80076bc:	46bd      	mov	sp, r7
 80076be:	bd80      	pop	{r7, pc}
 80076c0:	40023800 	.word	0x40023800
 80076c4:	40020000 	.word	0x40020000

080076c8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b082      	sub	sp, #8
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80076dc:	4619      	mov	r1, r3
 80076de:	4610      	mov	r0, r2
 80076e0:	f7fe fd35 	bl	800614e <USBD_LL_SetupStage>
}
 80076e4:	bf00      	nop
 80076e6:	3708      	adds	r7, #8
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bd80      	pop	{r7, pc}

080076ec <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b082      	sub	sp, #8
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
 80076f4:	460b      	mov	r3, r1
 80076f6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80076fe:	78fa      	ldrb	r2, [r7, #3]
 8007700:	6879      	ldr	r1, [r7, #4]
 8007702:	4613      	mov	r3, r2
 8007704:	00db      	lsls	r3, r3, #3
 8007706:	1a9b      	subs	r3, r3, r2
 8007708:	009b      	lsls	r3, r3, #2
 800770a:	440b      	add	r3, r1
 800770c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007710:	681a      	ldr	r2, [r3, #0]
 8007712:	78fb      	ldrb	r3, [r7, #3]
 8007714:	4619      	mov	r1, r3
 8007716:	f7fe fd6f 	bl	80061f8 <USBD_LL_DataOutStage>
}
 800771a:	bf00      	nop
 800771c:	3708      	adds	r7, #8
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}

08007722 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007722:	b580      	push	{r7, lr}
 8007724:	b082      	sub	sp, #8
 8007726:	af00      	add	r7, sp, #0
 8007728:	6078      	str	r0, [r7, #4]
 800772a:	460b      	mov	r3, r1
 800772c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007734:	78fa      	ldrb	r2, [r7, #3]
 8007736:	6879      	ldr	r1, [r7, #4]
 8007738:	4613      	mov	r3, r2
 800773a:	00db      	lsls	r3, r3, #3
 800773c:	1a9b      	subs	r3, r3, r2
 800773e:	009b      	lsls	r3, r3, #2
 8007740:	440b      	add	r3, r1
 8007742:	3348      	adds	r3, #72	; 0x48
 8007744:	681a      	ldr	r2, [r3, #0]
 8007746:	78fb      	ldrb	r3, [r7, #3]
 8007748:	4619      	mov	r1, r3
 800774a:	f7fe fdb8 	bl	80062be <USBD_LL_DataInStage>
}
 800774e:	bf00      	nop
 8007750:	3708      	adds	r7, #8
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}

08007756 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007756:	b580      	push	{r7, lr}
 8007758:	b082      	sub	sp, #8
 800775a:	af00      	add	r7, sp, #0
 800775c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007764:	4618      	mov	r0, r3
 8007766:	f7fe fecc 	bl	8006502 <USBD_LL_SOF>
}
 800776a:	bf00      	nop
 800776c:	3708      	adds	r7, #8
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}

08007772 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007772:	b580      	push	{r7, lr}
 8007774:	b084      	sub	sp, #16
 8007776:	af00      	add	r7, sp, #0
 8007778:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800777a:	2301      	movs	r3, #1
 800777c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	68db      	ldr	r3, [r3, #12]
 8007782:	2b02      	cmp	r3, #2
 8007784:	d001      	beq.n	800778a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007786:	f7f8 ffa7 	bl	80006d8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007790:	7bfa      	ldrb	r2, [r7, #15]
 8007792:	4611      	mov	r1, r2
 8007794:	4618      	mov	r0, r3
 8007796:	f7fe fe76 	bl	8006486 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80077a0:	4618      	mov	r0, r3
 80077a2:	f7fe fe22 	bl	80063ea <USBD_LL_Reset>
}
 80077a6:	bf00      	nop
 80077a8:	3710      	adds	r7, #16
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}
	...

080077b0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b082      	sub	sp, #8
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80077be:	4618      	mov	r0, r3
 80077c0:	f7fe fe71 	bl	80064a6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	687a      	ldr	r2, [r7, #4]
 80077d0:	6812      	ldr	r2, [r2, #0]
 80077d2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80077d6:	f043 0301 	orr.w	r3, r3, #1
 80077da:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6a1b      	ldr	r3, [r3, #32]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d005      	beq.n	80077f0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80077e4:	4b04      	ldr	r3, [pc, #16]	; (80077f8 <HAL_PCD_SuspendCallback+0x48>)
 80077e6:	691b      	ldr	r3, [r3, #16]
 80077e8:	4a03      	ldr	r2, [pc, #12]	; (80077f8 <HAL_PCD_SuspendCallback+0x48>)
 80077ea:	f043 0306 	orr.w	r3, r3, #6
 80077ee:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80077f0:	bf00      	nop
 80077f2:	3708      	adds	r7, #8
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd80      	pop	{r7, pc}
 80077f8:	e000ed00 	.word	0xe000ed00

080077fc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b082      	sub	sp, #8
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800780a:	4618      	mov	r0, r3
 800780c:	f7fe fe61 	bl	80064d2 <USBD_LL_Resume>
}
 8007810:	bf00      	nop
 8007812:	3708      	adds	r7, #8
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}

08007818 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b082      	sub	sp, #8
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
 8007820:	460b      	mov	r3, r1
 8007822:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800782a:	78fa      	ldrb	r2, [r7, #3]
 800782c:	4611      	mov	r1, r2
 800782e:	4618      	mov	r0, r3
 8007830:	f7fe feaf 	bl	8006592 <USBD_LL_IsoOUTIncomplete>
}
 8007834:	bf00      	nop
 8007836:	3708      	adds	r7, #8
 8007838:	46bd      	mov	sp, r7
 800783a:	bd80      	pop	{r7, pc}

0800783c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b082      	sub	sp, #8
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
 8007844:	460b      	mov	r3, r1
 8007846:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800784e:	78fa      	ldrb	r2, [r7, #3]
 8007850:	4611      	mov	r1, r2
 8007852:	4618      	mov	r0, r3
 8007854:	f7fe fe77 	bl	8006546 <USBD_LL_IsoINIncomplete>
}
 8007858:	bf00      	nop
 800785a:	3708      	adds	r7, #8
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}

08007860 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b082      	sub	sp, #8
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800786e:	4618      	mov	r0, r3
 8007870:	f7fe feb5 	bl	80065de <USBD_LL_DevConnected>
}
 8007874:	bf00      	nop
 8007876:	3708      	adds	r7, #8
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}

0800787c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b082      	sub	sp, #8
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800788a:	4618      	mov	r0, r3
 800788c:	f7fe feb2 	bl	80065f4 <USBD_LL_DevDisconnected>
}
 8007890:	bf00      	nop
 8007892:	3708      	adds	r7, #8
 8007894:	46bd      	mov	sp, r7
 8007896:	bd80      	pop	{r7, pc}

08007898 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b082      	sub	sp, #8
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	781b      	ldrb	r3, [r3, #0]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d13d      	bne.n	8007924 <USBD_LL_Init+0x8c>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80078a8:	4a21      	ldr	r2, [pc, #132]	; (8007930 <USBD_LL_Init+0x98>)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	4a1f      	ldr	r2, [pc, #124]	; (8007930 <USBD_LL_Init+0x98>)
 80078b4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80078b8:	4b1d      	ldr	r3, [pc, #116]	; (8007930 <USBD_LL_Init+0x98>)
 80078ba:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80078be:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80078c0:	4b1b      	ldr	r3, [pc, #108]	; (8007930 <USBD_LL_Init+0x98>)
 80078c2:	2204      	movs	r2, #4
 80078c4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80078c6:	4b1a      	ldr	r3, [pc, #104]	; (8007930 <USBD_LL_Init+0x98>)
 80078c8:	2202      	movs	r2, #2
 80078ca:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80078cc:	4b18      	ldr	r3, [pc, #96]	; (8007930 <USBD_LL_Init+0x98>)
 80078ce:	2200      	movs	r2, #0
 80078d0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80078d2:	4b17      	ldr	r3, [pc, #92]	; (8007930 <USBD_LL_Init+0x98>)
 80078d4:	2202      	movs	r2, #2
 80078d6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80078d8:	4b15      	ldr	r3, [pc, #84]	; (8007930 <USBD_LL_Init+0x98>)
 80078da:	2201      	movs	r2, #1
 80078dc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80078de:	4b14      	ldr	r3, [pc, #80]	; (8007930 <USBD_LL_Init+0x98>)
 80078e0:	2200      	movs	r2, #0
 80078e2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80078e4:	4b12      	ldr	r3, [pc, #72]	; (8007930 <USBD_LL_Init+0x98>)
 80078e6:	2200      	movs	r2, #0
 80078e8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80078ea:	4b11      	ldr	r3, [pc, #68]	; (8007930 <USBD_LL_Init+0x98>)
 80078ec:	2200      	movs	r2, #0
 80078ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80078f0:	4b0f      	ldr	r3, [pc, #60]	; (8007930 <USBD_LL_Init+0x98>)
 80078f2:	2200      	movs	r2, #0
 80078f4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80078f6:	480e      	ldr	r0, [pc, #56]	; (8007930 <USBD_LL_Init+0x98>)
 80078f8:	f7fa fc76 	bl	80021e8 <HAL_PCD_Init>
 80078fc:	4603      	mov	r3, r0
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d001      	beq.n	8007906 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007902:	f7f8 fee9 	bl	80006d8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x120);
 8007906:	f44f 7190 	mov.w	r1, #288	; 0x120
 800790a:	4809      	ldr	r0, [pc, #36]	; (8007930 <USBD_LL_Init+0x98>)
 800790c:	f7fb fdff 	bl	800350e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x10);
 8007910:	2210      	movs	r2, #16
 8007912:	2100      	movs	r1, #0
 8007914:	4806      	ldr	r0, [pc, #24]	; (8007930 <USBD_LL_Init+0x98>)
 8007916:	f7fb fdb3 	bl	8003480 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x10);
 800791a:	2210      	movs	r2, #16
 800791c:	2101      	movs	r1, #1
 800791e:	4804      	ldr	r0, [pc, #16]	; (8007930 <USBD_LL_Init+0x98>)
 8007920:	f7fb fdae 	bl	8003480 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007924:	2300      	movs	r3, #0
}
 8007926:	4618      	mov	r0, r3
 8007928:	3708      	adds	r7, #8
 800792a:	46bd      	mov	sp, r7
 800792c:	bd80      	pop	{r7, pc}
 800792e:	bf00      	nop
 8007930:	20000af4 	.word	0x20000af4

08007934 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b084      	sub	sp, #16
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800793c:	2300      	movs	r3, #0
 800793e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007940:	2300      	movs	r3, #0
 8007942:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800794a:	4618      	mov	r0, r3
 800794c:	f7fa fd69 	bl	8002422 <HAL_PCD_Start>
 8007950:	4603      	mov	r3, r0
 8007952:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007954:	7bfb      	ldrb	r3, [r7, #15]
 8007956:	4618      	mov	r0, r3
 8007958:	f000 f962 	bl	8007c20 <USBD_Get_USB_Status>
 800795c:	4603      	mov	r3, r0
 800795e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007960:	7bbb      	ldrb	r3, [r7, #14]
}
 8007962:	4618      	mov	r0, r3
 8007964:	3710      	adds	r7, #16
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}

0800796a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800796a:	b580      	push	{r7, lr}
 800796c:	b084      	sub	sp, #16
 800796e:	af00      	add	r7, sp, #0
 8007970:	6078      	str	r0, [r7, #4]
 8007972:	4608      	mov	r0, r1
 8007974:	4611      	mov	r1, r2
 8007976:	461a      	mov	r2, r3
 8007978:	4603      	mov	r3, r0
 800797a:	70fb      	strb	r3, [r7, #3]
 800797c:	460b      	mov	r3, r1
 800797e:	70bb      	strb	r3, [r7, #2]
 8007980:	4613      	mov	r3, r2
 8007982:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007984:	2300      	movs	r3, #0
 8007986:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007988:	2300      	movs	r3, #0
 800798a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007992:	78bb      	ldrb	r3, [r7, #2]
 8007994:	883a      	ldrh	r2, [r7, #0]
 8007996:	78f9      	ldrb	r1, [r7, #3]
 8007998:	f7fb f94d 	bl	8002c36 <HAL_PCD_EP_Open>
 800799c:	4603      	mov	r3, r0
 800799e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80079a0:	7bfb      	ldrb	r3, [r7, #15]
 80079a2:	4618      	mov	r0, r3
 80079a4:	f000 f93c 	bl	8007c20 <USBD_Get_USB_Status>
 80079a8:	4603      	mov	r3, r0
 80079aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80079ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3710      	adds	r7, #16
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}

080079b6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80079b6:	b580      	push	{r7, lr}
 80079b8:	b084      	sub	sp, #16
 80079ba:	af00      	add	r7, sp, #0
 80079bc:	6078      	str	r0, [r7, #4]
 80079be:	460b      	mov	r3, r1
 80079c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079c2:	2300      	movs	r3, #0
 80079c4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079c6:	2300      	movs	r3, #0
 80079c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80079d0:	78fa      	ldrb	r2, [r7, #3]
 80079d2:	4611      	mov	r1, r2
 80079d4:	4618      	mov	r0, r3
 80079d6:	f7fb f996 	bl	8002d06 <HAL_PCD_EP_Close>
 80079da:	4603      	mov	r3, r0
 80079dc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80079de:	7bfb      	ldrb	r3, [r7, #15]
 80079e0:	4618      	mov	r0, r3
 80079e2:	f000 f91d 	bl	8007c20 <USBD_Get_USB_Status>
 80079e6:	4603      	mov	r3, r0
 80079e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80079ea:	7bbb      	ldrb	r3, [r7, #14]
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	3710      	adds	r7, #16
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}

080079f4 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b084      	sub	sp, #16
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
 80079fc:	460b      	mov	r3, r1
 80079fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a00:	2300      	movs	r3, #0
 8007a02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a04:	2300      	movs	r3, #0
 8007a06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007a0e:	78fa      	ldrb	r2, [r7, #3]
 8007a10:	4611      	mov	r1, r2
 8007a12:	4618      	mov	r0, r3
 8007a14:	f7fb fb28 	bl	8003068 <HAL_PCD_EP_Flush>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a1c:	7bfb      	ldrb	r3, [r7, #15]
 8007a1e:	4618      	mov	r0, r3
 8007a20:	f000 f8fe 	bl	8007c20 <USBD_Get_USB_Status>
 8007a24:	4603      	mov	r3, r0
 8007a26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a28:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	3710      	adds	r7, #16
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bd80      	pop	{r7, pc}

08007a32 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a32:	b580      	push	{r7, lr}
 8007a34:	b084      	sub	sp, #16
 8007a36:	af00      	add	r7, sp, #0
 8007a38:	6078      	str	r0, [r7, #4]
 8007a3a:	460b      	mov	r3, r1
 8007a3c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a42:	2300      	movs	r3, #0
 8007a44:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007a4c:	78fa      	ldrb	r2, [r7, #3]
 8007a4e:	4611      	mov	r1, r2
 8007a50:	4618      	mov	r0, r3
 8007a52:	f7fb fa4f 	bl	8002ef4 <HAL_PCD_EP_SetStall>
 8007a56:	4603      	mov	r3, r0
 8007a58:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a5a:	7bfb      	ldrb	r3, [r7, #15]
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	f000 f8df 	bl	8007c20 <USBD_Get_USB_Status>
 8007a62:	4603      	mov	r3, r0
 8007a64:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a66:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	3710      	adds	r7, #16
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd80      	pop	{r7, pc}

08007a70 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b084      	sub	sp, #16
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
 8007a78:	460b      	mov	r3, r1
 8007a7a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a80:	2300      	movs	r3, #0
 8007a82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007a8a:	78fa      	ldrb	r2, [r7, #3]
 8007a8c:	4611      	mov	r1, r2
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f7fb fa94 	bl	8002fbc <HAL_PCD_EP_ClrStall>
 8007a94:	4603      	mov	r3, r0
 8007a96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a98:	7bfb      	ldrb	r3, [r7, #15]
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	f000 f8c0 	bl	8007c20 <USBD_Get_USB_Status>
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007aa4:	7bbb      	ldrb	r3, [r7, #14]
}
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	3710      	adds	r7, #16
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	bd80      	pop	{r7, pc}

08007aae <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007aae:	b480      	push	{r7}
 8007ab0:	b085      	sub	sp, #20
 8007ab2:	af00      	add	r7, sp, #0
 8007ab4:	6078      	str	r0, [r7, #4]
 8007ab6:	460b      	mov	r3, r1
 8007ab8:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007ac0:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007ac2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	da0b      	bge.n	8007ae2 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007aca:	78fb      	ldrb	r3, [r7, #3]
 8007acc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007ad0:	68f9      	ldr	r1, [r7, #12]
 8007ad2:	4613      	mov	r3, r2
 8007ad4:	00db      	lsls	r3, r3, #3
 8007ad6:	1a9b      	subs	r3, r3, r2
 8007ad8:	009b      	lsls	r3, r3, #2
 8007ada:	440b      	add	r3, r1
 8007adc:	333e      	adds	r3, #62	; 0x3e
 8007ade:	781b      	ldrb	r3, [r3, #0]
 8007ae0:	e00b      	b.n	8007afa <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007ae2:	78fb      	ldrb	r3, [r7, #3]
 8007ae4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007ae8:	68f9      	ldr	r1, [r7, #12]
 8007aea:	4613      	mov	r3, r2
 8007aec:	00db      	lsls	r3, r3, #3
 8007aee:	1a9b      	subs	r3, r3, r2
 8007af0:	009b      	lsls	r3, r3, #2
 8007af2:	440b      	add	r3, r1
 8007af4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007af8:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	3714      	adds	r7, #20
 8007afe:	46bd      	mov	sp, r7
 8007b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b04:	4770      	bx	lr

08007b06 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007b06:	b580      	push	{r7, lr}
 8007b08:	b084      	sub	sp, #16
 8007b0a:	af00      	add	r7, sp, #0
 8007b0c:	6078      	str	r0, [r7, #4]
 8007b0e:	460b      	mov	r3, r1
 8007b10:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b12:	2300      	movs	r3, #0
 8007b14:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b16:	2300      	movs	r3, #0
 8007b18:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007b20:	78fa      	ldrb	r2, [r7, #3]
 8007b22:	4611      	mov	r1, r2
 8007b24:	4618      	mov	r0, r3
 8007b26:	f7fb f861 	bl	8002bec <HAL_PCD_SetAddress>
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b2e:	7bfb      	ldrb	r3, [r7, #15]
 8007b30:	4618      	mov	r0, r3
 8007b32:	f000 f875 	bl	8007c20 <USBD_Get_USB_Status>
 8007b36:	4603      	mov	r3, r0
 8007b38:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b3a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	3710      	adds	r7, #16
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}

08007b44 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b086      	sub	sp, #24
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	60f8      	str	r0, [r7, #12]
 8007b4c:	607a      	str	r2, [r7, #4]
 8007b4e:	603b      	str	r3, [r7, #0]
 8007b50:	460b      	mov	r3, r1
 8007b52:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b54:	2300      	movs	r3, #0
 8007b56:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b58:	2300      	movs	r3, #0
 8007b5a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007b62:	7af9      	ldrb	r1, [r7, #11]
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	687a      	ldr	r2, [r7, #4]
 8007b68:	f7fb f97a 	bl	8002e60 <HAL_PCD_EP_Transmit>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b70:	7dfb      	ldrb	r3, [r7, #23]
 8007b72:	4618      	mov	r0, r3
 8007b74:	f000 f854 	bl	8007c20 <USBD_Get_USB_Status>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007b7c:	7dbb      	ldrb	r3, [r7, #22]
}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	3718      	adds	r7, #24
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}

08007b86 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007b86:	b580      	push	{r7, lr}
 8007b88:	b086      	sub	sp, #24
 8007b8a:	af00      	add	r7, sp, #0
 8007b8c:	60f8      	str	r0, [r7, #12]
 8007b8e:	607a      	str	r2, [r7, #4]
 8007b90:	603b      	str	r3, [r7, #0]
 8007b92:	460b      	mov	r3, r1
 8007b94:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b96:	2300      	movs	r3, #0
 8007b98:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007ba4:	7af9      	ldrb	r1, [r7, #11]
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	687a      	ldr	r2, [r7, #4]
 8007baa:	f7fb f8f6 	bl	8002d9a <HAL_PCD_EP_Receive>
 8007bae:	4603      	mov	r3, r0
 8007bb0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007bb2:	7dfb      	ldrb	r3, [r7, #23]
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	f000 f833 	bl	8007c20 <USBD_Get_USB_Status>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007bbe:	7dbb      	ldrb	r3, [r7, #22]
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	3718      	adds	r7, #24
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}

08007bc8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b082      	sub	sp, #8
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
 8007bd0:	460b      	mov	r3, r1
 8007bd2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007bda:	78fa      	ldrb	r2, [r7, #3]
 8007bdc:	4611      	mov	r1, r2
 8007bde:	4618      	mov	r0, r3
 8007be0:	f7fb f926 	bl	8002e30 <HAL_PCD_EP_GetRxCount>
 8007be4:	4603      	mov	r3, r0
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	3708      	adds	r7, #8
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}
	...

08007bf0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	b083      	sub	sp, #12
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_AUDIO_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007bf8:	4b03      	ldr	r3, [pc, #12]	; (8007c08 <USBD_static_malloc+0x18>)
}
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	370c      	adds	r7, #12
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c04:	4770      	bx	lr
 8007c06:	bf00      	nop
 8007c08:	20000efc 	.word	0x20000efc

08007c0c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b083      	sub	sp, #12
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]

}
 8007c14:	bf00      	nop
 8007c16:	370c      	adds	r7, #12
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1e:	4770      	bx	lr

08007c20 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007c20:	b480      	push	{r7}
 8007c22:	b085      	sub	sp, #20
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	4603      	mov	r3, r0
 8007c28:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007c2e:	79fb      	ldrb	r3, [r7, #7]
 8007c30:	2b03      	cmp	r3, #3
 8007c32:	d817      	bhi.n	8007c64 <USBD_Get_USB_Status+0x44>
 8007c34:	a201      	add	r2, pc, #4	; (adr r2, 8007c3c <USBD_Get_USB_Status+0x1c>)
 8007c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c3a:	bf00      	nop
 8007c3c:	08007c4d 	.word	0x08007c4d
 8007c40:	08007c53 	.word	0x08007c53
 8007c44:	08007c59 	.word	0x08007c59
 8007c48:	08007c5f 	.word	0x08007c5f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	73fb      	strb	r3, [r7, #15]
    break;
 8007c50:	e00b      	b.n	8007c6a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007c52:	2303      	movs	r3, #3
 8007c54:	73fb      	strb	r3, [r7, #15]
    break;
 8007c56:	e008      	b.n	8007c6a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007c58:	2301      	movs	r3, #1
 8007c5a:	73fb      	strb	r3, [r7, #15]
    break;
 8007c5c:	e005      	b.n	8007c6a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007c5e:	2303      	movs	r3, #3
 8007c60:	73fb      	strb	r3, [r7, #15]
    break;
 8007c62:	e002      	b.n	8007c6a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007c64:	2303      	movs	r3, #3
 8007c66:	73fb      	strb	r3, [r7, #15]
    break;
 8007c68:	bf00      	nop
  }
  return usb_status;
 8007c6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	3714      	adds	r7, #20
 8007c70:	46bd      	mov	sp, r7
 8007c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c76:	4770      	bx	lr

08007c78 <__libc_init_array>:
 8007c78:	b570      	push	{r4, r5, r6, lr}
 8007c7a:	4d0d      	ldr	r5, [pc, #52]	; (8007cb0 <__libc_init_array+0x38>)
 8007c7c:	4c0d      	ldr	r4, [pc, #52]	; (8007cb4 <__libc_init_array+0x3c>)
 8007c7e:	1b64      	subs	r4, r4, r5
 8007c80:	10a4      	asrs	r4, r4, #2
 8007c82:	2600      	movs	r6, #0
 8007c84:	42a6      	cmp	r6, r4
 8007c86:	d109      	bne.n	8007c9c <__libc_init_array+0x24>
 8007c88:	4d0b      	ldr	r5, [pc, #44]	; (8007cb8 <__libc_init_array+0x40>)
 8007c8a:	4c0c      	ldr	r4, [pc, #48]	; (8007cbc <__libc_init_array+0x44>)
 8007c8c:	f000 f820 	bl	8007cd0 <_init>
 8007c90:	1b64      	subs	r4, r4, r5
 8007c92:	10a4      	asrs	r4, r4, #2
 8007c94:	2600      	movs	r6, #0
 8007c96:	42a6      	cmp	r6, r4
 8007c98:	d105      	bne.n	8007ca6 <__libc_init_array+0x2e>
 8007c9a:	bd70      	pop	{r4, r5, r6, pc}
 8007c9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ca0:	4798      	blx	r3
 8007ca2:	3601      	adds	r6, #1
 8007ca4:	e7ee      	b.n	8007c84 <__libc_init_array+0xc>
 8007ca6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007caa:	4798      	blx	r3
 8007cac:	3601      	adds	r6, #1
 8007cae:	e7f2      	b.n	8007c96 <__libc_init_array+0x1e>
 8007cb0:	08007d50 	.word	0x08007d50
 8007cb4:	08007d50 	.word	0x08007d50
 8007cb8:	08007d50 	.word	0x08007d50
 8007cbc:	08007d54 	.word	0x08007d54

08007cc0 <memset>:
 8007cc0:	4402      	add	r2, r0
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d100      	bne.n	8007cca <memset+0xa>
 8007cc8:	4770      	bx	lr
 8007cca:	f803 1b01 	strb.w	r1, [r3], #1
 8007cce:	e7f9      	b.n	8007cc4 <memset+0x4>

08007cd0 <_init>:
 8007cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cd2:	bf00      	nop
 8007cd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cd6:	bc08      	pop	{r3}
 8007cd8:	469e      	mov	lr, r3
 8007cda:	4770      	bx	lr

08007cdc <_fini>:
 8007cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cde:	bf00      	nop
 8007ce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ce2:	bc08      	pop	{r3}
 8007ce4:	469e      	mov	lr, r3
 8007ce6:	4770      	bx	lr
